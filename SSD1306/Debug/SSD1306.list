
SSD1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002af4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000082c  08002c00  08002c00  00012c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800342c  0800342c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800342c  0800342c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800342c  0800342c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800342c  0800342c  0001342c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003430  08003430  00013430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  20000014  08003448  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  08003448  00020504  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9b0  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002061  00000000  00000000  0002a9ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002ca50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002d488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180d7  00000000  00000000  0002dde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d31f  00000000  00000000  00045eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088855  00000000  00000000  000531d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dba2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028fc  00000000  00000000  000dba7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08002be8 	.word	0x08002be8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08002be8 	.word	0x08002be8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fc5c 	bl	8000a0c <HAL_Init>

  /* USER CODE BEGIN Init */
  ssd1306_Init();
 8000154:	f000 faa0 	bl	8000698 <ssd1306_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f80b 	bl	8000172 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f8f4 	bl	8000348 <MX_GPIO_Init>
  MX_DMA_Init();
 8000160:	f000 f8d4 	bl	800030c <MX_DMA_Init>
  MX_I2C1_Init();
 8000164:	f000 f8a4 	bl	80002b0 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000168:	f000 f854 	bl	8000214 <MX_ADC1_Init>
//
//	  ssd1306_SetCursor(40, 37);
//	  ssd1306_WriteString(buffer, Font_11x18, White);
//	  ssd1306_UpdateScreen();

	  ssd1306_TestDrawBitmap();
 800016c:	f000 fc26 	bl	80009bc <ssd1306_TestDrawBitmap>
 8000170:	e7fc      	b.n	800016c <main+0x20>

08000172 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000172:	b580      	push	{r7, lr}
 8000174:	b094      	sub	sp, #80	; 0x50
 8000176:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000178:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800017c:	2228      	movs	r2, #40	; 0x28
 800017e:	2100      	movs	r1, #0
 8000180:	4618      	mov	r0, r3
 8000182:	f002 fd29 	bl	8002bd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000186:	f107 0314 	add.w	r3, r7, #20
 800018a:	2200      	movs	r2, #0
 800018c:	601a      	str	r2, [r3, #0]
 800018e:	605a      	str	r2, [r3, #4]
 8000190:	609a      	str	r2, [r3, #8]
 8000192:	60da      	str	r2, [r3, #12]
 8000194:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	2200      	movs	r2, #0
 800019a:	601a      	str	r2, [r3, #0]
 800019c:	605a      	str	r2, [r3, #4]
 800019e:	609a      	str	r2, [r3, #8]
 80001a0:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001a2:	2302      	movs	r3, #2
 80001a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a6:	2301      	movs	r3, #1
 80001a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001aa:	2310      	movs	r3, #16
 80001ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001ae:	2300      	movs	r3, #0
 80001b0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001b6:	4618      	mov	r0, r3
 80001b8:	f002 f838 	bl	800222c <HAL_RCC_OscConfig>
 80001bc:	4603      	mov	r3, r0
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d001      	beq.n	80001c6 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80001c2:	f000 f8e3 	bl	800038c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001c6:	230f      	movs	r3, #15
 80001c8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001ca:	2300      	movs	r3, #0
 80001cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ce:	2300      	movs	r3, #0
 80001d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001d2:	2300      	movs	r3, #0
 80001d4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d6:	2300      	movs	r3, #0
 80001d8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001da:	f107 0314 	add.w	r3, r7, #20
 80001de:	2100      	movs	r1, #0
 80001e0:	4618      	mov	r0, r3
 80001e2:	f002 faa5 	bl	8002730 <HAL_RCC_ClockConfig>
 80001e6:	4603      	mov	r3, r0
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d001      	beq.n	80001f0 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80001ec:	f000 f8ce 	bl	800038c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80001f0:	2302      	movs	r3, #2
 80001f2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80001f4:	2300      	movs	r3, #0
 80001f6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001f8:	1d3b      	adds	r3, r7, #4
 80001fa:	4618      	mov	r0, r3
 80001fc:	f002 fc12 	bl	8002a24 <HAL_RCCEx_PeriphCLKConfig>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d001      	beq.n	800020a <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000206:	f000 f8c1 	bl	800038c <Error_Handler>
  }
}
 800020a:	bf00      	nop
 800020c:	3750      	adds	r7, #80	; 0x50
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
	...

08000214 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	2200      	movs	r2, #0
 800021e:	601a      	str	r2, [r3, #0]
 8000220:	605a      	str	r2, [r3, #4]
 8000222:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000224:	4b20      	ldr	r3, [pc, #128]	; (80002a8 <MX_ADC1_Init+0x94>)
 8000226:	4a21      	ldr	r2, [pc, #132]	; (80002ac <MX_ADC1_Init+0x98>)
 8000228:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800022a:	4b1f      	ldr	r3, [pc, #124]	; (80002a8 <MX_ADC1_Init+0x94>)
 800022c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000230:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000232:	4b1d      	ldr	r3, [pc, #116]	; (80002a8 <MX_ADC1_Init+0x94>)
 8000234:	2200      	movs	r2, #0
 8000236:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000238:	4b1b      	ldr	r3, [pc, #108]	; (80002a8 <MX_ADC1_Init+0x94>)
 800023a:	2200      	movs	r2, #0
 800023c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800023e:	4b1a      	ldr	r3, [pc, #104]	; (80002a8 <MX_ADC1_Init+0x94>)
 8000240:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000244:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000246:	4b18      	ldr	r3, [pc, #96]	; (80002a8 <MX_ADC1_Init+0x94>)
 8000248:	2200      	movs	r2, #0
 800024a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 800024c:	4b16      	ldr	r3, [pc, #88]	; (80002a8 <MX_ADC1_Init+0x94>)
 800024e:	2202      	movs	r2, #2
 8000250:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000252:	4815      	ldr	r0, [pc, #84]	; (80002a8 <MX_ADC1_Init+0x94>)
 8000254:	f000 fc60 	bl	8000b18 <HAL_ADC_Init>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800025e:	f000 f895 	bl	800038c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000262:	2300      	movs	r3, #0
 8000264:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000266:	2301      	movs	r3, #1
 8000268:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800026a:	2307      	movs	r3, #7
 800026c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	4619      	mov	r1, r3
 8000272:	480d      	ldr	r0, [pc, #52]	; (80002a8 <MX_ADC1_Init+0x94>)
 8000274:	f000 fdfa 	bl	8000e6c <HAL_ADC_ConfigChannel>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800027e:	f000 f885 	bl	800038c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000282:	2305      	movs	r3, #5
 8000284:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000286:	2302      	movs	r3, #2
 8000288:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4619      	mov	r1, r3
 800028e:	4806      	ldr	r0, [pc, #24]	; (80002a8 <MX_ADC1_Init+0x94>)
 8000290:	f000 fdec 	bl	8000e6c <HAL_ADC_ConfigChannel>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800029a:	f000 f877 	bl	800038c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800029e:	bf00      	nop
 80002a0:	3710      	adds	r7, #16
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	20000030 	.word	0x20000030
 80002ac:	40012400 	.word	0x40012400

080002b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002b4:	4b12      	ldr	r3, [pc, #72]	; (8000300 <MX_I2C1_Init+0x50>)
 80002b6:	4a13      	ldr	r2, [pc, #76]	; (8000304 <MX_I2C1_Init+0x54>)
 80002b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002ba:	4b11      	ldr	r3, [pc, #68]	; (8000300 <MX_I2C1_Init+0x50>)
 80002bc:	4a12      	ldr	r2, [pc, #72]	; (8000308 <MX_I2C1_Init+0x58>)
 80002be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002c0:	4b0f      	ldr	r3, [pc, #60]	; (8000300 <MX_I2C1_Init+0x50>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002c6:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <MX_I2C1_Init+0x50>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <MX_I2C1_Init+0x50>)
 80002ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002d4:	4b0a      	ldr	r3, [pc, #40]	; (8000300 <MX_I2C1_Init+0x50>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002da:	4b09      	ldr	r3, [pc, #36]	; (8000300 <MX_I2C1_Init+0x50>)
 80002dc:	2200      	movs	r2, #0
 80002de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002e0:	4b07      	ldr	r3, [pc, #28]	; (8000300 <MX_I2C1_Init+0x50>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002e6:	4b06      	ldr	r3, [pc, #24]	; (8000300 <MX_I2C1_Init+0x50>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002ec:	4804      	ldr	r0, [pc, #16]	; (8000300 <MX_I2C1_Init+0x50>)
 80002ee:	f001 faf1 	bl	80018d4 <HAL_I2C_Init>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002f8:	f000 f848 	bl	800038c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	200000a4 	.word	0x200000a4
 8000304:	40005400 	.word	0x40005400
 8000308:	000186a0 	.word	0x000186a0

0800030c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000312:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <MX_DMA_Init+0x38>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	4a0b      	ldr	r2, [pc, #44]	; (8000344 <MX_DMA_Init+0x38>)
 8000318:	f043 0301 	orr.w	r3, r3, #1
 800031c:	6153      	str	r3, [r2, #20]
 800031e:	4b09      	ldr	r3, [pc, #36]	; (8000344 <MX_DMA_Init+0x38>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	f003 0301 	and.w	r3, r3, #1
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800032a:	2200      	movs	r2, #0
 800032c:	2100      	movs	r1, #0
 800032e:	200b      	movs	r0, #11
 8000330:	f000 ffb5 	bl	800129e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000334:	200b      	movs	r0, #11
 8000336:	f000 ffce 	bl	80012d6 <HAL_NVIC_EnableIRQ>

}
 800033a:	bf00      	nop
 800033c:	3708      	adds	r7, #8
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40021000 	.word	0x40021000

08000348 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800034e:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <MX_GPIO_Init+0x40>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	4a0d      	ldr	r2, [pc, #52]	; (8000388 <MX_GPIO_Init+0x40>)
 8000354:	f043 0304 	orr.w	r3, r3, #4
 8000358:	6193      	str	r3, [r2, #24]
 800035a:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <MX_GPIO_Init+0x40>)
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	f003 0304 	and.w	r3, r3, #4
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <MX_GPIO_Init+0x40>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	4a07      	ldr	r2, [pc, #28]	; (8000388 <MX_GPIO_Init+0x40>)
 800036c:	f043 0308 	orr.w	r3, r3, #8
 8000370:	6193      	str	r3, [r2, #24]
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <MX_GPIO_Init+0x40>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	f003 0308 	and.w	r3, r3, #8
 800037a:	603b      	str	r3, [r7, #0]
 800037c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800037e:	bf00      	nop
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr
 8000388:	40021000 	.word	0x40021000

0800038c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000390:	b672      	cpsid	i
}
 8000392:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000394:	e7fe      	b.n	8000394 <Error_Handler+0x8>
	...

08000398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000398:	b480      	push	{r7}
 800039a:	b085      	sub	sp, #20
 800039c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800039e:	4b15      	ldr	r3, [pc, #84]	; (80003f4 <HAL_MspInit+0x5c>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	4a14      	ldr	r2, [pc, #80]	; (80003f4 <HAL_MspInit+0x5c>)
 80003a4:	f043 0301 	orr.w	r3, r3, #1
 80003a8:	6193      	str	r3, [r2, #24]
 80003aa:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <HAL_MspInit+0x5c>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	f003 0301 	and.w	r3, r3, #1
 80003b2:	60bb      	str	r3, [r7, #8]
 80003b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003b6:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <HAL_MspInit+0x5c>)
 80003b8:	69db      	ldr	r3, [r3, #28]
 80003ba:	4a0e      	ldr	r2, [pc, #56]	; (80003f4 <HAL_MspInit+0x5c>)
 80003bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003c0:	61d3      	str	r3, [r2, #28]
 80003c2:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <HAL_MspInit+0x5c>)
 80003c4:	69db      	ldr	r3, [r3, #28]
 80003c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003ce:	4b0a      	ldr	r3, [pc, #40]	; (80003f8 <HAL_MspInit+0x60>)
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	60fb      	str	r3, [r7, #12]
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	4a04      	ldr	r2, [pc, #16]	; (80003f8 <HAL_MspInit+0x60>)
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ea:	bf00      	nop
 80003ec:	3714      	adds	r7, #20
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bc80      	pop	{r7}
 80003f2:	4770      	bx	lr
 80003f4:	40021000 	.word	0x40021000
 80003f8:	40010000 	.word	0x40010000

080003fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b088      	sub	sp, #32
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000404:	f107 0310 	add.w	r3, r7, #16
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	605a      	str	r2, [r3, #4]
 800040e:	609a      	str	r2, [r3, #8]
 8000410:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a2c      	ldr	r2, [pc, #176]	; (80004c8 <HAL_ADC_MspInit+0xcc>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d151      	bne.n	80004c0 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800041c:	4b2b      	ldr	r3, [pc, #172]	; (80004cc <HAL_ADC_MspInit+0xd0>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a2a      	ldr	r2, [pc, #168]	; (80004cc <HAL_ADC_MspInit+0xd0>)
 8000422:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000426:	6193      	str	r3, [r2, #24]
 8000428:	4b28      	ldr	r3, [pc, #160]	; (80004cc <HAL_ADC_MspInit+0xd0>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000430:	60fb      	str	r3, [r7, #12]
 8000432:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000434:	4b25      	ldr	r3, [pc, #148]	; (80004cc <HAL_ADC_MspInit+0xd0>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a24      	ldr	r2, [pc, #144]	; (80004cc <HAL_ADC_MspInit+0xd0>)
 800043a:	f043 0304 	orr.w	r3, r3, #4
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b22      	ldr	r3, [pc, #136]	; (80004cc <HAL_ADC_MspInit+0xd0>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f003 0304 	and.w	r3, r3, #4
 8000448:	60bb      	str	r3, [r7, #8]
 800044a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Sensor_Pin|Battery_Pin;
 800044c:	2321      	movs	r3, #33	; 0x21
 800044e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000450:	2303      	movs	r3, #3
 8000452:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000454:	f107 0310 	add.w	r3, r7, #16
 8000458:	4619      	mov	r1, r3
 800045a:	481d      	ldr	r0, [pc, #116]	; (80004d0 <HAL_ADC_MspInit+0xd4>)
 800045c:	f001 f8b6 	bl	80015cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000460:	4b1c      	ldr	r3, [pc, #112]	; (80004d4 <HAL_ADC_MspInit+0xd8>)
 8000462:	4a1d      	ldr	r2, [pc, #116]	; (80004d8 <HAL_ADC_MspInit+0xdc>)
 8000464:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000466:	4b1b      	ldr	r3, [pc, #108]	; (80004d4 <HAL_ADC_MspInit+0xd8>)
 8000468:	2200      	movs	r2, #0
 800046a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800046c:	4b19      	ldr	r3, [pc, #100]	; (80004d4 <HAL_ADC_MspInit+0xd8>)
 800046e:	2200      	movs	r2, #0
 8000470:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000472:	4b18      	ldr	r3, [pc, #96]	; (80004d4 <HAL_ADC_MspInit+0xd8>)
 8000474:	2280      	movs	r2, #128	; 0x80
 8000476:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000478:	4b16      	ldr	r3, [pc, #88]	; (80004d4 <HAL_ADC_MspInit+0xd8>)
 800047a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800047e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000480:	4b14      	ldr	r3, [pc, #80]	; (80004d4 <HAL_ADC_MspInit+0xd8>)
 8000482:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000486:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000488:	4b12      	ldr	r3, [pc, #72]	; (80004d4 <HAL_ADC_MspInit+0xd8>)
 800048a:	2220      	movs	r2, #32
 800048c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800048e:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <HAL_ADC_MspInit+0xd8>)
 8000490:	2200      	movs	r2, #0
 8000492:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000494:	480f      	ldr	r0, [pc, #60]	; (80004d4 <HAL_ADC_MspInit+0xd8>)
 8000496:	f000 ff39 	bl	800130c <HAL_DMA_Init>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80004a0:	f7ff ff74 	bl	800038c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4a0b      	ldr	r2, [pc, #44]	; (80004d4 <HAL_ADC_MspInit+0xd8>)
 80004a8:	621a      	str	r2, [r3, #32]
 80004aa:	4a0a      	ldr	r2, [pc, #40]	; (80004d4 <HAL_ADC_MspInit+0xd8>)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80004b0:	2200      	movs	r2, #0
 80004b2:	2100      	movs	r1, #0
 80004b4:	2012      	movs	r0, #18
 80004b6:	f000 fef2 	bl	800129e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80004ba:	2012      	movs	r0, #18
 80004bc:	f000 ff0b 	bl	80012d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80004c0:	bf00      	nop
 80004c2:	3720      	adds	r7, #32
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40012400 	.word	0x40012400
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40010800 	.word	0x40010800
 80004d4:	20000060 	.word	0x20000060
 80004d8:	40020008 	.word	0x40020008

080004dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e4:	f107 0310 	add.w	r3, r7, #16
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a15      	ldr	r2, [pc, #84]	; (800054c <HAL_I2C_MspInit+0x70>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d123      	bne.n	8000544 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fc:	4b14      	ldr	r3, [pc, #80]	; (8000550 <HAL_I2C_MspInit+0x74>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a13      	ldr	r2, [pc, #76]	; (8000550 <HAL_I2C_MspInit+0x74>)
 8000502:	f043 0308 	orr.w	r3, r3, #8
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <HAL_I2C_MspInit+0x74>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0308 	and.w	r3, r3, #8
 8000510:	60fb      	str	r3, [r7, #12]
 8000512:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000514:	23c0      	movs	r3, #192	; 0xc0
 8000516:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000518:	2312      	movs	r3, #18
 800051a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800051c:	2303      	movs	r3, #3
 800051e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000520:	f107 0310 	add.w	r3, r7, #16
 8000524:	4619      	mov	r1, r3
 8000526:	480b      	ldr	r0, [pc, #44]	; (8000554 <HAL_I2C_MspInit+0x78>)
 8000528:	f001 f850 	bl	80015cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <HAL_I2C_MspInit+0x74>)
 800052e:	69db      	ldr	r3, [r3, #28]
 8000530:	4a07      	ldr	r2, [pc, #28]	; (8000550 <HAL_I2C_MspInit+0x74>)
 8000532:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000536:	61d3      	str	r3, [r2, #28]
 8000538:	4b05      	ldr	r3, [pc, #20]	; (8000550 <HAL_I2C_MspInit+0x74>)
 800053a:	69db      	ldr	r3, [r3, #28]
 800053c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000544:	bf00      	nop
 8000546:	3720      	adds	r7, #32
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40005400 	.word	0x40005400
 8000550:	40021000 	.word	0x40021000
 8000554:	40010c00 	.word	0x40010c00

08000558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800055c:	e7fe      	b.n	800055c <NMI_Handler+0x4>

0800055e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000562:	e7fe      	b.n	8000562 <HardFault_Handler+0x4>

08000564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <MemManage_Handler+0x4>

0800056a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800056e:	e7fe      	b.n	800056e <BusFault_Handler+0x4>

08000570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000574:	e7fe      	b.n	8000574 <UsageFault_Handler+0x4>

08000576 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr

08000582 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr

0800058e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr

0800059a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800059e:	f000 fa7b 	bl	8000a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
	...

080005a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80005ac:	4802      	ldr	r0, [pc, #8]	; (80005b8 <DMA1_Channel1_IRQHandler+0x10>)
 80005ae:	f000 ff07 	bl	80013c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000060 	.word	0x20000060

080005bc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80005c0:	4802      	ldr	r0, [pc, #8]	; (80005cc <ADC1_2_IRQHandler+0x10>)
 80005c2:	f000 fb81 	bl	8000cc8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000030 	.word	0x20000030

080005d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr

080005dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005dc:	f7ff fff8 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e0:	480b      	ldr	r0, [pc, #44]	; (8000610 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005e2:	490c      	ldr	r1, [pc, #48]	; (8000614 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005e4:	4a0c      	ldr	r2, [pc, #48]	; (8000618 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e8:	e002      	b.n	80005f0 <LoopCopyDataInit>

080005ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ee:	3304      	adds	r3, #4

080005f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f4:	d3f9      	bcc.n	80005ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005f6:	4a09      	ldr	r2, [pc, #36]	; (800061c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005f8:	4c09      	ldr	r4, [pc, #36]	; (8000620 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005fc:	e001      	b.n	8000602 <LoopFillZerobss>

080005fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000600:	3204      	adds	r2, #4

08000602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000604:	d3fb      	bcc.n	80005fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000606:	f002 fac3 	bl	8002b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800060a:	f7ff fd9f 	bl	800014c <main>
  bx lr
 800060e:	4770      	bx	lr
  ldr r0, =_sdata
 8000610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000614:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000618:	08003434 	.word	0x08003434
  ldr r2, =_sbss
 800061c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000620:	20000504 	.word	0x20000504

08000624 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000624:	e7fe      	b.n	8000624 <CAN1_RX1_IRQHandler>

08000626 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
	...

08000634 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af04      	add	r7, sp, #16
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800063e:	f04f 33ff 	mov.w	r3, #4294967295
 8000642:	9302      	str	r3, [sp, #8]
 8000644:	2301      	movs	r3, #1
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	1dfb      	adds	r3, r7, #7
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	2301      	movs	r3, #1
 800064e:	2200      	movs	r2, #0
 8000650:	2178      	movs	r1, #120	; 0x78
 8000652:	4803      	ldr	r0, [pc, #12]	; (8000660 <ssd1306_WriteCommand+0x2c>)
 8000654:	f001 fa82 	bl	8001b5c <HAL_I2C_Mem_Write>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	200000a4 	.word	0x200000a4

08000664 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af04      	add	r7, sp, #16
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	b29b      	uxth	r3, r3
 8000672:	f04f 32ff 	mov.w	r2, #4294967295
 8000676:	9202      	str	r2, [sp, #8]
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2301      	movs	r3, #1
 8000680:	2240      	movs	r2, #64	; 0x40
 8000682:	2178      	movs	r1, #120	; 0x78
 8000684:	4803      	ldr	r0, [pc, #12]	; (8000694 <ssd1306_WriteData+0x30>)
 8000686:	f001 fa69 	bl	8001b5c <HAL_I2C_Mem_Write>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	200000a4 	.word	0x200000a4

08000698 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800069c:	f7ff ffc3 	bl	8000626 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80006a0:	2064      	movs	r0, #100	; 0x64
 80006a2:	f000 fa15 	bl	8000ad0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80006a6:	2000      	movs	r0, #0
 80006a8:	f000 f96a 	bl	8000980 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80006ac:	2020      	movs	r0, #32
 80006ae:	f7ff ffc1 	bl	8000634 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80006b2:	2000      	movs	r0, #0
 80006b4:	f7ff ffbe 	bl	8000634 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80006b8:	20b0      	movs	r0, #176	; 0xb0
 80006ba:	f7ff ffbb 	bl	8000634 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80006be:	20c8      	movs	r0, #200	; 0xc8
 80006c0:	f7ff ffb8 	bl	8000634 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80006c4:	2000      	movs	r0, #0
 80006c6:	f7ff ffb5 	bl	8000634 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80006ca:	2010      	movs	r0, #16
 80006cc:	f7ff ffb2 	bl	8000634 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80006d0:	2040      	movs	r0, #64	; 0x40
 80006d2:	f7ff ffaf 	bl	8000634 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80006d6:	20ff      	movs	r0, #255	; 0xff
 80006d8:	f000 f93f 	bl	800095a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80006dc:	20a1      	movs	r0, #161	; 0xa1
 80006de:	f7ff ffa9 	bl	8000634 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80006e2:	20a6      	movs	r0, #166	; 0xa6
 80006e4:	f7ff ffa6 	bl	8000634 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80006e8:	20a8      	movs	r0, #168	; 0xa8
 80006ea:	f7ff ffa3 	bl	8000634 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80006ee:	203f      	movs	r0, #63	; 0x3f
 80006f0:	f7ff ffa0 	bl	8000634 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80006f4:	20a4      	movs	r0, #164	; 0xa4
 80006f6:	f7ff ff9d 	bl	8000634 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80006fa:	20d3      	movs	r0, #211	; 0xd3
 80006fc:	f7ff ff9a 	bl	8000634 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000700:	2000      	movs	r0, #0
 8000702:	f7ff ff97 	bl	8000634 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000706:	20d5      	movs	r0, #213	; 0xd5
 8000708:	f7ff ff94 	bl	8000634 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800070c:	20f0      	movs	r0, #240	; 0xf0
 800070e:	f7ff ff91 	bl	8000634 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000712:	20d9      	movs	r0, #217	; 0xd9
 8000714:	f7ff ff8e 	bl	8000634 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000718:	2022      	movs	r0, #34	; 0x22
 800071a:	f7ff ff8b 	bl	8000634 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800071e:	20da      	movs	r0, #218	; 0xda
 8000720:	f7ff ff88 	bl	8000634 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000724:	2012      	movs	r0, #18
 8000726:	f7ff ff85 	bl	8000634 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800072a:	20db      	movs	r0, #219	; 0xdb
 800072c:	f7ff ff82 	bl	8000634 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000730:	2020      	movs	r0, #32
 8000732:	f7ff ff7f 	bl	8000634 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000736:	208d      	movs	r0, #141	; 0x8d
 8000738:	f7ff ff7c 	bl	8000634 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800073c:	2014      	movs	r0, #20
 800073e:	f7ff ff79 	bl	8000634 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000742:	2001      	movs	r0, #1
 8000744:	f000 f91c 	bl	8000980 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000748:	2000      	movs	r0, #0
 800074a:	f000 f80f 	bl	800076c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800074e:	f000 f82f 	bl	80007b0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000752:	4b05      	ldr	r3, [pc, #20]	; (8000768 <ssd1306_Init+0xd0>)
 8000754:	2200      	movs	r2, #0
 8000756:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000758:	4b03      	ldr	r3, [pc, #12]	; (8000768 <ssd1306_Init+0xd0>)
 800075a:	2200      	movs	r2, #0
 800075c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800075e:	4b02      	ldr	r3, [pc, #8]	; (8000768 <ssd1306_Init+0xd0>)
 8000760:	2201      	movs	r2, #1
 8000762:	711a      	strb	r2, [r3, #4]
}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200004f8 	.word	0x200004f8

0800076c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	e00d      	b.n	8000798 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d101      	bne.n	8000786 <ssd1306_Fill+0x1a>
 8000782:	2100      	movs	r1, #0
 8000784:	e000      	b.n	8000788 <ssd1306_Fill+0x1c>
 8000786:	21ff      	movs	r1, #255	; 0xff
 8000788:	4a08      	ldr	r2, [pc, #32]	; (80007ac <ssd1306_Fill+0x40>)
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	4413      	add	r3, r2
 800078e:	460a      	mov	r2, r1
 8000790:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	3301      	adds	r3, #1
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800079e:	d3ed      	bcc.n	800077c <ssd1306_Fill+0x10>
    }
}
 80007a0:	bf00      	nop
 80007a2:	bf00      	nop
 80007a4:	3714      	adds	r7, #20
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	200000f8 	.word	0x200000f8

080007b0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80007b6:	2300      	movs	r3, #0
 80007b8:	71fb      	strb	r3, [r7, #7]
 80007ba:	e016      	b.n	80007ea <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	3b50      	subs	r3, #80	; 0x50
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff ff36 	bl	8000634 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80007c8:	2000      	movs	r0, #0
 80007ca:	f7ff ff33 	bl	8000634 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80007ce:	2010      	movs	r0, #16
 80007d0:	f7ff ff30 	bl	8000634 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	01db      	lsls	r3, r3, #7
 80007d8:	4a08      	ldr	r2, [pc, #32]	; (80007fc <ssd1306_UpdateScreen+0x4c>)
 80007da:	4413      	add	r3, r2
 80007dc:	2180      	movs	r1, #128	; 0x80
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ff40 	bl	8000664 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	3301      	adds	r3, #1
 80007e8:	71fb      	strb	r3, [r7, #7]
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2b07      	cmp	r3, #7
 80007ee:	d9e5      	bls.n	80007bc <ssd1306_UpdateScreen+0xc>
    }
}
 80007f0:	bf00      	nop
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200000f8 	.word	0x200000f8

08000800 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
 800080a:	460b      	mov	r3, r1
 800080c:	71bb      	strb	r3, [r7, #6]
 800080e:	4613      	mov	r3, r2
 8000810:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000816:	2b00      	cmp	r3, #0
 8000818:	db3d      	blt.n	8000896 <ssd1306_DrawPixel+0x96>
 800081a:	79bb      	ldrb	r3, [r7, #6]
 800081c:	2b3f      	cmp	r3, #63	; 0x3f
 800081e:	d83a      	bhi.n	8000896 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000820:	797b      	ldrb	r3, [r7, #5]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d11a      	bne.n	800085c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000826:	79fa      	ldrb	r2, [r7, #7]
 8000828:	79bb      	ldrb	r3, [r7, #6]
 800082a:	08db      	lsrs	r3, r3, #3
 800082c:	b2d8      	uxtb	r0, r3
 800082e:	4603      	mov	r3, r0
 8000830:	01db      	lsls	r3, r3, #7
 8000832:	4413      	add	r3, r2
 8000834:	4a1a      	ldr	r2, [pc, #104]	; (80008a0 <ssd1306_DrawPixel+0xa0>)
 8000836:	5cd3      	ldrb	r3, [r2, r3]
 8000838:	b25a      	sxtb	r2, r3
 800083a:	79bb      	ldrb	r3, [r7, #6]
 800083c:	f003 0307 	and.w	r3, r3, #7
 8000840:	2101      	movs	r1, #1
 8000842:	fa01 f303 	lsl.w	r3, r1, r3
 8000846:	b25b      	sxtb	r3, r3
 8000848:	4313      	orrs	r3, r2
 800084a:	b259      	sxtb	r1, r3
 800084c:	79fa      	ldrb	r2, [r7, #7]
 800084e:	4603      	mov	r3, r0
 8000850:	01db      	lsls	r3, r3, #7
 8000852:	4413      	add	r3, r2
 8000854:	b2c9      	uxtb	r1, r1
 8000856:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <ssd1306_DrawPixel+0xa0>)
 8000858:	54d1      	strb	r1, [r2, r3]
 800085a:	e01d      	b.n	8000898 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800085c:	79fa      	ldrb	r2, [r7, #7]
 800085e:	79bb      	ldrb	r3, [r7, #6]
 8000860:	08db      	lsrs	r3, r3, #3
 8000862:	b2d8      	uxtb	r0, r3
 8000864:	4603      	mov	r3, r0
 8000866:	01db      	lsls	r3, r3, #7
 8000868:	4413      	add	r3, r2
 800086a:	4a0d      	ldr	r2, [pc, #52]	; (80008a0 <ssd1306_DrawPixel+0xa0>)
 800086c:	5cd3      	ldrb	r3, [r2, r3]
 800086e:	b25a      	sxtb	r2, r3
 8000870:	79bb      	ldrb	r3, [r7, #6]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	2101      	movs	r1, #1
 8000878:	fa01 f303 	lsl.w	r3, r1, r3
 800087c:	b25b      	sxtb	r3, r3
 800087e:	43db      	mvns	r3, r3
 8000880:	b25b      	sxtb	r3, r3
 8000882:	4013      	ands	r3, r2
 8000884:	b259      	sxtb	r1, r3
 8000886:	79fa      	ldrb	r2, [r7, #7]
 8000888:	4603      	mov	r3, r0
 800088a:	01db      	lsls	r3, r3, #7
 800088c:	4413      	add	r3, r2
 800088e:	b2c9      	uxtb	r1, r1
 8000890:	4a03      	ldr	r2, [pc, #12]	; (80008a0 <ssd1306_DrawPixel+0xa0>)
 8000892:	54d1      	strb	r1, [r2, r3]
 8000894:	e000      	b.n	8000898 <ssd1306_DrawPixel+0x98>
        return;
 8000896:	bf00      	nop
    }
}
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	200000f8 	.word	0x200000f8

080008a4 <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	603a      	str	r2, [r7, #0]
 80008ac:	461a      	mov	r2, r3
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
 80008b2:	460b      	mov	r3, r1
 80008b4:	71bb      	strb	r3, [r7, #6]
 80008b6:	4613      	mov	r3, r2
 80008b8:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80008ba:	797b      	ldrb	r3, [r7, #5]
 80008bc:	3307      	adds	r3, #7
 80008be:	2b00      	cmp	r3, #0
 80008c0:	da00      	bge.n	80008c4 <ssd1306_DrawBitmap+0x20>
 80008c2:	3307      	adds	r3, #7
 80008c4:	10db      	asrs	r3, r3, #3
 80008c6:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80008cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	db3e      	blt.n	8000952 <ssd1306_DrawBitmap+0xae>
 80008d4:	79bb      	ldrb	r3, [r7, #6]
 80008d6:	2b3f      	cmp	r3, #63	; 0x3f
 80008d8:	d83b      	bhi.n	8000952 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80008da:	2300      	movs	r3, #0
 80008dc:	73bb      	strb	r3, [r7, #14]
 80008de:	e033      	b.n	8000948 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80008e0:	2300      	movs	r3, #0
 80008e2:	737b      	strb	r3, [r7, #13]
 80008e4:	e026      	b.n	8000934 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80008e6:	7b7b      	ldrb	r3, [r7, #13]
 80008e8:	f003 0307 	and.w	r3, r3, #7
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d003      	beq.n	80008f8 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80008f0:	7bfb      	ldrb	r3, [r7, #15]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	73fb      	strb	r3, [r7, #15]
 80008f6:	e00d      	b.n	8000914 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80008f8:	7bbb      	ldrb	r3, [r7, #14]
 80008fa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80008fe:	fb02 f303 	mul.w	r3, r2, r3
 8000902:	7b7a      	ldrb	r2, [r7, #13]
 8000904:	08d2      	lsrs	r2, r2, #3
 8000906:	b2d2      	uxtb	r2, r2
 8000908:	4413      	add	r3, r2
 800090a:	461a      	mov	r2, r3
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	4413      	add	r3, r2
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8000914:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000918:	2b00      	cmp	r3, #0
 800091a:	da08      	bge.n	800092e <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 800091c:	79fa      	ldrb	r2, [r7, #7]
 800091e:	7b7b      	ldrb	r3, [r7, #13]
 8000920:	4413      	add	r3, r2
 8000922:	b2db      	uxtb	r3, r3
 8000924:	7f3a      	ldrb	r2, [r7, #28]
 8000926:	79b9      	ldrb	r1, [r7, #6]
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff ff69 	bl	8000800 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800092e:	7b7b      	ldrb	r3, [r7, #13]
 8000930:	3301      	adds	r3, #1
 8000932:	737b      	strb	r3, [r7, #13]
 8000934:	7b7a      	ldrb	r2, [r7, #13]
 8000936:	797b      	ldrb	r3, [r7, #5]
 8000938:	429a      	cmp	r2, r3
 800093a:	d3d4      	bcc.n	80008e6 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 800093c:	7bbb      	ldrb	r3, [r7, #14]
 800093e:	3301      	adds	r3, #1
 8000940:	73bb      	strb	r3, [r7, #14]
 8000942:	79bb      	ldrb	r3, [r7, #6]
 8000944:	3301      	adds	r3, #1
 8000946:	71bb      	strb	r3, [r7, #6]
 8000948:	7bba      	ldrb	r2, [r7, #14]
 800094a:	7e3b      	ldrb	r3, [r7, #24]
 800094c:	429a      	cmp	r2, r3
 800094e:	d3c7      	bcc.n	80008e0 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8000950:	e000      	b.n	8000954 <ssd1306_DrawBitmap+0xb0>
        return;
 8000952:	bf00      	nop
}
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 800095a:	b580      	push	{r7, lr}
 800095c:	b084      	sub	sp, #16
 800095e:	af00      	add	r7, sp, #0
 8000960:	4603      	mov	r3, r0
 8000962:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000964:	2381      	movs	r3, #129	; 0x81
 8000966:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fe62 	bl	8000634 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fe5e 	bl	8000634 <ssd1306_WriteCommand>
}
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d005      	beq.n	800099c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000990:	23af      	movs	r3, #175	; 0xaf
 8000992:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <ssd1306_SetDisplayOn+0x38>)
 8000996:	2201      	movs	r2, #1
 8000998:	715a      	strb	r2, [r3, #5]
 800099a:	e004      	b.n	80009a6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800099c:	23ae      	movs	r3, #174	; 0xae
 800099e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <ssd1306_SetDisplayOn+0x38>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fe43 	bl	8000634 <ssd1306_WriteCommand>
}
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200004f8 	.word	0x200004f8

080009bc <ssd1306_TestDrawBitmap>:
  ssd1306_UpdateScreen();
  return;
}

void ssd1306_TestDrawBitmap()
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af02      	add	r7, sp, #8

	for(int i = 0; i < 2; i++)
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	e017      	b.n	80009f8 <ssd1306_TestDrawBitmap+0x3c>
	{
		ssd1306_Fill(Black);
 80009c8:	2000      	movs	r0, #0
 80009ca:	f7ff fecf 	bl	800076c <ssd1306_Fill>
		ssd1306_DrawBitmap(0, 0, catGif[i], 128, 64, White);
 80009ce:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <ssd1306_TestDrawBitmap+0x4c>)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009d6:	2301      	movs	r3, #1
 80009d8:	9301      	str	r3, [sp, #4]
 80009da:	2340      	movs	r3, #64	; 0x40
 80009dc:	9300      	str	r3, [sp, #0]
 80009de:	2380      	movs	r3, #128	; 0x80
 80009e0:	2100      	movs	r1, #0
 80009e2:	2000      	movs	r0, #0
 80009e4:	f7ff ff5e 	bl	80008a4 <ssd1306_DrawBitmap>
		ssd1306_UpdateScreen();
 80009e8:	f7ff fee2 	bl	80007b0 <ssd1306_UpdateScreen>
		HAL_Delay(30);
 80009ec:	201e      	movs	r0, #30
 80009ee:	f000 f86f 	bl	8000ad0 <HAL_Delay>
	for(int i = 0; i < 2; i++)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3301      	adds	r3, #1
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	dde4      	ble.n	80009c8 <ssd1306_TestDrawBitmap+0xc>
	}
}
 80009fe:	bf00      	nop
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000004 	.word	0x20000004

08000a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <HAL_Init+0x28>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a07      	ldr	r2, [pc, #28]	; (8000a34 <HAL_Init+0x28>)
 8000a16:	f043 0310 	orr.w	r3, r3, #16
 8000a1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a1c:	2003      	movs	r0, #3
 8000a1e:	f000 fc33 	bl	8001288 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a22:	200f      	movs	r0, #15
 8000a24:	f000 f808 	bl	8000a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a28:	f7ff fcb6 	bl	8000398 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40022000 	.word	0x40022000

08000a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <HAL_InitTick+0x54>)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_InitTick+0x58>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 fc4b 	bl	80012f2 <HAL_SYSTICK_Config>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e00e      	b.n	8000a84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b0f      	cmp	r3, #15
 8000a6a:	d80a      	bhi.n	8000a82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	6879      	ldr	r1, [r7, #4]
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	f000 fc13 	bl	800129e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a78:	4a06      	ldr	r2, [pc, #24]	; (8000a94 <HAL_InitTick+0x5c>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e000      	b.n	8000a84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	20000010 	.word	0x20000010
 8000a94:	2000000c 	.word	0x2000000c

08000a98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <HAL_IncTick+0x1c>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <HAL_IncTick+0x20>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	4a03      	ldr	r2, [pc, #12]	; (8000ab8 <HAL_IncTick+0x20>)
 8000aaa:	6013      	str	r3, [r2, #0]
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	20000010 	.word	0x20000010
 8000ab8:	20000500 	.word	0x20000500

08000abc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac0:	4b02      	ldr	r3, [pc, #8]	; (8000acc <HAL_GetTick+0x10>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr
 8000acc:	20000500 	.word	0x20000500

08000ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad8:	f7ff fff0 	bl	8000abc <HAL_GetTick>
 8000adc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae8:	d005      	beq.n	8000af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aea:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <HAL_Delay+0x44>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	461a      	mov	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4413      	add	r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000af6:	bf00      	nop
 8000af8:	f7ff ffe0 	bl	8000abc <HAL_GetTick>
 8000afc:	4602      	mov	r2, r0
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d8f7      	bhi.n	8000af8 <HAL_Delay+0x28>
  {
  }
}
 8000b08:	bf00      	nop
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000010 	.word	0x20000010

08000b18 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b20:	2300      	movs	r3, #0
 8000b22:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b24:	2300      	movs	r3, #0
 8000b26:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d101      	bne.n	8000b3a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e0be      	b.n	8000cb8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d109      	bne.n	8000b5c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2200      	movs	r2, #0
 8000b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff fc50 	bl	80003fc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f000 fa7d 	bl	800105c <ADC_ConversionStop_Disable>
 8000b62:	4603      	mov	r3, r0
 8000b64:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b6a:	f003 0310 	and.w	r3, r3, #16
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f040 8099 	bne.w	8000ca6 <HAL_ADC_Init+0x18e>
 8000b74:	7dfb      	ldrb	r3, [r7, #23]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8095 	bne.w	8000ca6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b80:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b84:	f023 0302 	bic.w	r3, r3, #2
 8000b88:	f043 0202 	orr.w	r2, r3, #2
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b98:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	7b1b      	ldrb	r3, [r3, #12]
 8000b9e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ba0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bb0:	d003      	beq.n	8000bba <HAL_ADC_Init+0xa2>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d102      	bne.n	8000bc0 <HAL_ADC_Init+0xa8>
 8000bba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bbe:	e000      	b.n	8000bc2 <HAL_ADC_Init+0xaa>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	7d1b      	ldrb	r3, [r3, #20]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d119      	bne.n	8000c04 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	7b1b      	ldrb	r3, [r3, #12]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d109      	bne.n	8000bec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	035a      	lsls	r2, r3, #13
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	e00b      	b.n	8000c04 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf0:	f043 0220 	orr.w	r2, r3, #32
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bfc:	f043 0201 	orr.w	r2, r3, #1
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	430a      	orrs	r2, r1
 8000c16:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	689a      	ldr	r2, [r3, #8]
 8000c1e:	4b28      	ldr	r3, [pc, #160]	; (8000cc0 <HAL_ADC_Init+0x1a8>)
 8000c20:	4013      	ands	r3, r2
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	6812      	ldr	r2, [r2, #0]
 8000c26:	68b9      	ldr	r1, [r7, #8]
 8000c28:	430b      	orrs	r3, r1
 8000c2a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c34:	d003      	beq.n	8000c3e <HAL_ADC_Init+0x126>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d104      	bne.n	8000c48 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	691b      	ldr	r3, [r3, #16]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	051b      	lsls	r3, r3, #20
 8000c46:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c4e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <HAL_ADC_Init+0x1ac>)
 8000c64:	4013      	ands	r3, r2
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d10b      	bne.n	8000c84 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c76:	f023 0303 	bic.w	r3, r3, #3
 8000c7a:	f043 0201 	orr.w	r2, r3, #1
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c82:	e018      	b.n	8000cb6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c88:	f023 0312 	bic.w	r3, r3, #18
 8000c8c:	f043 0210 	orr.w	r2, r3, #16
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c98:	f043 0201 	orr.w	r2, r3, #1
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ca4:	e007      	b.n	8000cb6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000caa:	f043 0210 	orr.w	r2, r3, #16
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	ffe1f7fd 	.word	0xffe1f7fd
 8000cc4:	ff1f0efe 	.word	0xff1f0efe

08000cc8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	f003 0320 	and.w	r3, r3, #32
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d03e      	beq.n	8000d68 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f003 0302 	and.w	r3, r3, #2
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d039      	beq.n	8000d68 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf8:	f003 0310 	and.w	r3, r3, #16
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d105      	bne.n	8000d0c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d04:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d16:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d1a:	d11d      	bne.n	8000d58 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d119      	bne.n	8000d58 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f022 0220 	bic.w	r2, r2, #32
 8000d32:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d105      	bne.n	8000d58 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d50:	f043 0201 	orr.w	r2, r3, #1
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f000 f874 	bl	8000e46 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f06f 0212 	mvn.w	r2, #18
 8000d66:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d04d      	beq.n	8000e0e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	f003 0304 	and.w	r3, r3, #4
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d048      	beq.n	8000e0e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d80:	f003 0310 	and.w	r3, r3, #16
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d105      	bne.n	8000d94 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000d9e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000da2:	d012      	beq.n	8000dca <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d125      	bne.n	8000dfe <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000dbc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000dc0:	d11d      	bne.n	8000dfe <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d119      	bne.n	8000dfe <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	685a      	ldr	r2, [r3, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000dd8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d105      	bne.n	8000dfe <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df6:	f043 0201 	orr.w	r2, r3, #1
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f000 f96d 	bl	80010de <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f06f 020c 	mvn.w	r2, #12
 8000e0c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d012      	beq.n	8000e3e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d00d      	beq.n	8000e3e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f000 f812 	bl	8000e58 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f06f 0201 	mvn.w	r2, #1
 8000e3c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr

08000e58 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr
	...

08000e6c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d101      	bne.n	8000e8c <HAL_ADC_ConfigChannel+0x20>
 8000e88:	2302      	movs	r3, #2
 8000e8a:	e0dc      	b.n	8001046 <HAL_ADC_ConfigChannel+0x1da>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	2b06      	cmp	r3, #6
 8000e9a:	d81c      	bhi.n	8000ed6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	4413      	add	r3, r2
 8000eac:	3b05      	subs	r3, #5
 8000eae:	221f      	movs	r2, #31
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	4019      	ands	r1, r3
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	6818      	ldr	r0, [r3, #0]
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685a      	ldr	r2, [r3, #4]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	4413      	add	r3, r2
 8000ec6:	3b05      	subs	r3, #5
 8000ec8:	fa00 f203 	lsl.w	r2, r0, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	635a      	str	r2, [r3, #52]	; 0x34
 8000ed4:	e03c      	b.n	8000f50 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	2b0c      	cmp	r3, #12
 8000edc:	d81c      	bhi.n	8000f18 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685a      	ldr	r2, [r3, #4]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	3b23      	subs	r3, #35	; 0x23
 8000ef0:	221f      	movs	r2, #31
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	4019      	ands	r1, r3
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	6818      	ldr	r0, [r3, #0]
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	4613      	mov	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	4413      	add	r3, r2
 8000f08:	3b23      	subs	r3, #35	; 0x23
 8000f0a:	fa00 f203 	lsl.w	r2, r0, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	430a      	orrs	r2, r1
 8000f14:	631a      	str	r2, [r3, #48]	; 0x30
 8000f16:	e01b      	b.n	8000f50 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	4613      	mov	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4413      	add	r3, r2
 8000f28:	3b41      	subs	r3, #65	; 0x41
 8000f2a:	221f      	movs	r2, #31
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	4019      	ands	r1, r3
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	6818      	ldr	r0, [r3, #0]
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685a      	ldr	r2, [r3, #4]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	3b41      	subs	r3, #65	; 0x41
 8000f44:	fa00 f203 	lsl.w	r2, r0, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b09      	cmp	r3, #9
 8000f56:	d91c      	bls.n	8000f92 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	68d9      	ldr	r1, [r3, #12]
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	4613      	mov	r3, r2
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	4413      	add	r3, r2
 8000f68:	3b1e      	subs	r3, #30
 8000f6a:	2207      	movs	r2, #7
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	4019      	ands	r1, r3
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	6898      	ldr	r0, [r3, #8]
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	4413      	add	r3, r2
 8000f82:	3b1e      	subs	r3, #30
 8000f84:	fa00 f203 	lsl.w	r2, r0, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	60da      	str	r2, [r3, #12]
 8000f90:	e019      	b.n	8000fc6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	6919      	ldr	r1, [r3, #16]
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	4413      	add	r3, r2
 8000fa2:	2207      	movs	r2, #7
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	4019      	ands	r1, r3
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	6898      	ldr	r0, [r3, #8]
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	4413      	add	r3, r2
 8000fba:	fa00 f203 	lsl.w	r2, r0, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b10      	cmp	r3, #16
 8000fcc:	d003      	beq.n	8000fd6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000fd2:	2b11      	cmp	r3, #17
 8000fd4:	d132      	bne.n	800103c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a1d      	ldr	r2, [pc, #116]	; (8001050 <HAL_ADC_ConfigChannel+0x1e4>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d125      	bne.n	800102c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d126      	bne.n	800103c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000ffc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b10      	cmp	r3, #16
 8001004:	d11a      	bne.n	800103c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001006:	4b13      	ldr	r3, [pc, #76]	; (8001054 <HAL_ADC_ConfigChannel+0x1e8>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a13      	ldr	r2, [pc, #76]	; (8001058 <HAL_ADC_ConfigChannel+0x1ec>)
 800100c:	fba2 2303 	umull	r2, r3, r2, r3
 8001010:	0c9a      	lsrs	r2, r3, #18
 8001012:	4613      	mov	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800101c:	e002      	b.n	8001024 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	3b01      	subs	r3, #1
 8001022:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d1f9      	bne.n	800101e <HAL_ADC_ConfigChannel+0x1b2>
 800102a:	e007      	b.n	800103c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001030:	f043 0220 	orr.w	r2, r3, #32
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001044:	7bfb      	ldrb	r3, [r7, #15]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	40012400 	.word	0x40012400
 8001054:	20000000 	.word	0x20000000
 8001058:	431bde83 	.word	0x431bde83

0800105c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	2b01      	cmp	r3, #1
 8001074:	d12e      	bne.n	80010d4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 0201 	bic.w	r2, r2, #1
 8001084:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001086:	f7ff fd19 	bl	8000abc <HAL_GetTick>
 800108a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800108c:	e01b      	b.n	80010c6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800108e:	f7ff fd15 	bl	8000abc <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d914      	bls.n	80010c6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d10d      	bne.n	80010c6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ae:	f043 0210 	orr.w	r2, r3, #16
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ba:	f043 0201 	orr.w	r2, r3, #1
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e007      	b.n	80010d6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d0dc      	beq.n	800108e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr

080010f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800110c:	4013      	ands	r3, r2
 800110e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001118:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800111c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001122:	4a04      	ldr	r2, [pc, #16]	; (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	60d3      	str	r3, [r2, #12]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <__NVIC_GetPriorityGrouping+0x18>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	0a1b      	lsrs	r3, r3, #8
 8001142:	f003 0307 	and.w	r3, r3, #7
}
 8001146:	4618      	mov	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	2b00      	cmp	r3, #0
 8001164:	db0b      	blt.n	800117e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	f003 021f 	and.w	r2, r3, #31
 800116c:	4906      	ldr	r1, [pc, #24]	; (8001188 <__NVIC_EnableIRQ+0x34>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	095b      	lsrs	r3, r3, #5
 8001174:	2001      	movs	r0, #1
 8001176:	fa00 f202 	lsl.w	r2, r0, r2
 800117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	e000e100 	.word	0xe000e100

0800118c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	2b00      	cmp	r3, #0
 800119e:	db0a      	blt.n	80011b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	490c      	ldr	r1, [pc, #48]	; (80011d8 <__NVIC_SetPriority+0x4c>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	0112      	lsls	r2, r2, #4
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	440b      	add	r3, r1
 80011b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b4:	e00a      	b.n	80011cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4908      	ldr	r1, [pc, #32]	; (80011dc <__NVIC_SetPriority+0x50>)
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	3b04      	subs	r3, #4
 80011c4:	0112      	lsls	r2, r2, #4
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	440b      	add	r3, r1
 80011ca:	761a      	strb	r2, [r3, #24]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000e100 	.word	0xe000e100
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	; 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f1c3 0307 	rsb	r3, r3, #7
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	bf28      	it	cs
 80011fe:	2304      	movcs	r3, #4
 8001200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3304      	adds	r3, #4
 8001206:	2b06      	cmp	r3, #6
 8001208:	d902      	bls.n	8001210 <NVIC_EncodePriority+0x30>
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3b03      	subs	r3, #3
 800120e:	e000      	b.n	8001212 <NVIC_EncodePriority+0x32>
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	f04f 32ff 	mov.w	r2, #4294967295
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43da      	mvns	r2, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	401a      	ands	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001228:	f04f 31ff 	mov.w	r1, #4294967295
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	43d9      	mvns	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	4313      	orrs	r3, r2
         );
}
 800123a:	4618      	mov	r0, r3
 800123c:	3724      	adds	r7, #36	; 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr

08001244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3b01      	subs	r3, #1
 8001250:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001254:	d301      	bcc.n	800125a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001256:	2301      	movs	r3, #1
 8001258:	e00f      	b.n	800127a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125a:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <SysTick_Config+0x40>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001262:	210f      	movs	r1, #15
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f7ff ff90 	bl	800118c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <SysTick_Config+0x40>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001272:	4b04      	ldr	r3, [pc, #16]	; (8001284 <SysTick_Config+0x40>)
 8001274:	2207      	movs	r2, #7
 8001276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	e000e010 	.word	0xe000e010

08001288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ff2d 	bl	80010f0 <__NVIC_SetPriorityGrouping>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800129e:	b580      	push	{r7, lr}
 80012a0:	b086      	sub	sp, #24
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b0:	f7ff ff42 	bl	8001138 <__NVIC_GetPriorityGrouping>
 80012b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	68b9      	ldr	r1, [r7, #8]
 80012ba:	6978      	ldr	r0, [r7, #20]
 80012bc:	f7ff ff90 	bl	80011e0 <NVIC_EncodePriority>
 80012c0:	4602      	mov	r2, r0
 80012c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff5f 	bl	800118c <__NVIC_SetPriority>
}
 80012ce:	bf00      	nop
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff35 	bl	8001154 <__NVIC_EnableIRQ>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ffa2 	bl	8001244 <SysTick_Config>
 8001300:	4603      	mov	r3, r0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e043      	b.n	80013aa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <HAL_DMA_Init+0xa8>)
 800132a:	4413      	add	r3, r2
 800132c:	4a22      	ldr	r2, [pc, #136]	; (80013b8 <HAL_DMA_Init+0xac>)
 800132e:	fba2 2303 	umull	r2, r3, r2, r3
 8001332:	091b      	lsrs	r3, r3, #4
 8001334:	009a      	lsls	r2, r3, #2
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a1f      	ldr	r2, [pc, #124]	; (80013bc <HAL_DMA_Init+0xb0>)
 800133e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2202      	movs	r2, #2
 8001344:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001356:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800135a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001364:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001370:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800137c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	4313      	orrs	r3, r2
 8001388:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2201      	movs	r2, #1
 800139c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	bffdfff8 	.word	0xbffdfff8
 80013b8:	cccccccd 	.word	0xcccccccd
 80013bc:	40020000 	.word	0x40020000

080013c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	2204      	movs	r2, #4
 80013de:	409a      	lsls	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d04f      	beq.n	8001488 <HAL_DMA_IRQHandler+0xc8>
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d04a      	beq.n	8001488 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0320 	and.w	r3, r3, #32
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d107      	bne.n	8001410 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 0204 	bic.w	r2, r2, #4
 800140e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a66      	ldr	r2, [pc, #408]	; (80015b0 <HAL_DMA_IRQHandler+0x1f0>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d029      	beq.n	800146e <HAL_DMA_IRQHandler+0xae>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a65      	ldr	r2, [pc, #404]	; (80015b4 <HAL_DMA_IRQHandler+0x1f4>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d022      	beq.n	800146a <HAL_DMA_IRQHandler+0xaa>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a63      	ldr	r2, [pc, #396]	; (80015b8 <HAL_DMA_IRQHandler+0x1f8>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d01a      	beq.n	8001464 <HAL_DMA_IRQHandler+0xa4>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a62      	ldr	r2, [pc, #392]	; (80015bc <HAL_DMA_IRQHandler+0x1fc>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d012      	beq.n	800145e <HAL_DMA_IRQHandler+0x9e>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a60      	ldr	r2, [pc, #384]	; (80015c0 <HAL_DMA_IRQHandler+0x200>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d00a      	beq.n	8001458 <HAL_DMA_IRQHandler+0x98>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a5f      	ldr	r2, [pc, #380]	; (80015c4 <HAL_DMA_IRQHandler+0x204>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d102      	bne.n	8001452 <HAL_DMA_IRQHandler+0x92>
 800144c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001450:	e00e      	b.n	8001470 <HAL_DMA_IRQHandler+0xb0>
 8001452:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001456:	e00b      	b.n	8001470 <HAL_DMA_IRQHandler+0xb0>
 8001458:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800145c:	e008      	b.n	8001470 <HAL_DMA_IRQHandler+0xb0>
 800145e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001462:	e005      	b.n	8001470 <HAL_DMA_IRQHandler+0xb0>
 8001464:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001468:	e002      	b.n	8001470 <HAL_DMA_IRQHandler+0xb0>
 800146a:	2340      	movs	r3, #64	; 0x40
 800146c:	e000      	b.n	8001470 <HAL_DMA_IRQHandler+0xb0>
 800146e:	2304      	movs	r3, #4
 8001470:	4a55      	ldr	r2, [pc, #340]	; (80015c8 <HAL_DMA_IRQHandler+0x208>)
 8001472:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001478:	2b00      	cmp	r3, #0
 800147a:	f000 8094 	beq.w	80015a6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001486:	e08e      	b.n	80015a6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	2202      	movs	r2, #2
 800148e:	409a      	lsls	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4013      	ands	r3, r2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d056      	beq.n	8001546 <HAL_DMA_IRQHandler+0x186>
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d051      	beq.n	8001546 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0320 	and.w	r3, r3, #32
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10b      	bne.n	80014c8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 020a 	bic.w	r2, r2, #10
 80014be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a38      	ldr	r2, [pc, #224]	; (80015b0 <HAL_DMA_IRQHandler+0x1f0>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d029      	beq.n	8001526 <HAL_DMA_IRQHandler+0x166>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a37      	ldr	r2, [pc, #220]	; (80015b4 <HAL_DMA_IRQHandler+0x1f4>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d022      	beq.n	8001522 <HAL_DMA_IRQHandler+0x162>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a35      	ldr	r2, [pc, #212]	; (80015b8 <HAL_DMA_IRQHandler+0x1f8>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d01a      	beq.n	800151c <HAL_DMA_IRQHandler+0x15c>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a34      	ldr	r2, [pc, #208]	; (80015bc <HAL_DMA_IRQHandler+0x1fc>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d012      	beq.n	8001516 <HAL_DMA_IRQHandler+0x156>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a32      	ldr	r2, [pc, #200]	; (80015c0 <HAL_DMA_IRQHandler+0x200>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d00a      	beq.n	8001510 <HAL_DMA_IRQHandler+0x150>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a31      	ldr	r2, [pc, #196]	; (80015c4 <HAL_DMA_IRQHandler+0x204>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d102      	bne.n	800150a <HAL_DMA_IRQHandler+0x14a>
 8001504:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001508:	e00e      	b.n	8001528 <HAL_DMA_IRQHandler+0x168>
 800150a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800150e:	e00b      	b.n	8001528 <HAL_DMA_IRQHandler+0x168>
 8001510:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001514:	e008      	b.n	8001528 <HAL_DMA_IRQHandler+0x168>
 8001516:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800151a:	e005      	b.n	8001528 <HAL_DMA_IRQHandler+0x168>
 800151c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001520:	e002      	b.n	8001528 <HAL_DMA_IRQHandler+0x168>
 8001522:	2320      	movs	r3, #32
 8001524:	e000      	b.n	8001528 <HAL_DMA_IRQHandler+0x168>
 8001526:	2302      	movs	r3, #2
 8001528:	4a27      	ldr	r2, [pc, #156]	; (80015c8 <HAL_DMA_IRQHandler+0x208>)
 800152a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001538:	2b00      	cmp	r3, #0
 800153a:	d034      	beq.n	80015a6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001544:	e02f      	b.n	80015a6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	2208      	movs	r2, #8
 800154c:	409a      	lsls	r2, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	4013      	ands	r3, r2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d028      	beq.n	80015a8 <HAL_DMA_IRQHandler+0x1e8>
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	f003 0308 	and.w	r3, r3, #8
 800155c:	2b00      	cmp	r3, #0
 800155e:	d023      	beq.n	80015a8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 020e 	bic.w	r2, r2, #14
 800156e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001578:	2101      	movs	r1, #1
 800157a:	fa01 f202 	lsl.w	r2, r1, r2
 800157e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	2b00      	cmp	r3, #0
 800159c:	d004      	beq.n	80015a8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	4798      	blx	r3
    }
  }
  return;
 80015a6:	bf00      	nop
 80015a8:	bf00      	nop
}
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40020008 	.word	0x40020008
 80015b4:	4002001c 	.word	0x4002001c
 80015b8:	40020030 	.word	0x40020030
 80015bc:	40020044 	.word	0x40020044
 80015c0:	40020058 	.word	0x40020058
 80015c4:	4002006c 	.word	0x4002006c
 80015c8:	40020000 	.word	0x40020000

080015cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b08b      	sub	sp, #44	; 0x2c
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015da:	2300      	movs	r3, #0
 80015dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015de:	e169      	b.n	80018b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015e0:	2201      	movs	r2, #1
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	69fa      	ldr	r2, [r7, #28]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	f040 8158 	bne.w	80018ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	4a9a      	ldr	r2, [pc, #616]	; (800186c <HAL_GPIO_Init+0x2a0>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d05e      	beq.n	80016c6 <HAL_GPIO_Init+0xfa>
 8001608:	4a98      	ldr	r2, [pc, #608]	; (800186c <HAL_GPIO_Init+0x2a0>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d875      	bhi.n	80016fa <HAL_GPIO_Init+0x12e>
 800160e:	4a98      	ldr	r2, [pc, #608]	; (8001870 <HAL_GPIO_Init+0x2a4>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d058      	beq.n	80016c6 <HAL_GPIO_Init+0xfa>
 8001614:	4a96      	ldr	r2, [pc, #600]	; (8001870 <HAL_GPIO_Init+0x2a4>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d86f      	bhi.n	80016fa <HAL_GPIO_Init+0x12e>
 800161a:	4a96      	ldr	r2, [pc, #600]	; (8001874 <HAL_GPIO_Init+0x2a8>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d052      	beq.n	80016c6 <HAL_GPIO_Init+0xfa>
 8001620:	4a94      	ldr	r2, [pc, #592]	; (8001874 <HAL_GPIO_Init+0x2a8>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d869      	bhi.n	80016fa <HAL_GPIO_Init+0x12e>
 8001626:	4a94      	ldr	r2, [pc, #592]	; (8001878 <HAL_GPIO_Init+0x2ac>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d04c      	beq.n	80016c6 <HAL_GPIO_Init+0xfa>
 800162c:	4a92      	ldr	r2, [pc, #584]	; (8001878 <HAL_GPIO_Init+0x2ac>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d863      	bhi.n	80016fa <HAL_GPIO_Init+0x12e>
 8001632:	4a92      	ldr	r2, [pc, #584]	; (800187c <HAL_GPIO_Init+0x2b0>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d046      	beq.n	80016c6 <HAL_GPIO_Init+0xfa>
 8001638:	4a90      	ldr	r2, [pc, #576]	; (800187c <HAL_GPIO_Init+0x2b0>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d85d      	bhi.n	80016fa <HAL_GPIO_Init+0x12e>
 800163e:	2b12      	cmp	r3, #18
 8001640:	d82a      	bhi.n	8001698 <HAL_GPIO_Init+0xcc>
 8001642:	2b12      	cmp	r3, #18
 8001644:	d859      	bhi.n	80016fa <HAL_GPIO_Init+0x12e>
 8001646:	a201      	add	r2, pc, #4	; (adr r2, 800164c <HAL_GPIO_Init+0x80>)
 8001648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800164c:	080016c7 	.word	0x080016c7
 8001650:	080016a1 	.word	0x080016a1
 8001654:	080016b3 	.word	0x080016b3
 8001658:	080016f5 	.word	0x080016f5
 800165c:	080016fb 	.word	0x080016fb
 8001660:	080016fb 	.word	0x080016fb
 8001664:	080016fb 	.word	0x080016fb
 8001668:	080016fb 	.word	0x080016fb
 800166c:	080016fb 	.word	0x080016fb
 8001670:	080016fb 	.word	0x080016fb
 8001674:	080016fb 	.word	0x080016fb
 8001678:	080016fb 	.word	0x080016fb
 800167c:	080016fb 	.word	0x080016fb
 8001680:	080016fb 	.word	0x080016fb
 8001684:	080016fb 	.word	0x080016fb
 8001688:	080016fb 	.word	0x080016fb
 800168c:	080016fb 	.word	0x080016fb
 8001690:	080016a9 	.word	0x080016a9
 8001694:	080016bd 	.word	0x080016bd
 8001698:	4a79      	ldr	r2, [pc, #484]	; (8001880 <HAL_GPIO_Init+0x2b4>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d013      	beq.n	80016c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800169e:	e02c      	b.n	80016fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	623b      	str	r3, [r7, #32]
          break;
 80016a6:	e029      	b.n	80016fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	3304      	adds	r3, #4
 80016ae:	623b      	str	r3, [r7, #32]
          break;
 80016b0:	e024      	b.n	80016fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	3308      	adds	r3, #8
 80016b8:	623b      	str	r3, [r7, #32]
          break;
 80016ba:	e01f      	b.n	80016fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	330c      	adds	r3, #12
 80016c2:	623b      	str	r3, [r7, #32]
          break;
 80016c4:	e01a      	b.n	80016fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d102      	bne.n	80016d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016ce:	2304      	movs	r3, #4
 80016d0:	623b      	str	r3, [r7, #32]
          break;
 80016d2:	e013      	b.n	80016fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d105      	bne.n	80016e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016dc:	2308      	movs	r3, #8
 80016de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69fa      	ldr	r2, [r7, #28]
 80016e4:	611a      	str	r2, [r3, #16]
          break;
 80016e6:	e009      	b.n	80016fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016e8:	2308      	movs	r3, #8
 80016ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69fa      	ldr	r2, [r7, #28]
 80016f0:	615a      	str	r2, [r3, #20]
          break;
 80016f2:	e003      	b.n	80016fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
          break;
 80016f8:	e000      	b.n	80016fc <HAL_GPIO_Init+0x130>
          break;
 80016fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	2bff      	cmp	r3, #255	; 0xff
 8001700:	d801      	bhi.n	8001706 <HAL_GPIO_Init+0x13a>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	e001      	b.n	800170a <HAL_GPIO_Init+0x13e>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3304      	adds	r3, #4
 800170a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	2bff      	cmp	r3, #255	; 0xff
 8001710:	d802      	bhi.n	8001718 <HAL_GPIO_Init+0x14c>
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	e002      	b.n	800171e <HAL_GPIO_Init+0x152>
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	3b08      	subs	r3, #8
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	210f      	movs	r1, #15
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	fa01 f303 	lsl.w	r3, r1, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	401a      	ands	r2, r3
 8001730:	6a39      	ldr	r1, [r7, #32]
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	fa01 f303 	lsl.w	r3, r1, r3
 8001738:	431a      	orrs	r2, r3
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 80b1 	beq.w	80018ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800174c:	4b4d      	ldr	r3, [pc, #308]	; (8001884 <HAL_GPIO_Init+0x2b8>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	4a4c      	ldr	r2, [pc, #304]	; (8001884 <HAL_GPIO_Init+0x2b8>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6193      	str	r3, [r2, #24]
 8001758:	4b4a      	ldr	r3, [pc, #296]	; (8001884 <HAL_GPIO_Init+0x2b8>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001764:	4a48      	ldr	r2, [pc, #288]	; (8001888 <HAL_GPIO_Init+0x2bc>)
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	089b      	lsrs	r3, r3, #2
 800176a:	3302      	adds	r3, #2
 800176c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001770:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	220f      	movs	r2, #15
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	4013      	ands	r3, r2
 8001786:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a40      	ldr	r2, [pc, #256]	; (800188c <HAL_GPIO_Init+0x2c0>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d013      	beq.n	80017b8 <HAL_GPIO_Init+0x1ec>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a3f      	ldr	r2, [pc, #252]	; (8001890 <HAL_GPIO_Init+0x2c4>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d00d      	beq.n	80017b4 <HAL_GPIO_Init+0x1e8>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a3e      	ldr	r2, [pc, #248]	; (8001894 <HAL_GPIO_Init+0x2c8>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d007      	beq.n	80017b0 <HAL_GPIO_Init+0x1e4>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a3d      	ldr	r2, [pc, #244]	; (8001898 <HAL_GPIO_Init+0x2cc>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d101      	bne.n	80017ac <HAL_GPIO_Init+0x1e0>
 80017a8:	2303      	movs	r3, #3
 80017aa:	e006      	b.n	80017ba <HAL_GPIO_Init+0x1ee>
 80017ac:	2304      	movs	r3, #4
 80017ae:	e004      	b.n	80017ba <HAL_GPIO_Init+0x1ee>
 80017b0:	2302      	movs	r3, #2
 80017b2:	e002      	b.n	80017ba <HAL_GPIO_Init+0x1ee>
 80017b4:	2301      	movs	r3, #1
 80017b6:	e000      	b.n	80017ba <HAL_GPIO_Init+0x1ee>
 80017b8:	2300      	movs	r3, #0
 80017ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017bc:	f002 0203 	and.w	r2, r2, #3
 80017c0:	0092      	lsls	r2, r2, #2
 80017c2:	4093      	lsls	r3, r2
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017ca:	492f      	ldr	r1, [pc, #188]	; (8001888 <HAL_GPIO_Init+0x2bc>)
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	089b      	lsrs	r3, r3, #2
 80017d0:	3302      	adds	r3, #2
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d006      	beq.n	80017f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017e4:	4b2d      	ldr	r3, [pc, #180]	; (800189c <HAL_GPIO_Init+0x2d0>)
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	492c      	ldr	r1, [pc, #176]	; (800189c <HAL_GPIO_Init+0x2d0>)
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	608b      	str	r3, [r1, #8]
 80017f0:	e006      	b.n	8001800 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017f2:	4b2a      	ldr	r3, [pc, #168]	; (800189c <HAL_GPIO_Init+0x2d0>)
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	4928      	ldr	r1, [pc, #160]	; (800189c <HAL_GPIO_Init+0x2d0>)
 80017fc:	4013      	ands	r3, r2
 80017fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d006      	beq.n	800181a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800180c:	4b23      	ldr	r3, [pc, #140]	; (800189c <HAL_GPIO_Init+0x2d0>)
 800180e:	68da      	ldr	r2, [r3, #12]
 8001810:	4922      	ldr	r1, [pc, #136]	; (800189c <HAL_GPIO_Init+0x2d0>)
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	4313      	orrs	r3, r2
 8001816:	60cb      	str	r3, [r1, #12]
 8001818:	e006      	b.n	8001828 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800181a:	4b20      	ldr	r3, [pc, #128]	; (800189c <HAL_GPIO_Init+0x2d0>)
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	43db      	mvns	r3, r3
 8001822:	491e      	ldr	r1, [pc, #120]	; (800189c <HAL_GPIO_Init+0x2d0>)
 8001824:	4013      	ands	r3, r2
 8001826:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d006      	beq.n	8001842 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001834:	4b19      	ldr	r3, [pc, #100]	; (800189c <HAL_GPIO_Init+0x2d0>)
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	4918      	ldr	r1, [pc, #96]	; (800189c <HAL_GPIO_Init+0x2d0>)
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
 8001840:	e006      	b.n	8001850 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001842:	4b16      	ldr	r3, [pc, #88]	; (800189c <HAL_GPIO_Init+0x2d0>)
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	43db      	mvns	r3, r3
 800184a:	4914      	ldr	r1, [pc, #80]	; (800189c <HAL_GPIO_Init+0x2d0>)
 800184c:	4013      	ands	r3, r2
 800184e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d021      	beq.n	80018a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <HAL_GPIO_Init+0x2d0>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	490e      	ldr	r1, [pc, #56]	; (800189c <HAL_GPIO_Init+0x2d0>)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	4313      	orrs	r3, r2
 8001866:	600b      	str	r3, [r1, #0]
 8001868:	e021      	b.n	80018ae <HAL_GPIO_Init+0x2e2>
 800186a:	bf00      	nop
 800186c:	10320000 	.word	0x10320000
 8001870:	10310000 	.word	0x10310000
 8001874:	10220000 	.word	0x10220000
 8001878:	10210000 	.word	0x10210000
 800187c:	10120000 	.word	0x10120000
 8001880:	10110000 	.word	0x10110000
 8001884:	40021000 	.word	0x40021000
 8001888:	40010000 	.word	0x40010000
 800188c:	40010800 	.word	0x40010800
 8001890:	40010c00 	.word	0x40010c00
 8001894:	40011000 	.word	0x40011000
 8001898:	40011400 	.word	0x40011400
 800189c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <HAL_GPIO_Init+0x304>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	4909      	ldr	r1, [pc, #36]	; (80018d0 <HAL_GPIO_Init+0x304>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	3301      	adds	r3, #1
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	fa22 f303 	lsr.w	r3, r2, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f47f ae8e 	bne.w	80015e0 <HAL_GPIO_Init+0x14>
  }
}
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop
 80018c8:	372c      	adds	r7, #44	; 0x2c
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	40010400 	.word	0x40010400

080018d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e12b      	b.n	8001b3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d106      	bne.n	8001900 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7fe fdee 	bl	80004dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2224      	movs	r2, #36	; 0x24
 8001904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 0201 	bic.w	r2, r2, #1
 8001916:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001926:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001936:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001938:	f001 f842 	bl	80029c0 <HAL_RCC_GetPCLK1Freq>
 800193c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4a81      	ldr	r2, [pc, #516]	; (8001b48 <HAL_I2C_Init+0x274>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d807      	bhi.n	8001958 <HAL_I2C_Init+0x84>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4a80      	ldr	r2, [pc, #512]	; (8001b4c <HAL_I2C_Init+0x278>)
 800194c:	4293      	cmp	r3, r2
 800194e:	bf94      	ite	ls
 8001950:	2301      	movls	r3, #1
 8001952:	2300      	movhi	r3, #0
 8001954:	b2db      	uxtb	r3, r3
 8001956:	e006      	b.n	8001966 <HAL_I2C_Init+0x92>
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4a7d      	ldr	r2, [pc, #500]	; (8001b50 <HAL_I2C_Init+0x27c>)
 800195c:	4293      	cmp	r3, r2
 800195e:	bf94      	ite	ls
 8001960:	2301      	movls	r3, #1
 8001962:	2300      	movhi	r3, #0
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e0e7      	b.n	8001b3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	4a78      	ldr	r2, [pc, #480]	; (8001b54 <HAL_I2C_Init+0x280>)
 8001972:	fba2 2303 	umull	r2, r3, r2, r3
 8001976:	0c9b      	lsrs	r3, r3, #18
 8001978:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68ba      	ldr	r2, [r7, #8]
 800198a:	430a      	orrs	r2, r1
 800198c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	4a6a      	ldr	r2, [pc, #424]	; (8001b48 <HAL_I2C_Init+0x274>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d802      	bhi.n	80019a8 <HAL_I2C_Init+0xd4>
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	3301      	adds	r3, #1
 80019a6:	e009      	b.n	80019bc <HAL_I2C_Init+0xe8>
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019ae:	fb02 f303 	mul.w	r3, r2, r3
 80019b2:	4a69      	ldr	r2, [pc, #420]	; (8001b58 <HAL_I2C_Init+0x284>)
 80019b4:	fba2 2303 	umull	r2, r3, r2, r3
 80019b8:	099b      	lsrs	r3, r3, #6
 80019ba:	3301      	adds	r3, #1
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	430b      	orrs	r3, r1
 80019c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80019ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	495c      	ldr	r1, [pc, #368]	; (8001b48 <HAL_I2C_Init+0x274>)
 80019d8:	428b      	cmp	r3, r1
 80019da:	d819      	bhi.n	8001a10 <HAL_I2C_Init+0x13c>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	1e59      	subs	r1, r3, #1
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80019ea:	1c59      	adds	r1, r3, #1
 80019ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80019f0:	400b      	ands	r3, r1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00a      	beq.n	8001a0c <HAL_I2C_Init+0x138>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	1e59      	subs	r1, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a04:	3301      	adds	r3, #1
 8001a06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a0a:	e051      	b.n	8001ab0 <HAL_I2C_Init+0x1dc>
 8001a0c:	2304      	movs	r3, #4
 8001a0e:	e04f      	b.n	8001ab0 <HAL_I2C_Init+0x1dc>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d111      	bne.n	8001a3c <HAL_I2C_Init+0x168>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	1e58      	subs	r0, r3, #1
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6859      	ldr	r1, [r3, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	440b      	add	r3, r1
 8001a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	bf0c      	ite	eq
 8001a34:	2301      	moveq	r3, #1
 8001a36:	2300      	movne	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	e012      	b.n	8001a62 <HAL_I2C_Init+0x18e>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	1e58      	subs	r0, r3, #1
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6859      	ldr	r1, [r3, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	0099      	lsls	r1, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a52:	3301      	adds	r3, #1
 8001a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	bf0c      	ite	eq
 8001a5c:	2301      	moveq	r3, #1
 8001a5e:	2300      	movne	r3, #0
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_I2C_Init+0x196>
 8001a66:	2301      	movs	r3, #1
 8001a68:	e022      	b.n	8001ab0 <HAL_I2C_Init+0x1dc>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10e      	bne.n	8001a90 <HAL_I2C_Init+0x1bc>
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	1e58      	subs	r0, r3, #1
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6859      	ldr	r1, [r3, #4]
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	440b      	add	r3, r1
 8001a80:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a84:	3301      	adds	r3, #1
 8001a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a8e:	e00f      	b.n	8001ab0 <HAL_I2C_Init+0x1dc>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	1e58      	subs	r0, r3, #1
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6859      	ldr	r1, [r3, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	0099      	lsls	r1, r3, #2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	6809      	ldr	r1, [r1, #0]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69da      	ldr	r2, [r3, #28]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ade:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6911      	ldr	r1, [r2, #16]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	68d2      	ldr	r2, [r2, #12]
 8001aea:	4311      	orrs	r1, r2
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	430b      	orrs	r3, r1
 8001af2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695a      	ldr	r2, [r3, #20]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0201 	orr.w	r2, r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2220      	movs	r2, #32
 8001b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	000186a0 	.word	0x000186a0
 8001b4c:	001e847f 	.word	0x001e847f
 8001b50:	003d08ff 	.word	0x003d08ff
 8001b54:	431bde83 	.word	0x431bde83
 8001b58:	10624dd3 	.word	0x10624dd3

08001b5c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af02      	add	r7, sp, #8
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	4608      	mov	r0, r1
 8001b66:	4611      	mov	r1, r2
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	817b      	strh	r3, [r7, #10]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	813b      	strh	r3, [r7, #8]
 8001b72:	4613      	mov	r3, r2
 8001b74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b76:	f7fe ffa1 	bl	8000abc <HAL_GetTick>
 8001b7a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b20      	cmp	r3, #32
 8001b86:	f040 80d9 	bne.w	8001d3c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	2319      	movs	r3, #25
 8001b90:	2201      	movs	r2, #1
 8001b92:	496d      	ldr	r1, [pc, #436]	; (8001d48 <HAL_I2C_Mem_Write+0x1ec>)
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f000 f971 	bl	8001e7c <I2C_WaitOnFlagUntilTimeout>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e0cc      	b.n	8001d3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d101      	bne.n	8001bb2 <HAL_I2C_Mem_Write+0x56>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e0c5      	b.n	8001d3e <HAL_I2C_Mem_Write+0x1e2>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d007      	beq.n	8001bd8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0201 	orr.w	r2, r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001be6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2221      	movs	r2, #33	; 0x21
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2240      	movs	r2, #64	; 0x40
 8001bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6a3a      	ldr	r2, [r7, #32]
 8001c02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4a4d      	ldr	r2, [pc, #308]	; (8001d4c <HAL_I2C_Mem_Write+0x1f0>)
 8001c18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c1a:	88f8      	ldrh	r0, [r7, #6]
 8001c1c:	893a      	ldrh	r2, [r7, #8]
 8001c1e:	8979      	ldrh	r1, [r7, #10]
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	9301      	str	r3, [sp, #4]
 8001c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	4603      	mov	r3, r0
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f000 f890 	bl	8001d50 <I2C_RequestMemoryWrite>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d052      	beq.n	8001cdc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e081      	b.n	8001d3e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 fa36 	bl	80020b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00d      	beq.n	8001c66 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d107      	bne.n	8001c62 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e06b      	b.n	8001d3e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	781a      	ldrb	r2, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c80:	3b01      	subs	r3, #1
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	d11b      	bne.n	8001cdc <HAL_I2C_Mem_Write+0x180>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d017      	beq.n	8001cdc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb0:	781a      	ldrb	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1aa      	bne.n	8001c3a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f000 fa29 	bl	8002140 <I2C_WaitOnBTFFlagUntilTimeout>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00d      	beq.n	8001d10 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d107      	bne.n	8001d0c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d0a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e016      	b.n	8001d3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2220      	movs	r2, #32
 8001d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	e000      	b.n	8001d3e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001d3c:	2302      	movs	r3, #2
  }
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	00100002 	.word	0x00100002
 8001d4c:	ffff0000 	.word	0xffff0000

08001d50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af02      	add	r7, sp, #8
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	4608      	mov	r0, r1
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4603      	mov	r3, r0
 8001d60:	817b      	strh	r3, [r7, #10]
 8001d62:	460b      	mov	r3, r1
 8001d64:	813b      	strh	r3, [r7, #8]
 8001d66:	4613      	mov	r3, r2
 8001d68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f000 f878 	bl	8001e7c <I2C_WaitOnFlagUntilTimeout>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00d      	beq.n	8001dae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001da0:	d103      	bne.n	8001daa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e05f      	b.n	8001e6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dae:	897b      	ldrh	r3, [r7, #10]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	461a      	mov	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001dbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	6a3a      	ldr	r2, [r7, #32]
 8001dc2:	492d      	ldr	r1, [pc, #180]	; (8001e78 <I2C_RequestMemoryWrite+0x128>)
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 f8d3 	bl	8001f70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e04c      	b.n	8001e6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dec:	6a39      	ldr	r1, [r7, #32]
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 f95e 	bl	80020b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00d      	beq.n	8001e16 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d107      	bne.n	8001e12 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e02b      	b.n	8001e6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d105      	bne.n	8001e28 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e1c:	893b      	ldrh	r3, [r7, #8]
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	611a      	str	r2, [r3, #16]
 8001e26:	e021      	b.n	8001e6c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e28:	893b      	ldrh	r3, [r7, #8]
 8001e2a:	0a1b      	lsrs	r3, r3, #8
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e38:	6a39      	ldr	r1, [r7, #32]
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f000 f938 	bl	80020b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00d      	beq.n	8001e62 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	d107      	bne.n	8001e5e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e005      	b.n	8001e6e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e62:	893b      	ldrh	r3, [r7, #8]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	00010002 	.word	0x00010002

08001e7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	603b      	str	r3, [r7, #0]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e8c:	e048      	b.n	8001f20 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e94:	d044      	beq.n	8001f20 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e96:	f7fe fe11 	bl	8000abc <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d302      	bcc.n	8001eac <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d139      	bne.n	8001f20 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	0c1b      	lsrs	r3, r3, #16
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d10d      	bne.n	8001ed2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	43da      	mvns	r2, r3
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	bf0c      	ite	eq
 8001ec8:	2301      	moveq	r3, #1
 8001eca:	2300      	movne	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	461a      	mov	r2, r3
 8001ed0:	e00c      	b.n	8001eec <I2C_WaitOnFlagUntilTimeout+0x70>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	43da      	mvns	r2, r3
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	4013      	ands	r3, r2
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	bf0c      	ite	eq
 8001ee4:	2301      	moveq	r3, #1
 8001ee6:	2300      	movne	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	461a      	mov	r2, r3
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d116      	bne.n	8001f20 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2220      	movs	r2, #32
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	f043 0220 	orr.w	r2, r3, #32
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e023      	b.n	8001f68 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	0c1b      	lsrs	r3, r3, #16
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d10d      	bne.n	8001f46 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	43da      	mvns	r2, r3
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	4013      	ands	r3, r2
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	bf0c      	ite	eq
 8001f3c:	2301      	moveq	r3, #1
 8001f3e:	2300      	movne	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	461a      	mov	r2, r3
 8001f44:	e00c      	b.n	8001f60 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	43da      	mvns	r2, r3
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	4013      	ands	r3, r2
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	bf0c      	ite	eq
 8001f58:	2301      	moveq	r3, #1
 8001f5a:	2300      	movne	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	461a      	mov	r2, r3
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d093      	beq.n	8001e8e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f7e:	e071      	b.n	8002064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f8e:	d123      	bne.n	8001fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f9e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fa8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	f043 0204 	orr.w	r2, r3, #4
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e067      	b.n	80020a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fde:	d041      	beq.n	8002064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fe0:	f7fe fd6c 	bl	8000abc <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d302      	bcc.n	8001ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d136      	bne.n	8002064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	0c1b      	lsrs	r3, r3, #16
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d10c      	bne.n	800201a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	43da      	mvns	r2, r3
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	4013      	ands	r3, r2
 800200c:	b29b      	uxth	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	bf14      	ite	ne
 8002012:	2301      	movne	r3, #1
 8002014:	2300      	moveq	r3, #0
 8002016:	b2db      	uxtb	r3, r3
 8002018:	e00b      	b.n	8002032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	43da      	mvns	r2, r3
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	4013      	ands	r3, r2
 8002026:	b29b      	uxth	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	bf14      	ite	ne
 800202c:	2301      	movne	r3, #1
 800202e:	2300      	moveq	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d016      	beq.n	8002064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2220      	movs	r2, #32
 8002040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	f043 0220 	orr.w	r2, r3, #32
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e021      	b.n	80020a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	0c1b      	lsrs	r3, r3, #16
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b01      	cmp	r3, #1
 800206c:	d10c      	bne.n	8002088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	43da      	mvns	r2, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	4013      	ands	r3, r2
 800207a:	b29b      	uxth	r3, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	bf14      	ite	ne
 8002080:	2301      	movne	r3, #1
 8002082:	2300      	moveq	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	e00b      	b.n	80020a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	43da      	mvns	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	4013      	ands	r3, r2
 8002094:	b29b      	uxth	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	bf14      	ite	ne
 800209a:	2301      	movne	r3, #1
 800209c:	2300      	moveq	r3, #0
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f47f af6d 	bne.w	8001f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020bc:	e034      	b.n	8002128 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f000 f886 	bl	80021d0 <I2C_IsAcknowledgeFailed>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e034      	b.n	8002138 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d4:	d028      	beq.n	8002128 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020d6:	f7fe fcf1 	bl	8000abc <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d302      	bcc.n	80020ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d11d      	bne.n	8002128 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f6:	2b80      	cmp	r3, #128	; 0x80
 80020f8:	d016      	beq.n	8002128 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2220      	movs	r2, #32
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002114:	f043 0220 	orr.w	r2, r3, #32
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e007      	b.n	8002138 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002132:	2b80      	cmp	r3, #128	; 0x80
 8002134:	d1c3      	bne.n	80020be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800214c:	e034      	b.n	80021b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 f83e 	bl	80021d0 <I2C_IsAcknowledgeFailed>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e034      	b.n	80021c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002164:	d028      	beq.n	80021b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002166:	f7fe fca9 	bl	8000abc <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	429a      	cmp	r2, r3
 8002174:	d302      	bcc.n	800217c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d11d      	bne.n	80021b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	2b04      	cmp	r3, #4
 8002188:	d016      	beq.n	80021b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2220      	movs	r2, #32
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	f043 0220 	orr.w	r2, r3, #32
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e007      	b.n	80021c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	f003 0304 	and.w	r3, r3, #4
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d1c3      	bne.n	800214e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021e6:	d11b      	bne.n	8002220 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	f043 0204 	orr.w	r2, r3, #4
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e000      	b.n	8002222 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr

0800222c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e272      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 8087 	beq.w	800235a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800224c:	4b92      	ldr	r3, [pc, #584]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 030c 	and.w	r3, r3, #12
 8002254:	2b04      	cmp	r3, #4
 8002256:	d00c      	beq.n	8002272 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002258:	4b8f      	ldr	r3, [pc, #572]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 030c 	and.w	r3, r3, #12
 8002260:	2b08      	cmp	r3, #8
 8002262:	d112      	bne.n	800228a <HAL_RCC_OscConfig+0x5e>
 8002264:	4b8c      	ldr	r3, [pc, #560]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800226c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002270:	d10b      	bne.n	800228a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002272:	4b89      	ldr	r3, [pc, #548]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d06c      	beq.n	8002358 <HAL_RCC_OscConfig+0x12c>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d168      	bne.n	8002358 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e24c      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002292:	d106      	bne.n	80022a2 <HAL_RCC_OscConfig+0x76>
 8002294:	4b80      	ldr	r3, [pc, #512]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a7f      	ldr	r2, [pc, #508]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 800229a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	e02e      	b.n	8002300 <HAL_RCC_OscConfig+0xd4>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10c      	bne.n	80022c4 <HAL_RCC_OscConfig+0x98>
 80022aa:	4b7b      	ldr	r3, [pc, #492]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a7a      	ldr	r2, [pc, #488]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	4b78      	ldr	r3, [pc, #480]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a77      	ldr	r2, [pc, #476]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	e01d      	b.n	8002300 <HAL_RCC_OscConfig+0xd4>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022cc:	d10c      	bne.n	80022e8 <HAL_RCC_OscConfig+0xbc>
 80022ce:	4b72      	ldr	r3, [pc, #456]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a71      	ldr	r2, [pc, #452]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	4b6f      	ldr	r3, [pc, #444]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a6e      	ldr	r2, [pc, #440]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	e00b      	b.n	8002300 <HAL_RCC_OscConfig+0xd4>
 80022e8:	4b6b      	ldr	r3, [pc, #428]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a6a      	ldr	r2, [pc, #424]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	4b68      	ldr	r3, [pc, #416]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a67      	ldr	r2, [pc, #412]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d013      	beq.n	8002330 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7fe fbd8 	bl	8000abc <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002310:	f7fe fbd4 	bl	8000abc <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b64      	cmp	r3, #100	; 0x64
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e200      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002322:	4b5d      	ldr	r3, [pc, #372]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f0      	beq.n	8002310 <HAL_RCC_OscConfig+0xe4>
 800232e:	e014      	b.n	800235a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002330:	f7fe fbc4 	bl	8000abc <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002338:	f7fe fbc0 	bl	8000abc <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b64      	cmp	r3, #100	; 0x64
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e1ec      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234a:	4b53      	ldr	r3, [pc, #332]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f0      	bne.n	8002338 <HAL_RCC_OscConfig+0x10c>
 8002356:	e000      	b.n	800235a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d063      	beq.n	800242e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002366:	4b4c      	ldr	r3, [pc, #304]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00b      	beq.n	800238a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002372:	4b49      	ldr	r3, [pc, #292]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 030c 	and.w	r3, r3, #12
 800237a:	2b08      	cmp	r3, #8
 800237c:	d11c      	bne.n	80023b8 <HAL_RCC_OscConfig+0x18c>
 800237e:	4b46      	ldr	r3, [pc, #280]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d116      	bne.n	80023b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238a:	4b43      	ldr	r3, [pc, #268]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d005      	beq.n	80023a2 <HAL_RCC_OscConfig+0x176>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d001      	beq.n	80023a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e1c0      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a2:	4b3d      	ldr	r3, [pc, #244]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	4939      	ldr	r1, [pc, #228]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b6:	e03a      	b.n	800242e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d020      	beq.n	8002402 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c0:	4b36      	ldr	r3, [pc, #216]	; (800249c <HAL_RCC_OscConfig+0x270>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c6:	f7fe fb79 	bl	8000abc <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ce:	f7fe fb75 	bl	8000abc <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e1a1      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e0:	4b2d      	ldr	r3, [pc, #180]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ec:	4b2a      	ldr	r3, [pc, #168]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4927      	ldr	r1, [pc, #156]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	600b      	str	r3, [r1, #0]
 8002400:	e015      	b.n	800242e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002402:	4b26      	ldr	r3, [pc, #152]	; (800249c <HAL_RCC_OscConfig+0x270>)
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7fe fb58 	bl	8000abc <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002410:	f7fe fb54 	bl	8000abc <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e180      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002422:	4b1d      	ldr	r3, [pc, #116]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d03a      	beq.n	80024b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d019      	beq.n	8002476 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002442:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <HAL_RCC_OscConfig+0x274>)
 8002444:	2201      	movs	r2, #1
 8002446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002448:	f7fe fb38 	bl	8000abc <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002450:	f7fe fb34 	bl	8000abc <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e160      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002462:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f0      	beq.n	8002450 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800246e:	2001      	movs	r0, #1
 8002470:	f000 faba 	bl	80029e8 <RCC_Delay>
 8002474:	e01c      	b.n	80024b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002476:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <HAL_RCC_OscConfig+0x274>)
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247c:	f7fe fb1e 	bl	8000abc <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002482:	e00f      	b.n	80024a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002484:	f7fe fb1a 	bl	8000abc <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d908      	bls.n	80024a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e146      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000
 800249c:	42420000 	.word	0x42420000
 80024a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a4:	4b92      	ldr	r3, [pc, #584]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1e9      	bne.n	8002484 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80a6 	beq.w	800260a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024be:	2300      	movs	r3, #0
 80024c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024c2:	4b8b      	ldr	r3, [pc, #556]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10d      	bne.n	80024ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ce:	4b88      	ldr	r3, [pc, #544]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	4a87      	ldr	r2, [pc, #540]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d8:	61d3      	str	r3, [r2, #28]
 80024da:	4b85      	ldr	r3, [pc, #532]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024e6:	2301      	movs	r3, #1
 80024e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ea:	4b82      	ldr	r3, [pc, #520]	; (80026f4 <HAL_RCC_OscConfig+0x4c8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d118      	bne.n	8002528 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024f6:	4b7f      	ldr	r3, [pc, #508]	; (80026f4 <HAL_RCC_OscConfig+0x4c8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a7e      	ldr	r2, [pc, #504]	; (80026f4 <HAL_RCC_OscConfig+0x4c8>)
 80024fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002502:	f7fe fadb 	bl	8000abc <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800250a:	f7fe fad7 	bl	8000abc <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b64      	cmp	r3, #100	; 0x64
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e103      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251c:	4b75      	ldr	r3, [pc, #468]	; (80026f4 <HAL_RCC_OscConfig+0x4c8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0f0      	beq.n	800250a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d106      	bne.n	800253e <HAL_RCC_OscConfig+0x312>
 8002530:	4b6f      	ldr	r3, [pc, #444]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	4a6e      	ldr	r2, [pc, #440]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	6213      	str	r3, [r2, #32]
 800253c:	e02d      	b.n	800259a <HAL_RCC_OscConfig+0x36e>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10c      	bne.n	8002560 <HAL_RCC_OscConfig+0x334>
 8002546:	4b6a      	ldr	r3, [pc, #424]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	4a69      	ldr	r2, [pc, #420]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 800254c:	f023 0301 	bic.w	r3, r3, #1
 8002550:	6213      	str	r3, [r2, #32]
 8002552:	4b67      	ldr	r3, [pc, #412]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	4a66      	ldr	r2, [pc, #408]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002558:	f023 0304 	bic.w	r3, r3, #4
 800255c:	6213      	str	r3, [r2, #32]
 800255e:	e01c      	b.n	800259a <HAL_RCC_OscConfig+0x36e>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2b05      	cmp	r3, #5
 8002566:	d10c      	bne.n	8002582 <HAL_RCC_OscConfig+0x356>
 8002568:	4b61      	ldr	r3, [pc, #388]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	4a60      	ldr	r2, [pc, #384]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 800256e:	f043 0304 	orr.w	r3, r3, #4
 8002572:	6213      	str	r3, [r2, #32]
 8002574:	4b5e      	ldr	r3, [pc, #376]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	4a5d      	ldr	r2, [pc, #372]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	6213      	str	r3, [r2, #32]
 8002580:	e00b      	b.n	800259a <HAL_RCC_OscConfig+0x36e>
 8002582:	4b5b      	ldr	r3, [pc, #364]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	4a5a      	ldr	r2, [pc, #360]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002588:	f023 0301 	bic.w	r3, r3, #1
 800258c:	6213      	str	r3, [r2, #32]
 800258e:	4b58      	ldr	r3, [pc, #352]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	4a57      	ldr	r2, [pc, #348]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002594:	f023 0304 	bic.w	r3, r3, #4
 8002598:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d015      	beq.n	80025ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a2:	f7fe fa8b 	bl	8000abc <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a8:	e00a      	b.n	80025c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025aa:	f7fe fa87 	bl	8000abc <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e0b1      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c0:	4b4b      	ldr	r3, [pc, #300]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0ee      	beq.n	80025aa <HAL_RCC_OscConfig+0x37e>
 80025cc:	e014      	b.n	80025f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ce:	f7fe fa75 	bl	8000abc <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d4:	e00a      	b.n	80025ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d6:	f7fe fa71 	bl	8000abc <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e09b      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ec:	4b40      	ldr	r3, [pc, #256]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1ee      	bne.n	80025d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025f8:	7dfb      	ldrb	r3, [r7, #23]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d105      	bne.n	800260a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025fe:	4b3c      	ldr	r3, [pc, #240]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	4a3b      	ldr	r2, [pc, #236]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002608:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 8087 	beq.w	8002722 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002614:	4b36      	ldr	r3, [pc, #216]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 030c 	and.w	r3, r3, #12
 800261c:	2b08      	cmp	r3, #8
 800261e:	d061      	beq.n	80026e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	2b02      	cmp	r3, #2
 8002626:	d146      	bne.n	80026b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002628:	4b33      	ldr	r3, [pc, #204]	; (80026f8 <HAL_RCC_OscConfig+0x4cc>)
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262e:	f7fe fa45 	bl	8000abc <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002636:	f7fe fa41 	bl	8000abc <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e06d      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002648:	4b29      	ldr	r3, [pc, #164]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1f0      	bne.n	8002636 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800265c:	d108      	bne.n	8002670 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800265e:	4b24      	ldr	r3, [pc, #144]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	4921      	ldr	r1, [pc, #132]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 800266c:	4313      	orrs	r3, r2
 800266e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002670:	4b1f      	ldr	r3, [pc, #124]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a19      	ldr	r1, [r3, #32]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	430b      	orrs	r3, r1
 8002682:	491b      	ldr	r1, [pc, #108]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002688:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <HAL_RCC_OscConfig+0x4cc>)
 800268a:	2201      	movs	r2, #1
 800268c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268e:	f7fe fa15 	bl	8000abc <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002696:	f7fe fa11 	bl	8000abc <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e03d      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x46a>
 80026b4:	e035      	b.n	8002722 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <HAL_RCC_OscConfig+0x4cc>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026bc:	f7fe f9fe 	bl	8000abc <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c4:	f7fe f9fa 	bl	8000abc <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e026      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d6:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x498>
 80026e2:	e01e      	b.n	8002722 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d107      	bne.n	80026fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e019      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40007000 	.word	0x40007000
 80026f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <HAL_RCC_OscConfig+0x500>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	429a      	cmp	r2, r3
 800270e:	d106      	bne.n	800271e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800271a:	429a      	cmp	r2, r3
 800271c:	d001      	beq.n	8002722 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40021000 	.word	0x40021000

08002730 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0d0      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002744:	4b6a      	ldr	r3, [pc, #424]	; (80028f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	d910      	bls.n	8002774 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002752:	4b67      	ldr	r3, [pc, #412]	; (80028f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 0207 	bic.w	r2, r3, #7
 800275a:	4965      	ldr	r1, [pc, #404]	; (80028f0 <HAL_RCC_ClockConfig+0x1c0>)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	4313      	orrs	r3, r2
 8002760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002762:	4b63      	ldr	r3, [pc, #396]	; (80028f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	429a      	cmp	r2, r3
 800276e:	d001      	beq.n	8002774 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e0b8      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d020      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800278c:	4b59      	ldr	r3, [pc, #356]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	4a58      	ldr	r2, [pc, #352]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002796:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0308 	and.w	r3, r3, #8
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d005      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027a4:	4b53      	ldr	r3, [pc, #332]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	4a52      	ldr	r2, [pc, #328]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b0:	4b50      	ldr	r3, [pc, #320]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	494d      	ldr	r1, [pc, #308]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d040      	beq.n	8002850 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d107      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d6:	4b47      	ldr	r3, [pc, #284]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d115      	bne.n	800280e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e07f      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d107      	bne.n	80027fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ee:	4b41      	ldr	r3, [pc, #260]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d109      	bne.n	800280e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e073      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fe:	4b3d      	ldr	r3, [pc, #244]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e06b      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800280e:	4b39      	ldr	r3, [pc, #228]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f023 0203 	bic.w	r2, r3, #3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	4936      	ldr	r1, [pc, #216]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 800281c:	4313      	orrs	r3, r2
 800281e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002820:	f7fe f94c 	bl	8000abc <HAL_GetTick>
 8002824:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002826:	e00a      	b.n	800283e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002828:	f7fe f948 	bl	8000abc <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	f241 3288 	movw	r2, #5000	; 0x1388
 8002836:	4293      	cmp	r3, r2
 8002838:	d901      	bls.n	800283e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e053      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283e:	4b2d      	ldr	r3, [pc, #180]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 020c 	and.w	r2, r3, #12
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	429a      	cmp	r2, r3
 800284e:	d1eb      	bne.n	8002828 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002850:	4b27      	ldr	r3, [pc, #156]	; (80028f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d210      	bcs.n	8002880 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285e:	4b24      	ldr	r3, [pc, #144]	; (80028f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f023 0207 	bic.w	r2, r3, #7
 8002866:	4922      	ldr	r1, [pc, #136]	; (80028f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	4313      	orrs	r3, r2
 800286c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800286e:	4b20      	ldr	r3, [pc, #128]	; (80028f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	429a      	cmp	r2, r3
 800287a:	d001      	beq.n	8002880 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e032      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d008      	beq.n	800289e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800288c:	4b19      	ldr	r3, [pc, #100]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	4916      	ldr	r1, [pc, #88]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 800289a:	4313      	orrs	r3, r2
 800289c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d009      	beq.n	80028be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028aa:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	490e      	ldr	r1, [pc, #56]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028be:	f000 f821 	bl	8002904 <HAL_RCC_GetSysClockFreq>
 80028c2:	4602      	mov	r2, r0
 80028c4:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	490a      	ldr	r1, [pc, #40]	; (80028f8 <HAL_RCC_ClockConfig+0x1c8>)
 80028d0:	5ccb      	ldrb	r3, [r1, r3]
 80028d2:	fa22 f303 	lsr.w	r3, r2, r3
 80028d6:	4a09      	ldr	r2, [pc, #36]	; (80028fc <HAL_RCC_ClockConfig+0x1cc>)
 80028d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028da:	4b09      	ldr	r3, [pc, #36]	; (8002900 <HAL_RCC_ClockConfig+0x1d0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fe f8aa 	bl	8000a38 <HAL_InitTick>

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40022000 	.word	0x40022000
 80028f4:	40021000 	.word	0x40021000
 80028f8:	08002c00 	.word	0x08002c00
 80028fc:	20000000 	.word	0x20000000
 8002900:	2000000c 	.word	0x2000000c

08002904 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	2300      	movs	r3, #0
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	2300      	movs	r3, #0
 8002918:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800291a:	2300      	movs	r3, #0
 800291c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800291e:	4b1e      	ldr	r3, [pc, #120]	; (8002998 <HAL_RCC_GetSysClockFreq+0x94>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	2b04      	cmp	r3, #4
 800292c:	d002      	beq.n	8002934 <HAL_RCC_GetSysClockFreq+0x30>
 800292e:	2b08      	cmp	r3, #8
 8002930:	d003      	beq.n	800293a <HAL_RCC_GetSysClockFreq+0x36>
 8002932:	e027      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002934:	4b19      	ldr	r3, [pc, #100]	; (800299c <HAL_RCC_GetSysClockFreq+0x98>)
 8002936:	613b      	str	r3, [r7, #16]
      break;
 8002938:	e027      	b.n	800298a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	0c9b      	lsrs	r3, r3, #18
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	4a17      	ldr	r2, [pc, #92]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002944:	5cd3      	ldrb	r3, [r2, r3]
 8002946:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d010      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002952:	4b11      	ldr	r3, [pc, #68]	; (8002998 <HAL_RCC_GetSysClockFreq+0x94>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	0c5b      	lsrs	r3, r3, #17
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	4a11      	ldr	r2, [pc, #68]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800295e:	5cd3      	ldrb	r3, [r2, r3]
 8002960:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a0d      	ldr	r2, [pc, #52]	; (800299c <HAL_RCC_GetSysClockFreq+0x98>)
 8002966:	fb03 f202 	mul.w	r2, r3, r2
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	e004      	b.n	800297e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a0c      	ldr	r2, [pc, #48]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002978:	fb02 f303 	mul.w	r3, r2, r3
 800297c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	613b      	str	r3, [r7, #16]
      break;
 8002982:	e002      	b.n	800298a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002984:	4b05      	ldr	r3, [pc, #20]	; (800299c <HAL_RCC_GetSysClockFreq+0x98>)
 8002986:	613b      	str	r3, [r7, #16]
      break;
 8002988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800298a:	693b      	ldr	r3, [r7, #16]
}
 800298c:	4618      	mov	r0, r3
 800298e:	371c      	adds	r7, #28
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40021000 	.word	0x40021000
 800299c:	007a1200 	.word	0x007a1200
 80029a0:	08003418 	.word	0x08003418
 80029a4:	08003428 	.word	0x08003428
 80029a8:	003d0900 	.word	0x003d0900

080029ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b0:	4b02      	ldr	r3, [pc, #8]	; (80029bc <HAL_RCC_GetHCLKFreq+0x10>)
 80029b2:	681b      	ldr	r3, [r3, #0]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr
 80029bc:	20000000 	.word	0x20000000

080029c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029c4:	f7ff fff2 	bl	80029ac <HAL_RCC_GetHCLKFreq>
 80029c8:	4602      	mov	r2, r0
 80029ca:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	0a1b      	lsrs	r3, r3, #8
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	4903      	ldr	r1, [pc, #12]	; (80029e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029d6:	5ccb      	ldrb	r3, [r1, r3]
 80029d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029dc:	4618      	mov	r0, r3
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40021000 	.word	0x40021000
 80029e4:	08002c10 	.word	0x08002c10

080029e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029f0:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <RCC_Delay+0x34>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a0a      	ldr	r2, [pc, #40]	; (8002a20 <RCC_Delay+0x38>)
 80029f6:	fba2 2303 	umull	r2, r3, r2, r3
 80029fa:	0a5b      	lsrs	r3, r3, #9
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	fb02 f303 	mul.w	r3, r2, r3
 8002a02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a04:	bf00      	nop
  }
  while (Delay --);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	1e5a      	subs	r2, r3, #1
 8002a0a:	60fa      	str	r2, [r7, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f9      	bne.n	8002a04 <RCC_Delay+0x1c>
}
 8002a10:	bf00      	nop
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr
 8002a1c:	20000000 	.word	0x20000000
 8002a20:	10624dd3 	.word	0x10624dd3

08002a24 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	2300      	movs	r3, #0
 8002a32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d07d      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002a40:	2300      	movs	r3, #0
 8002a42:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a44:	4b4f      	ldr	r3, [pc, #316]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10d      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a50:	4b4c      	ldr	r3, [pc, #304]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	4a4b      	ldr	r2, [pc, #300]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	61d3      	str	r3, [r2, #28]
 8002a5c:	4b49      	ldr	r3, [pc, #292]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6c:	4b46      	ldr	r3, [pc, #280]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d118      	bne.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a78:	4b43      	ldr	r3, [pc, #268]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a42      	ldr	r2, [pc, #264]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a84:	f7fe f81a 	bl	8000abc <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8a:	e008      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a8c:	f7fe f816 	bl	8000abc <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b64      	cmp	r3, #100	; 0x64
 8002a98:	d901      	bls.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e06d      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9e:	4b3a      	ldr	r3, [pc, #232]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002aaa:	4b36      	ldr	r3, [pc, #216]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d02e      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d027      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ac8:	4b2e      	ldr	r3, [pc, #184]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ad0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ad2:	4b2e      	ldr	r3, [pc, #184]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ad8:	4b2c      	ldr	r3, [pc, #176]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ade:	4a29      	ldr	r2, [pc, #164]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d014      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aee:	f7fd ffe5 	bl	8000abc <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af4:	e00a      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af6:	f7fd ffe1 	bl	8000abc <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e036      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0c:	4b1d      	ldr	r3, [pc, #116]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0ee      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b18:	4b1a      	ldr	r3, [pc, #104]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4917      	ldr	r1, [pc, #92]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b2a:	7dfb      	ldrb	r3, [r7, #23]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d105      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b30:	4b14      	ldr	r3, [pc, #80]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	4a13      	ldr	r2, [pc, #76]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d008      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b48:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	490b      	ldr	r1, [pc, #44]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0310 	and.w	r3, r3, #16
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d008      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b66:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	4904      	ldr	r1, [pc, #16]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40007000 	.word	0x40007000
 8002b8c:	42420440 	.word	0x42420440

08002b90 <__libc_init_array>:
 8002b90:	b570      	push	{r4, r5, r6, lr}
 8002b92:	2600      	movs	r6, #0
 8002b94:	4d0c      	ldr	r5, [pc, #48]	; (8002bc8 <__libc_init_array+0x38>)
 8002b96:	4c0d      	ldr	r4, [pc, #52]	; (8002bcc <__libc_init_array+0x3c>)
 8002b98:	1b64      	subs	r4, r4, r5
 8002b9a:	10a4      	asrs	r4, r4, #2
 8002b9c:	42a6      	cmp	r6, r4
 8002b9e:	d109      	bne.n	8002bb4 <__libc_init_array+0x24>
 8002ba0:	f000 f822 	bl	8002be8 <_init>
 8002ba4:	2600      	movs	r6, #0
 8002ba6:	4d0a      	ldr	r5, [pc, #40]	; (8002bd0 <__libc_init_array+0x40>)
 8002ba8:	4c0a      	ldr	r4, [pc, #40]	; (8002bd4 <__libc_init_array+0x44>)
 8002baa:	1b64      	subs	r4, r4, r5
 8002bac:	10a4      	asrs	r4, r4, #2
 8002bae:	42a6      	cmp	r6, r4
 8002bb0:	d105      	bne.n	8002bbe <__libc_init_array+0x2e>
 8002bb2:	bd70      	pop	{r4, r5, r6, pc}
 8002bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bb8:	4798      	blx	r3
 8002bba:	3601      	adds	r6, #1
 8002bbc:	e7ee      	b.n	8002b9c <__libc_init_array+0xc>
 8002bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bc2:	4798      	blx	r3
 8002bc4:	3601      	adds	r6, #1
 8002bc6:	e7f2      	b.n	8002bae <__libc_init_array+0x1e>
 8002bc8:	0800342c 	.word	0x0800342c
 8002bcc:	0800342c 	.word	0x0800342c
 8002bd0:	0800342c 	.word	0x0800342c
 8002bd4:	08003430 	.word	0x08003430

08002bd8 <memset>:
 8002bd8:	4603      	mov	r3, r0
 8002bda:	4402      	add	r2, r0
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d100      	bne.n	8002be2 <memset+0xa>
 8002be0:	4770      	bx	lr
 8002be2:	f803 1b01 	strb.w	r1, [r3], #1
 8002be6:	e7f9      	b.n	8002bdc <memset+0x4>

08002be8 <_init>:
 8002be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bea:	bf00      	nop
 8002bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bee:	bc08      	pop	{r3}
 8002bf0:	469e      	mov	lr, r3
 8002bf2:	4770      	bx	lr

08002bf4 <_fini>:
 8002bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bf6:	bf00      	nop
 8002bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bfa:	bc08      	pop	{r3}
 8002bfc:	469e      	mov	lr, r3
 8002bfe:	4770      	bx	lr
