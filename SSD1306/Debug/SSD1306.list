
SSD1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cd4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013d0  08003de0  08003de0  00013de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051b0  080051b0  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080051b0  080051b0  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051b0  080051b0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051b0  080051b0  000151b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051b4  080051b4  000151b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080051b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000053c  20000080  08005238  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005bc  08005238  000205bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a83c  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe0  00000000  00000000  0002a8e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  0002c8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000900  00000000  00000000  0002d2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180cd  00000000  00000000  0002dbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d0bf  00000000  00000000  00045c8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088ace  00000000  00000000  00052d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db81a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ba4  00000000  00000000  000db86c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08003dc8 	.word	0x08003dc8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08003dc8 	.word	0x08003dc8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fe75 	bl	8000e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f8a1 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f989 	bl	8000470 <MX_GPIO_Init>
  MX_DMA_Init();
 800015e:	f000 f969 	bl	8000434 <MX_DMA_Init>
  MX_I2C1_Init();
 8000162:	f000 f939 	bl	80003d8 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000166:	f000 f8e9 	bl	800033c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_Init();
 800016a:	f000 fb7b 	bl	8000864 <ssd1306_Init>
  ssd1306_Fill(Black);
 800016e:	2000      	movs	r0, #0
 8000170:	f000 fbe2 	bl	8000938 <ssd1306_Fill>

  ssd1306_SetCursor(24, 17);
 8000174:	2111      	movs	r1, #17
 8000176:	2018      	movs	r0, #24
 8000178:	f000 fd28 	bl	8000bcc <ssd1306_SetCursor>
  ssd1306_WriteString("DECIBEL", Font_11x18, White);
 800017c:	4a3e      	ldr	r2, [pc, #248]	; (8000278 <main+0x12c>)
 800017e:	2301      	movs	r3, #1
 8000180:	ca06      	ldmia	r2, {r1, r2}
 8000182:	483e      	ldr	r0, [pc, #248]	; (800027c <main+0x130>)
 8000184:	f000 fcfc 	bl	8000b80 <ssd1306_WriteString>
  ssd1306_SetCursor(33, 37);
 8000188:	2125      	movs	r1, #37	; 0x25
 800018a:	2021      	movs	r0, #33	; 0x21
 800018c:	f000 fd1e 	bl	8000bcc <ssd1306_SetCursor>
  ssd1306_WriteString("METER", Font_11x18, White);
 8000190:	4a39      	ldr	r2, [pc, #228]	; (8000278 <main+0x12c>)
 8000192:	2301      	movs	r3, #1
 8000194:	ca06      	ldmia	r2, {r1, r2}
 8000196:	483a      	ldr	r0, [pc, #232]	; (8000280 <main+0x134>)
 8000198:	f000 fcf2 	bl	8000b80 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 800019c:	f000 fbee 	bl	800097c <ssd1306_UpdateScreen>
  HAL_Delay(2000);
 80001a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80001a4:	f000 feae 	bl	8000f04 <HAL_Delay>

  ssd1306_Fill(Black);
 80001a8:	2000      	movs	r0, #0
 80001aa:	f000 fbc5 	bl	8000938 <ssd1306_Fill>
  ssd1306_Line(0, 12, 127, 12, White);
 80001ae:	2301      	movs	r3, #1
 80001b0:	9300      	str	r3, [sp, #0]
 80001b2:	230c      	movs	r3, #12
 80001b4:	227f      	movs	r2, #127	; 0x7f
 80001b6:	210c      	movs	r1, #12
 80001b8:	2000      	movs	r0, #0
 80001ba:	f000 fd1f 	bl	8000bfc <ssd1306_Line>
  ssd1306_DrawRectangle(96, 2, 124, 9, White);
 80001be:	2301      	movs	r3, #1
 80001c0:	9300      	str	r3, [sp, #0]
 80001c2:	2309      	movs	r3, #9
 80001c4:	227c      	movs	r2, #124	; 0x7c
 80001c6:	2102      	movs	r1, #2
 80001c8:	2060      	movs	r0, #96	; 0x60
 80001ca:	f000 fd83 	bl	8000cd4 <ssd1306_DrawRectangle>
  ssd1306_FillRectangle(98, 4, 122, 7, White);
 80001ce:	2301      	movs	r3, #1
 80001d0:	9300      	str	r3, [sp, #0]
 80001d2:	2307      	movs	r3, #7
 80001d4:	227a      	movs	r2, #122	; 0x7a
 80001d6:	2104      	movs	r1, #4
 80001d8:	2062      	movs	r0, #98	; 0x62
 80001da:	f000 fdb2 	bl	8000d42 <ssd1306_FillRectangle>
  ssd1306_DrawPixel(94, 4, White);
 80001de:	2201      	movs	r2, #1
 80001e0:	2104      	movs	r1, #4
 80001e2:	205e      	movs	r0, #94	; 0x5e
 80001e4:	f000 fbf2 	bl	80009cc <ssd1306_DrawPixel>
  ssd1306_DrawPixel(94, 5, White);
 80001e8:	2201      	movs	r2, #1
 80001ea:	2105      	movs	r1, #5
 80001ec:	205e      	movs	r0, #94	; 0x5e
 80001ee:	f000 fbed 	bl	80009cc <ssd1306_DrawPixel>
  ssd1306_DrawPixel(94, 6, White);
 80001f2:	2201      	movs	r2, #1
 80001f4:	2106      	movs	r1, #6
 80001f6:	205e      	movs	r0, #94	; 0x5e
 80001f8:	f000 fbe8 	bl	80009cc <ssd1306_DrawPixel>
  ssd1306_DrawPixel(94, 7, White);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2107      	movs	r1, #7
 8000200:	205e      	movs	r0, #94	; 0x5e
 8000202:	f000 fbe3 	bl	80009cc <ssd1306_DrawPixel>

  ssd1306_DrawRectangle(14, 19, 114, 31, White);
 8000206:	2301      	movs	r3, #1
 8000208:	9300      	str	r3, [sp, #0]
 800020a:	231f      	movs	r3, #31
 800020c:	2272      	movs	r2, #114	; 0x72
 800020e:	2113      	movs	r1, #19
 8000210:	200e      	movs	r0, #14
 8000212:	f000 fd5f 	bl	8000cd4 <ssd1306_DrawRectangle>
  ssd1306_FillRectangle(16, 21, 112, 29, White);
 8000216:	2301      	movs	r3, #1
 8000218:	9300      	str	r3, [sp, #0]
 800021a:	231d      	movs	r3, #29
 800021c:	2270      	movs	r2, #112	; 0x70
 800021e:	2115      	movs	r1, #21
 8000220:	2010      	movs	r0, #16
 8000222:	f000 fd8e 	bl	8000d42 <ssd1306_FillRectangle>

  ssd1306_SetCursor(2, 2);
 8000226:	2102      	movs	r1, #2
 8000228:	2002      	movs	r0, #2
 800022a:	f000 fccf 	bl	8000bcc <ssd1306_SetCursor>
  ssd1306_WriteString("THCS Que Nham", Font_6x8, White);
 800022e:	4a15      	ldr	r2, [pc, #84]	; (8000284 <main+0x138>)
 8000230:	2301      	movs	r3, #1
 8000232:	ca06      	ldmia	r2, {r1, r2}
 8000234:	4814      	ldr	r0, [pc, #80]	; (8000288 <main+0x13c>)
 8000236:	f000 fca3 	bl	8000b80 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 800023a:	f000 fb9f 	bl	800097c <ssd1306_UpdateScreen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Value, 2);
 800023e:	2202      	movs	r2, #2
 8000240:	4912      	ldr	r1, [pc, #72]	; (800028c <main+0x140>)
 8000242:	4813      	ldr	r0, [pc, #76]	; (8000290 <main+0x144>)
 8000244:	f000 ff5a 	bl	80010fc <HAL_ADC_Start_DMA>
	  HAL_Delay(50);
 8000248:	2032      	movs	r0, #50	; 0x32
 800024a:	f000 fe5b 	bl	8000f04 <HAL_Delay>

	  sprintf(buffer, "%d", ADC_Value[0]);
 800024e:	4b0f      	ldr	r3, [pc, #60]	; (800028c <main+0x140>)
 8000250:	881b      	ldrh	r3, [r3, #0]
 8000252:	461a      	mov	r2, r3
 8000254:	490f      	ldr	r1, [pc, #60]	; (8000294 <main+0x148>)
 8000256:	4810      	ldr	r0, [pc, #64]	; (8000298 <main+0x14c>)
 8000258:	f003 f964 	bl	8003524 <siprintf>

	  ssd1306_SetCursor(40, 37);
 800025c:	2125      	movs	r1, #37	; 0x25
 800025e:	2028      	movs	r0, #40	; 0x28
 8000260:	f000 fcb4 	bl	8000bcc <ssd1306_SetCursor>
	  ssd1306_WriteString(buffer, Font_11x18, White);
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <main+0x12c>)
 8000266:	2301      	movs	r3, #1
 8000268:	ca06      	ldmia	r2, {r1, r2}
 800026a:	480b      	ldr	r0, [pc, #44]	; (8000298 <main+0x14c>)
 800026c:	f000 fc88 	bl	8000b80 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8000270:	f000 fb84 	bl	800097c <ssd1306_UpdateScreen>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Value, 2);
 8000274:	e7e3      	b.n	800023e <main+0xf2>
 8000276:	bf00      	nop
 8000278:	2000000c 	.word	0x2000000c
 800027c:	08003de0 	.word	0x08003de0
 8000280:	08003de8 	.word	0x08003de8
 8000284:	20000004 	.word	0x20000004
 8000288:	08003df0 	.word	0x08003df0
 800028c:	20000164 	.word	0x20000164
 8000290:	2000009c 	.word	0x2000009c
 8000294:	08003e00 	.word	0x08003e00
 8000298:	20000168 	.word	0x20000168

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b094      	sub	sp, #80	; 0x50
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002a6:	2228      	movs	r2, #40	; 0x28
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f003 f932 	bl	8003514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b0:	f107 0314 	add.w	r3, r7, #20
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
 80002be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002cc:	2302      	movs	r3, #2
 80002ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d0:	2301      	movs	r3, #1
 80002d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d4:	2310      	movs	r3, #16
 80002d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d8:	2300      	movs	r3, #0
 80002da:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002e0:	4618      	mov	r0, r3
 80002e2:	f002 fc13 	bl	8002b0c <HAL_RCC_OscConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80002ec:	f000 f8fe 	bl	80004ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f0:	230f      	movs	r3, #15
 80002f2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002f4:	2300      	movs	r3, #0
 80002f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000304:	f107 0314 	add.w	r3, r7, #20
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f002 fe80 	bl	8003010 <HAL_RCC_ClockConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000316:	f000 f8e9 	bl	80004ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800031a:	2302      	movs	r3, #2
 800031c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800031e:	2300      	movs	r3, #0
 8000320:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	4618      	mov	r0, r3
 8000326:	f002 ffed 	bl	8003304 <HAL_RCCEx_PeriphCLKConfig>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000330:	f000 f8dc 	bl	80004ec <Error_Handler>
  }
}
 8000334:	bf00      	nop
 8000336:	3750      	adds	r7, #80	; 0x50
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}

0800033c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2200      	movs	r2, #0
 8000346:	601a      	str	r2, [r3, #0]
 8000348:	605a      	str	r2, [r3, #4]
 800034a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800034c:	4b20      	ldr	r3, [pc, #128]	; (80003d0 <MX_ADC1_Init+0x94>)
 800034e:	4a21      	ldr	r2, [pc, #132]	; (80003d4 <MX_ADC1_Init+0x98>)
 8000350:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000352:	4b1f      	ldr	r3, [pc, #124]	; (80003d0 <MX_ADC1_Init+0x94>)
 8000354:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000358:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800035a:	4b1d      	ldr	r3, [pc, #116]	; (80003d0 <MX_ADC1_Init+0x94>)
 800035c:	2200      	movs	r2, #0
 800035e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000360:	4b1b      	ldr	r3, [pc, #108]	; (80003d0 <MX_ADC1_Init+0x94>)
 8000362:	2200      	movs	r2, #0
 8000364:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000366:	4b1a      	ldr	r3, [pc, #104]	; (80003d0 <MX_ADC1_Init+0x94>)
 8000368:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800036c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800036e:	4b18      	ldr	r3, [pc, #96]	; (80003d0 <MX_ADC1_Init+0x94>)
 8000370:	2200      	movs	r2, #0
 8000372:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000374:	4b16      	ldr	r3, [pc, #88]	; (80003d0 <MX_ADC1_Init+0x94>)
 8000376:	2202      	movs	r2, #2
 8000378:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800037a:	4815      	ldr	r0, [pc, #84]	; (80003d0 <MX_ADC1_Init+0x94>)
 800037c:	f000 fde6 	bl	8000f4c <HAL_ADC_Init>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000386:	f000 f8b1 	bl	80004ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800038a:	2300      	movs	r3, #0
 800038c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800038e:	2301      	movs	r3, #1
 8000390:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000392:	2307      	movs	r3, #7
 8000394:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	4619      	mov	r1, r3
 800039a:	480d      	ldr	r0, [pc, #52]	; (80003d0 <MX_ADC1_Init+0x94>)
 800039c:	f001 f870 	bl	8001480 <HAL_ADC_ConfigChannel>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80003a6:	f000 f8a1 	bl	80004ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80003aa:	2305      	movs	r3, #5
 80003ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003ae:	2302      	movs	r3, #2
 80003b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	4619      	mov	r1, r3
 80003b6:	4806      	ldr	r0, [pc, #24]	; (80003d0 <MX_ADC1_Init+0x94>)
 80003b8:	f001 f862 	bl	8001480 <HAL_ADC_ConfigChannel>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80003c2:	f000 f893 	bl	80004ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003c6:	bf00      	nop
 80003c8:	3710      	adds	r7, #16
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	2000009c 	.word	0x2000009c
 80003d4:	40012400 	.word	0x40012400

080003d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003dc:	4b12      	ldr	r3, [pc, #72]	; (8000428 <MX_I2C1_Init+0x50>)
 80003de:	4a13      	ldr	r2, [pc, #76]	; (800042c <MX_I2C1_Init+0x54>)
 80003e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003e2:	4b11      	ldr	r3, [pc, #68]	; (8000428 <MX_I2C1_Init+0x50>)
 80003e4:	4a12      	ldr	r2, [pc, #72]	; (8000430 <MX_I2C1_Init+0x58>)
 80003e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003e8:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <MX_I2C1_Init+0x50>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003ee:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <MX_I2C1_Init+0x50>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <MX_I2C1_Init+0x50>)
 80003f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003fc:	4b0a      	ldr	r3, [pc, #40]	; (8000428 <MX_I2C1_Init+0x50>)
 80003fe:	2200      	movs	r2, #0
 8000400:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000402:	4b09      	ldr	r3, [pc, #36]	; (8000428 <MX_I2C1_Init+0x50>)
 8000404:	2200      	movs	r2, #0
 8000406:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000408:	4b07      	ldr	r3, [pc, #28]	; (8000428 <MX_I2C1_Init+0x50>)
 800040a:	2200      	movs	r2, #0
 800040c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800040e:	4b06      	ldr	r3, [pc, #24]	; (8000428 <MX_I2C1_Init+0x50>)
 8000410:	2200      	movs	r2, #0
 8000412:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000414:	4804      	ldr	r0, [pc, #16]	; (8000428 <MX_I2C1_Init+0x50>)
 8000416:	f001 fecd 	bl	80021b4 <HAL_I2C_Init>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000420:	f000 f864 	bl	80004ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000424:	bf00      	nop
 8000426:	bd80      	pop	{r7, pc}
 8000428:	20000110 	.word	0x20000110
 800042c:	40005400 	.word	0x40005400
 8000430:	000186a0 	.word	0x000186a0

08000434 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800043a:	4b0c      	ldr	r3, [pc, #48]	; (800046c <MX_DMA_Init+0x38>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	4a0b      	ldr	r2, [pc, #44]	; (800046c <MX_DMA_Init+0x38>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	6153      	str	r3, [r2, #20]
 8000446:	4b09      	ldr	r3, [pc, #36]	; (800046c <MX_DMA_Init+0x38>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000452:	2200      	movs	r2, #0
 8000454:	2100      	movs	r1, #0
 8000456:	200b      	movs	r0, #11
 8000458:	f001 faeb 	bl	8001a32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800045c:	200b      	movs	r0, #11
 800045e:	f001 fb04 	bl	8001a6a <HAL_NVIC_EnableIRQ>

}
 8000462:	bf00      	nop
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	40021000 	.word	0x40021000

08000470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b086      	sub	sp, #24
 8000474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000476:	f107 0308 	add.w	r3, r7, #8
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000484:	4b17      	ldr	r3, [pc, #92]	; (80004e4 <MX_GPIO_Init+0x74>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a16      	ldr	r2, [pc, #88]	; (80004e4 <MX_GPIO_Init+0x74>)
 800048a:	f043 0304 	orr.w	r3, r3, #4
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b14      	ldr	r3, [pc, #80]	; (80004e4 <MX_GPIO_Init+0x74>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f003 0304 	and.w	r3, r3, #4
 8000498:	607b      	str	r3, [r7, #4]
 800049a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800049c:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <MX_GPIO_Init+0x74>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a10      	ldr	r2, [pc, #64]	; (80004e4 <MX_GPIO_Init+0x74>)
 80004a2:	f043 0308 	orr.w	r3, r3, #8
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <MX_GPIO_Init+0x74>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f003 0308 	and.w	r3, r3, #8
 80004b0:	603b      	str	r3, [r7, #0]
 80004b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Test_GPIO_Port, Test_Pin, GPIO_PIN_RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	2102      	movs	r1, #2
 80004b8:	480b      	ldr	r0, [pc, #44]	; (80004e8 <MX_GPIO_Init+0x78>)
 80004ba:	f001 fe63 	bl	8002184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Test_Pin */
  GPIO_InitStruct.Pin = Test_Pin;
 80004be:	2302      	movs	r3, #2
 80004c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c2:	2301      	movs	r3, #1
 80004c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c6:	2300      	movs	r3, #0
 80004c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ca:	2302      	movs	r3, #2
 80004cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Test_GPIO_Port, &GPIO_InitStruct);
 80004ce:	f107 0308 	add.w	r3, r7, #8
 80004d2:	4619      	mov	r1, r3
 80004d4:	4804      	ldr	r0, [pc, #16]	; (80004e8 <MX_GPIO_Init+0x78>)
 80004d6:	f001 fcd1 	bl	8001e7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004da:	bf00      	nop
 80004dc:	3718      	adds	r7, #24
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40021000 	.word	0x40021000
 80004e8:	40010800 	.word	0x40010800

080004ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f0:	b672      	cpsid	i
}
 80004f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <Error_Handler+0x8>
	...

080004f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004fe:	4b15      	ldr	r3, [pc, #84]	; (8000554 <HAL_MspInit+0x5c>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	4a14      	ldr	r2, [pc, #80]	; (8000554 <HAL_MspInit+0x5c>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	6193      	str	r3, [r2, #24]
 800050a:	4b12      	ldr	r3, [pc, #72]	; (8000554 <HAL_MspInit+0x5c>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000516:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <HAL_MspInit+0x5c>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <HAL_MspInit+0x5c>)
 800051c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000520:	61d3      	str	r3, [r2, #28]
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <HAL_MspInit+0x5c>)
 8000524:	69db      	ldr	r3, [r3, #28]
 8000526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <HAL_MspInit+0x60>)
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	4a04      	ldr	r2, [pc, #16]	; (8000558 <HAL_MspInit+0x60>)
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr
 8000554:	40021000 	.word	0x40021000
 8000558:	40010000 	.word	0x40010000

0800055c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	f107 0310 	add.w	r3, r7, #16
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a2c      	ldr	r2, [pc, #176]	; (8000628 <HAL_ADC_MspInit+0xcc>)
 8000578:	4293      	cmp	r3, r2
 800057a:	d151      	bne.n	8000620 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800057c:	4b2b      	ldr	r3, [pc, #172]	; (800062c <HAL_ADC_MspInit+0xd0>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a2a      	ldr	r2, [pc, #168]	; (800062c <HAL_ADC_MspInit+0xd0>)
 8000582:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b28      	ldr	r3, [pc, #160]	; (800062c <HAL_ADC_MspInit+0xd0>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000594:	4b25      	ldr	r3, [pc, #148]	; (800062c <HAL_ADC_MspInit+0xd0>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	4a24      	ldr	r2, [pc, #144]	; (800062c <HAL_ADC_MspInit+0xd0>)
 800059a:	f043 0304 	orr.w	r3, r3, #4
 800059e:	6193      	str	r3, [r2, #24]
 80005a0:	4b22      	ldr	r3, [pc, #136]	; (800062c <HAL_ADC_MspInit+0xd0>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	f003 0304 	and.w	r3, r3, #4
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Sensor_Pin|Battery_Pin;
 80005ac:	2321      	movs	r3, #33	; 0x21
 80005ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b0:	2303      	movs	r3, #3
 80005b2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b4:	f107 0310 	add.w	r3, r7, #16
 80005b8:	4619      	mov	r1, r3
 80005ba:	481d      	ldr	r0, [pc, #116]	; (8000630 <HAL_ADC_MspInit+0xd4>)
 80005bc:	f001 fc5e 	bl	8001e7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80005c0:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <HAL_ADC_MspInit+0xd8>)
 80005c2:	4a1d      	ldr	r2, [pc, #116]	; (8000638 <HAL_ADC_MspInit+0xdc>)
 80005c4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005c6:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <HAL_ADC_MspInit+0xd8>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005cc:	4b19      	ldr	r3, [pc, #100]	; (8000634 <HAL_ADC_MspInit+0xd8>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005d2:	4b18      	ldr	r3, [pc, #96]	; (8000634 <HAL_ADC_MspInit+0xd8>)
 80005d4:	2280      	movs	r2, #128	; 0x80
 80005d6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005d8:	4b16      	ldr	r3, [pc, #88]	; (8000634 <HAL_ADC_MspInit+0xd8>)
 80005da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005de:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005e0:	4b14      	ldr	r3, [pc, #80]	; (8000634 <HAL_ADC_MspInit+0xd8>)
 80005e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005e6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <HAL_ADC_MspInit+0xd8>)
 80005ea:	2220      	movs	r2, #32
 80005ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <HAL_ADC_MspInit+0xd8>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80005f4:	480f      	ldr	r0, [pc, #60]	; (8000634 <HAL_ADC_MspInit+0xd8>)
 80005f6:	f001 fa53 	bl	8001aa0 <HAL_DMA_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000600:	f7ff ff74 	bl	80004ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4a0b      	ldr	r2, [pc, #44]	; (8000634 <HAL_ADC_MspInit+0xd8>)
 8000608:	621a      	str	r2, [r3, #32]
 800060a:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <HAL_ADC_MspInit+0xd8>)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000610:	2200      	movs	r2, #0
 8000612:	2100      	movs	r1, #0
 8000614:	2012      	movs	r0, #18
 8000616:	f001 fa0c 	bl	8001a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800061a:	2012      	movs	r0, #18
 800061c:	f001 fa25 	bl	8001a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000620:	bf00      	nop
 8000622:	3720      	adds	r7, #32
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40012400 	.word	0x40012400
 800062c:	40021000 	.word	0x40021000
 8000630:	40010800 	.word	0x40010800
 8000634:	200000cc 	.word	0x200000cc
 8000638:	40020008 	.word	0x40020008

0800063c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	f107 0310 	add.w	r3, r7, #16
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a15      	ldr	r2, [pc, #84]	; (80006ac <HAL_I2C_MspInit+0x70>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d123      	bne.n	80006a4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <HAL_I2C_MspInit+0x74>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	4a13      	ldr	r2, [pc, #76]	; (80006b0 <HAL_I2C_MspInit+0x74>)
 8000662:	f043 0308 	orr.w	r3, r3, #8
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <HAL_I2C_MspInit+0x74>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f003 0308 	and.w	r3, r3, #8
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000674:	23c0      	movs	r3, #192	; 0xc0
 8000676:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000678:	2312      	movs	r3, #18
 800067a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800067c:	2303      	movs	r3, #3
 800067e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000680:	f107 0310 	add.w	r3, r7, #16
 8000684:	4619      	mov	r1, r3
 8000686:	480b      	ldr	r0, [pc, #44]	; (80006b4 <HAL_I2C_MspInit+0x78>)
 8000688:	f001 fbf8 	bl	8001e7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <HAL_I2C_MspInit+0x74>)
 800068e:	69db      	ldr	r3, [r3, #28]
 8000690:	4a07      	ldr	r2, [pc, #28]	; (80006b0 <HAL_I2C_MspInit+0x74>)
 8000692:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000696:	61d3      	str	r3, [r2, #28]
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <HAL_I2C_MspInit+0x74>)
 800069a:	69db      	ldr	r3, [r3, #28]
 800069c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006a4:	bf00      	nop
 80006a6:	3720      	adds	r7, #32
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40005400 	.word	0x40005400
 80006b0:	40021000 	.word	0x40021000
 80006b4:	40010c00 	.word	0x40010c00

080006b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <NMI_Handler+0x4>

080006be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <HardFault_Handler+0x4>

080006c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <MemManage_Handler+0x4>

080006ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ce:	e7fe      	b.n	80006ce <BusFault_Handler+0x4>

080006d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <UsageFault_Handler+0x4>

080006d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr

080006e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr

080006ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr

080006fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006fe:	f000 fbe5 	bl	8000ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800070c:	4802      	ldr	r0, [pc, #8]	; (8000718 <DMA1_Channel1_IRQHandler+0x10>)
 800070e:	f001 fa81 	bl	8001c14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200000cc 	.word	0x200000cc

0800071c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000720:	4802      	ldr	r0, [pc, #8]	; (800072c <ADC1_2_IRQHandler+0x10>)
 8000722:	f000 fdc9 	bl	80012b8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	2000009c 	.word	0x2000009c

08000730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000738:	4a14      	ldr	r2, [pc, #80]	; (800078c <_sbrk+0x5c>)
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <_sbrk+0x60>)
 800073c:	1ad3      	subs	r3, r2, r3
 800073e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000744:	4b13      	ldr	r3, [pc, #76]	; (8000794 <_sbrk+0x64>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d102      	bne.n	8000752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <_sbrk+0x64>)
 800074e:	4a12      	ldr	r2, [pc, #72]	; (8000798 <_sbrk+0x68>)
 8000750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <_sbrk+0x64>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4413      	add	r3, r2
 800075a:	693a      	ldr	r2, [r7, #16]
 800075c:	429a      	cmp	r2, r3
 800075e:	d207      	bcs.n	8000770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000760:	f002 fe86 	bl	8003470 <__errno>
 8000764:	4603      	mov	r3, r0
 8000766:	220c      	movs	r2, #12
 8000768:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800076a:	f04f 33ff 	mov.w	r3, #4294967295
 800076e:	e009      	b.n	8000784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <_sbrk+0x64>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000776:	4b07      	ldr	r3, [pc, #28]	; (8000794 <_sbrk+0x64>)
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4413      	add	r3, r2
 800077e:	4a05      	ldr	r2, [pc, #20]	; (8000794 <_sbrk+0x64>)
 8000780:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000782:	68fb      	ldr	r3, [r7, #12]
}
 8000784:	4618      	mov	r0, r3
 8000786:	3718      	adds	r7, #24
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20005000 	.word	0x20005000
 8000790:	00000400 	.word	0x00000400
 8000794:	2000019c 	.word	0x2000019c
 8000798:	200005c0 	.word	0x200005c0

0800079c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007a8:	f7ff fff8 	bl	800079c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007ac:	480b      	ldr	r0, [pc, #44]	; (80007dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007ae:	490c      	ldr	r1, [pc, #48]	; (80007e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007b0:	4a0c      	ldr	r2, [pc, #48]	; (80007e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b4:	e002      	b.n	80007bc <LoopCopyDataInit>

080007b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ba:	3304      	adds	r3, #4

080007bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c0:	d3f9      	bcc.n	80007b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c2:	4a09      	ldr	r2, [pc, #36]	; (80007e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007c4:	4c09      	ldr	r4, [pc, #36]	; (80007ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c8:	e001      	b.n	80007ce <LoopFillZerobss>

080007ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007cc:	3204      	adds	r2, #4

080007ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d0:	d3fb      	bcc.n	80007ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007d2:	f002 fe53 	bl	800347c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007d6:	f7ff fcb9 	bl	800014c <main>
  bx lr
 80007da:	4770      	bx	lr
  ldr r0, =_sdata
 80007dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80007e4:	080051b8 	.word	0x080051b8
  ldr r2, =_sbss
 80007e8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80007ec:	200005bc 	.word	0x200005bc

080007f0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f0:	e7fe      	b.n	80007f0 <CAN1_RX1_IRQHandler>

080007f2 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
	...

08000800 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af04      	add	r7, sp, #16
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800080a:	f04f 33ff 	mov.w	r3, #4294967295
 800080e:	9302      	str	r3, [sp, #8]
 8000810:	2301      	movs	r3, #1
 8000812:	9301      	str	r3, [sp, #4]
 8000814:	1dfb      	adds	r3, r7, #7
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	2301      	movs	r3, #1
 800081a:	2200      	movs	r2, #0
 800081c:	2178      	movs	r1, #120	; 0x78
 800081e:	4803      	ldr	r0, [pc, #12]	; (800082c <ssd1306_WriteCommand+0x2c>)
 8000820:	f001 fe0c 	bl	800243c <HAL_I2C_Mem_Write>
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000110 	.word	0x20000110

08000830 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af04      	add	r7, sp, #16
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	b29b      	uxth	r3, r3
 800083e:	f04f 32ff 	mov.w	r2, #4294967295
 8000842:	9202      	str	r2, [sp, #8]
 8000844:	9301      	str	r3, [sp, #4]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2301      	movs	r3, #1
 800084c:	2240      	movs	r2, #64	; 0x40
 800084e:	2178      	movs	r1, #120	; 0x78
 8000850:	4803      	ldr	r0, [pc, #12]	; (8000860 <ssd1306_WriteData+0x30>)
 8000852:	f001 fdf3 	bl	800243c <HAL_I2C_Mem_Write>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000110 	.word	0x20000110

08000864 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000868:	f7ff ffc3 	bl	80007f2 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800086c:	2064      	movs	r0, #100	; 0x64
 800086e:	f000 fb49 	bl	8000f04 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000872:	2000      	movs	r0, #0
 8000874:	f000 fac6 	bl	8000e04 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000878:	2020      	movs	r0, #32
 800087a:	f7ff ffc1 	bl	8000800 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800087e:	2000      	movs	r0, #0
 8000880:	f7ff ffbe 	bl	8000800 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000884:	20b0      	movs	r0, #176	; 0xb0
 8000886:	f7ff ffbb 	bl	8000800 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800088a:	20c8      	movs	r0, #200	; 0xc8
 800088c:	f7ff ffb8 	bl	8000800 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000890:	2000      	movs	r0, #0
 8000892:	f7ff ffb5 	bl	8000800 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000896:	2010      	movs	r0, #16
 8000898:	f7ff ffb2 	bl	8000800 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800089c:	2040      	movs	r0, #64	; 0x40
 800089e:	f7ff ffaf 	bl	8000800 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80008a2:	20ff      	movs	r0, #255	; 0xff
 80008a4:	f000 fa9b 	bl	8000dde <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80008a8:	20a1      	movs	r0, #161	; 0xa1
 80008aa:	f7ff ffa9 	bl	8000800 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80008ae:	20a6      	movs	r0, #166	; 0xa6
 80008b0:	f7ff ffa6 	bl	8000800 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80008b4:	20a8      	movs	r0, #168	; 0xa8
 80008b6:	f7ff ffa3 	bl	8000800 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80008ba:	203f      	movs	r0, #63	; 0x3f
 80008bc:	f7ff ffa0 	bl	8000800 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80008c0:	20a4      	movs	r0, #164	; 0xa4
 80008c2:	f7ff ff9d 	bl	8000800 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80008c6:	20d3      	movs	r0, #211	; 0xd3
 80008c8:	f7ff ff9a 	bl	8000800 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80008cc:	2000      	movs	r0, #0
 80008ce:	f7ff ff97 	bl	8000800 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80008d2:	20d5      	movs	r0, #213	; 0xd5
 80008d4:	f7ff ff94 	bl	8000800 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80008d8:	20f0      	movs	r0, #240	; 0xf0
 80008da:	f7ff ff91 	bl	8000800 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80008de:	20d9      	movs	r0, #217	; 0xd9
 80008e0:	f7ff ff8e 	bl	8000800 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80008e4:	2022      	movs	r0, #34	; 0x22
 80008e6:	f7ff ff8b 	bl	8000800 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80008ea:	20da      	movs	r0, #218	; 0xda
 80008ec:	f7ff ff88 	bl	8000800 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80008f0:	2012      	movs	r0, #18
 80008f2:	f7ff ff85 	bl	8000800 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80008f6:	20db      	movs	r0, #219	; 0xdb
 80008f8:	f7ff ff82 	bl	8000800 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80008fc:	2020      	movs	r0, #32
 80008fe:	f7ff ff7f 	bl	8000800 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000902:	208d      	movs	r0, #141	; 0x8d
 8000904:	f7ff ff7c 	bl	8000800 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000908:	2014      	movs	r0, #20
 800090a:	f7ff ff79 	bl	8000800 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800090e:	2001      	movs	r0, #1
 8000910:	f000 fa78 	bl	8000e04 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000914:	2000      	movs	r0, #0
 8000916:	f000 f80f 	bl	8000938 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800091a:	f000 f82f 	bl	800097c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800091e:	4b05      	ldr	r3, [pc, #20]	; (8000934 <ssd1306_Init+0xd0>)
 8000920:	2200      	movs	r2, #0
 8000922:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000924:	4b03      	ldr	r3, [pc, #12]	; (8000934 <ssd1306_Init+0xd0>)
 8000926:	2200      	movs	r2, #0
 8000928:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800092a:	4b02      	ldr	r3, [pc, #8]	; (8000934 <ssd1306_Init+0xd0>)
 800092c:	2201      	movs	r2, #1
 800092e:	711a      	strb	r2, [r3, #4]
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200005a0 	.word	0x200005a0

08000938 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	e00d      	b.n	8000964 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d101      	bne.n	8000952 <ssd1306_Fill+0x1a>
 800094e:	2100      	movs	r1, #0
 8000950:	e000      	b.n	8000954 <ssd1306_Fill+0x1c>
 8000952:	21ff      	movs	r1, #255	; 0xff
 8000954:	4a08      	ldr	r2, [pc, #32]	; (8000978 <ssd1306_Fill+0x40>)
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	4413      	add	r3, r2
 800095a:	460a      	mov	r2, r1
 800095c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	3301      	adds	r3, #1
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800096a:	d3ed      	bcc.n	8000948 <ssd1306_Fill+0x10>
    }
}
 800096c:	bf00      	nop
 800096e:	bf00      	nop
 8000970:	3714      	adds	r7, #20
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	200001a0 	.word	0x200001a0

0800097c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000982:	2300      	movs	r3, #0
 8000984:	71fb      	strb	r3, [r7, #7]
 8000986:	e016      	b.n	80009b6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	3b50      	subs	r3, #80	; 0x50
 800098c:	b2db      	uxtb	r3, r3
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff ff36 	bl	8000800 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000994:	2000      	movs	r0, #0
 8000996:	f7ff ff33 	bl	8000800 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800099a:	2010      	movs	r0, #16
 800099c:	f7ff ff30 	bl	8000800 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	01db      	lsls	r3, r3, #7
 80009a4:	4a08      	ldr	r2, [pc, #32]	; (80009c8 <ssd1306_UpdateScreen+0x4c>)
 80009a6:	4413      	add	r3, r2
 80009a8:	2180      	movs	r1, #128	; 0x80
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff ff40 	bl	8000830 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	3301      	adds	r3, #1
 80009b4:	71fb      	strb	r3, [r7, #7]
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	2b07      	cmp	r3, #7
 80009ba:	d9e5      	bls.n	8000988 <ssd1306_UpdateScreen+0xc>
    }
}
 80009bc:	bf00      	nop
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200001a0 	.word	0x200001a0

080009cc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	71fb      	strb	r3, [r7, #7]
 80009d6:	460b      	mov	r3, r1
 80009d8:	71bb      	strb	r3, [r7, #6]
 80009da:	4613      	mov	r3, r2
 80009dc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80009de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	db3d      	blt.n	8000a62 <ssd1306_DrawPixel+0x96>
 80009e6:	79bb      	ldrb	r3, [r7, #6]
 80009e8:	2b3f      	cmp	r3, #63	; 0x3f
 80009ea:	d83a      	bhi.n	8000a62 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80009ec:	797b      	ldrb	r3, [r7, #5]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d11a      	bne.n	8000a28 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80009f2:	79fa      	ldrb	r2, [r7, #7]
 80009f4:	79bb      	ldrb	r3, [r7, #6]
 80009f6:	08db      	lsrs	r3, r3, #3
 80009f8:	b2d8      	uxtb	r0, r3
 80009fa:	4603      	mov	r3, r0
 80009fc:	01db      	lsls	r3, r3, #7
 80009fe:	4413      	add	r3, r2
 8000a00:	4a1a      	ldr	r2, [pc, #104]	; (8000a6c <ssd1306_DrawPixel+0xa0>)
 8000a02:	5cd3      	ldrb	r3, [r2, r3]
 8000a04:	b25a      	sxtb	r2, r3
 8000a06:	79bb      	ldrb	r3, [r7, #6]
 8000a08:	f003 0307 	and.w	r3, r3, #7
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a12:	b25b      	sxtb	r3, r3
 8000a14:	4313      	orrs	r3, r2
 8000a16:	b259      	sxtb	r1, r3
 8000a18:	79fa      	ldrb	r2, [r7, #7]
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	01db      	lsls	r3, r3, #7
 8000a1e:	4413      	add	r3, r2
 8000a20:	b2c9      	uxtb	r1, r1
 8000a22:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <ssd1306_DrawPixel+0xa0>)
 8000a24:	54d1      	strb	r1, [r2, r3]
 8000a26:	e01d      	b.n	8000a64 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000a28:	79fa      	ldrb	r2, [r7, #7]
 8000a2a:	79bb      	ldrb	r3, [r7, #6]
 8000a2c:	08db      	lsrs	r3, r3, #3
 8000a2e:	b2d8      	uxtb	r0, r3
 8000a30:	4603      	mov	r3, r0
 8000a32:	01db      	lsls	r3, r3, #7
 8000a34:	4413      	add	r3, r2
 8000a36:	4a0d      	ldr	r2, [pc, #52]	; (8000a6c <ssd1306_DrawPixel+0xa0>)
 8000a38:	5cd3      	ldrb	r3, [r2, r3]
 8000a3a:	b25a      	sxtb	r2, r3
 8000a3c:	79bb      	ldrb	r3, [r7, #6]
 8000a3e:	f003 0307 	and.w	r3, r3, #7
 8000a42:	2101      	movs	r1, #1
 8000a44:	fa01 f303 	lsl.w	r3, r1, r3
 8000a48:	b25b      	sxtb	r3, r3
 8000a4a:	43db      	mvns	r3, r3
 8000a4c:	b25b      	sxtb	r3, r3
 8000a4e:	4013      	ands	r3, r2
 8000a50:	b259      	sxtb	r1, r3
 8000a52:	79fa      	ldrb	r2, [r7, #7]
 8000a54:	4603      	mov	r3, r0
 8000a56:	01db      	lsls	r3, r3, #7
 8000a58:	4413      	add	r3, r2
 8000a5a:	b2c9      	uxtb	r1, r1
 8000a5c:	4a03      	ldr	r2, [pc, #12]	; (8000a6c <ssd1306_DrawPixel+0xa0>)
 8000a5e:	54d1      	strb	r1, [r2, r3]
 8000a60:	e000      	b.n	8000a64 <ssd1306_DrawPixel+0x98>
        return;
 8000a62:	bf00      	nop
    }
}
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	200001a0 	.word	0x200001a0

08000a70 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b089      	sub	sp, #36	; 0x24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4604      	mov	r4, r0
 8000a78:	1d38      	adds	r0, r7, #4
 8000a7a:	e880 0006 	stmia.w	r0, {r1, r2}
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4623      	mov	r3, r4
 8000a82:	73fb      	strb	r3, [r7, #15]
 8000a84:	4613      	mov	r3, r2
 8000a86:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
 8000a8a:	2b1f      	cmp	r3, #31
 8000a8c:	d902      	bls.n	8000a94 <ssd1306_WriteChar+0x24>
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
 8000a90:	2b7e      	cmp	r3, #126	; 0x7e
 8000a92:	d901      	bls.n	8000a98 <ssd1306_WriteChar+0x28>
        return 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	e06d      	b.n	8000b74 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000a98:	4b38      	ldr	r3, [pc, #224]	; (8000b7c <ssd1306_WriteChar+0x10c>)
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	793b      	ldrb	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	2b80      	cmp	r3, #128	; 0x80
 8000aa4:	dc06      	bgt.n	8000ab4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000aa6:	4b35      	ldr	r3, [pc, #212]	; (8000b7c <ssd1306_WriteChar+0x10c>)
 8000aa8:	885b      	ldrh	r3, [r3, #2]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	797b      	ldrb	r3, [r7, #5]
 8000aae:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000ab0:	2b40      	cmp	r3, #64	; 0x40
 8000ab2:	dd01      	ble.n	8000ab8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	e05d      	b.n	8000b74 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
 8000abc:	e04c      	b.n	8000b58 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000abe:	68ba      	ldr	r2, [r7, #8]
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	3b20      	subs	r3, #32
 8000ac4:	7979      	ldrb	r1, [r7, #5]
 8000ac6:	fb01 f303 	mul.w	r3, r1, r3
 8000aca:	4619      	mov	r1, r3
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	440b      	add	r3, r1
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	4413      	add	r3, r2
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61bb      	str	r3, [r7, #24]
 8000adc:	e034      	b.n	8000b48 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000ade:	697a      	ldr	r2, [r7, #20]
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d012      	beq.n	8000b14 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000aee:	4b23      	ldr	r3, [pc, #140]	; (8000b7c <ssd1306_WriteChar+0x10c>)
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	4413      	add	r3, r2
 8000afa:	b2d8      	uxtb	r0, r3
 8000afc:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <ssd1306_WriteChar+0x10c>)
 8000afe:	885b      	ldrh	r3, [r3, #2]
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	4413      	add	r3, r2
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	7bba      	ldrb	r2, [r7, #14]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f7ff ff5d 	bl	80009cc <ssd1306_DrawPixel>
 8000b12:	e016      	b.n	8000b42 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000b14:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <ssd1306_WriteChar+0x10c>)
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	4413      	add	r3, r2
 8000b20:	b2d8      	uxtb	r0, r3
 8000b22:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <ssd1306_WriteChar+0x10c>)
 8000b24:	885b      	ldrh	r3, [r3, #2]
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	4413      	add	r3, r2
 8000b2e:	b2d9      	uxtb	r1, r3
 8000b30:	7bbb      	ldrb	r3, [r7, #14]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	bf0c      	ite	eq
 8000b36:	2301      	moveq	r3, #1
 8000b38:	2300      	movne	r3, #0
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	f7ff ff45 	bl	80009cc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	3301      	adds	r3, #1
 8000b46:	61bb      	str	r3, [r7, #24]
 8000b48:	793b      	ldrb	r3, [r7, #4]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d3c5      	bcc.n	8000ade <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3301      	adds	r3, #1
 8000b56:	61fb      	str	r3, [r7, #28]
 8000b58:	797b      	ldrb	r3, [r7, #5]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d3ad      	bcc.n	8000abe <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <ssd1306_WriteChar+0x10c>)
 8000b64:	881a      	ldrh	r2, [r3, #0]
 8000b66:	793b      	ldrb	r3, [r7, #4]
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	4413      	add	r3, r2
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <ssd1306_WriteChar+0x10c>)
 8000b70:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3724      	adds	r7, #36	; 0x24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd90      	pop	{r4, r7, pc}
 8000b7c:	200005a0 	.word	0x200005a0

08000b80 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	1d38      	adds	r0, r7, #4
 8000b8a:	e880 0006 	stmia.w	r0, {r1, r2}
 8000b8e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8000b90:	e012      	b.n	8000bb8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	7818      	ldrb	r0, [r3, #0]
 8000b96:	78fb      	ldrb	r3, [r7, #3]
 8000b98:	1d3a      	adds	r2, r7, #4
 8000b9a:	ca06      	ldmia	r2, {r1, r2}
 8000b9c:	f7ff ff68 	bl	8000a70 <ssd1306_WriteChar>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d002      	beq.n	8000bb2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	e008      	b.n	8000bc4 <ssd1306_WriteString+0x44>
        }
        str++;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d1e8      	bne.n	8000b92 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	781b      	ldrb	r3, [r3, #0]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	460a      	mov	r2, r1
 8000bd6:	71fb      	strb	r3, [r7, #7]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <ssd1306_SetCursor+0x2c>)
 8000be2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000be4:	79bb      	ldrb	r3, [r7, #6]
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <ssd1306_SetCursor+0x2c>)
 8000bea:	805a      	strh	r2, [r3, #2]
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	200005a0 	.word	0x200005a0

08000bfc <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000bfc:	b590      	push	{r4, r7, lr}
 8000bfe:	b089      	sub	sp, #36	; 0x24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4604      	mov	r4, r0
 8000c04:	4608      	mov	r0, r1
 8000c06:	4611      	mov	r1, r2
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4623      	mov	r3, r4
 8000c0c:	71fb      	strb	r3, [r7, #7]
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71bb      	strb	r3, [r7, #6]
 8000c12:	460b      	mov	r3, r1
 8000c14:	717b      	strb	r3, [r7, #5]
 8000c16:	4613      	mov	r3, r2
 8000c18:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8000c1a:	797a      	ldrb	r2, [r7, #5]
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	bfb8      	it	lt
 8000c24:	425b      	neglt	r3, r3
 8000c26:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8000c28:	793a      	ldrb	r2, [r7, #4]
 8000c2a:	79bb      	ldrb	r3, [r7, #6]
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	bfb8      	it	lt
 8000c32:	425b      	neglt	r3, r3
 8000c34:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8000c36:	79fa      	ldrb	r2, [r7, #7]
 8000c38:	797b      	ldrb	r3, [r7, #5]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d201      	bcs.n	8000c42 <ssd1306_Line+0x46>
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e001      	b.n	8000c46 <ssd1306_Line+0x4a>
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
 8000c46:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8000c48:	79ba      	ldrb	r2, [r7, #6]
 8000c4a:	793b      	ldrb	r3, [r7, #4]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d201      	bcs.n	8000c54 <ssd1306_Line+0x58>
 8000c50:	2301      	movs	r3, #1
 8000c52:	e001      	b.n	8000c58 <ssd1306_Line+0x5c>
 8000c54:	f04f 33ff 	mov.w	r3, #4294967295
 8000c58:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	1ad3      	subs	r3, r2, r3
 8000c60:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8000c62:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000c66:	7939      	ldrb	r1, [r7, #4]
 8000c68:	797b      	ldrb	r3, [r7, #5]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff feae 	bl	80009cc <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8000c70:	e024      	b.n	8000cbc <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8000c72:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000c76:	79b9      	ldrb	r1, [r7, #6]
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fea6 	bl	80009cc <ssd1306_DrawPixel>
        error2 = error * 2;
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	425b      	negs	r3, r3
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	dd08      	ble.n	8000ca2 <ssd1306_Line+0xa6>
            error -= deltaY;
 8000c90:	69fa      	ldr	r2, [r7, #28]
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	da08      	bge.n	8000cbc <ssd1306_Line+0xc0>
            error += deltaX;
 8000caa:	69fa      	ldr	r2, [r7, #28]
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	4413      	add	r3, r2
 8000cb0:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	79bb      	ldrb	r3, [r7, #6]
 8000cb8:	4413      	add	r3, r2
 8000cba:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8000cbc:	79fa      	ldrb	r2, [r7, #7]
 8000cbe:	797b      	ldrb	r3, [r7, #5]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d1d6      	bne.n	8000c72 <ssd1306_Line+0x76>
 8000cc4:	79ba      	ldrb	r2, [r7, #6]
 8000cc6:	793b      	ldrb	r3, [r7, #4]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d1d2      	bne.n	8000c72 <ssd1306_Line+0x76>
        }
    }
    return;
 8000ccc:	bf00      	nop
}
 8000cce:	3724      	adds	r7, #36	; 0x24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd90      	pop	{r4, r7, pc}

08000cd4 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000cd4:	b590      	push	{r4, r7, lr}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af02      	add	r7, sp, #8
 8000cda:	4604      	mov	r4, r0
 8000cdc:	4608      	mov	r0, r1
 8000cde:	4611      	mov	r1, r2
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4623      	mov	r3, r4
 8000ce4:	71fb      	strb	r3, [r7, #7]
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71bb      	strb	r3, [r7, #6]
 8000cea:	460b      	mov	r3, r1
 8000cec:	717b      	strb	r3, [r7, #5]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8000cf2:	79bc      	ldrb	r4, [r7, #6]
 8000cf4:	797a      	ldrb	r2, [r7, #5]
 8000cf6:	79b9      	ldrb	r1, [r7, #6]
 8000cf8:	79f8      	ldrb	r0, [r7, #7]
 8000cfa:	7e3b      	ldrb	r3, [r7, #24]
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	4623      	mov	r3, r4
 8000d00:	f7ff ff7c 	bl	8000bfc <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8000d04:	793c      	ldrb	r4, [r7, #4]
 8000d06:	797a      	ldrb	r2, [r7, #5]
 8000d08:	79b9      	ldrb	r1, [r7, #6]
 8000d0a:	7978      	ldrb	r0, [r7, #5]
 8000d0c:	7e3b      	ldrb	r3, [r7, #24]
 8000d0e:	9300      	str	r3, [sp, #0]
 8000d10:	4623      	mov	r3, r4
 8000d12:	f7ff ff73 	bl	8000bfc <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8000d16:	793c      	ldrb	r4, [r7, #4]
 8000d18:	79fa      	ldrb	r2, [r7, #7]
 8000d1a:	7939      	ldrb	r1, [r7, #4]
 8000d1c:	7978      	ldrb	r0, [r7, #5]
 8000d1e:	7e3b      	ldrb	r3, [r7, #24]
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	4623      	mov	r3, r4
 8000d24:	f7ff ff6a 	bl	8000bfc <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8000d28:	79bc      	ldrb	r4, [r7, #6]
 8000d2a:	79fa      	ldrb	r2, [r7, #7]
 8000d2c:	7939      	ldrb	r1, [r7, #4]
 8000d2e:	79f8      	ldrb	r0, [r7, #7]
 8000d30:	7e3b      	ldrb	r3, [r7, #24]
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	4623      	mov	r3, r4
 8000d36:	f7ff ff61 	bl	8000bfc <ssd1306_Line>

    return;
 8000d3a:	bf00      	nop
}
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd90      	pop	{r4, r7, pc}

08000d42 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000d42:	b590      	push	{r4, r7, lr}
 8000d44:	b085      	sub	sp, #20
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	4604      	mov	r4, r0
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	461a      	mov	r2, r3
 8000d50:	4623      	mov	r3, r4
 8000d52:	71fb      	strb	r3, [r7, #7]
 8000d54:	4603      	mov	r3, r0
 8000d56:	71bb      	strb	r3, [r7, #6]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	717b      	strb	r3, [r7, #5]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8000d60:	79fa      	ldrb	r2, [r7, #7]
 8000d62:	797b      	ldrb	r3, [r7, #5]
 8000d64:	4293      	cmp	r3, r2
 8000d66:	bf28      	it	cs
 8000d68:	4613      	movcs	r3, r2
 8000d6a:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8000d6c:	797a      	ldrb	r2, [r7, #5]
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	4293      	cmp	r3, r2
 8000d72:	bf38      	it	cc
 8000d74:	4613      	movcc	r3, r2
 8000d76:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8000d78:	79ba      	ldrb	r2, [r7, #6]
 8000d7a:	793b      	ldrb	r3, [r7, #4]
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	bf28      	it	cs
 8000d80:	4613      	movcs	r3, r2
 8000d82:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8000d84:	793a      	ldrb	r2, [r7, #4]
 8000d86:	79bb      	ldrb	r3, [r7, #6]
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	bf38      	it	cc
 8000d8c:	4613      	movcc	r3, r2
 8000d8e:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8000d90:	7afb      	ldrb	r3, [r7, #11]
 8000d92:	73fb      	strb	r3, [r7, #15]
 8000d94:	e017      	b.n	8000dc6 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8000d96:	7b7b      	ldrb	r3, [r7, #13]
 8000d98:	73bb      	strb	r3, [r7, #14]
 8000d9a:	e009      	b.n	8000db0 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8000d9c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000da0:	7bf9      	ldrb	r1, [r7, #15]
 8000da2:	7bbb      	ldrb	r3, [r7, #14]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fe11 	bl	80009cc <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8000daa:	7bbb      	ldrb	r3, [r7, #14]
 8000dac:	3301      	adds	r3, #1
 8000dae:	73bb      	strb	r3, [r7, #14]
 8000db0:	7bba      	ldrb	r2, [r7, #14]
 8000db2:	7b3b      	ldrb	r3, [r7, #12]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d803      	bhi.n	8000dc0 <ssd1306_FillRectangle+0x7e>
 8000db8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	daed      	bge.n	8000d9c <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	73fb      	strb	r3, [r7, #15]
 8000dc6:	7bfa      	ldrb	r2, [r7, #15]
 8000dc8:	7abb      	ldrb	r3, [r7, #10]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d803      	bhi.n	8000dd6 <ssd1306_FillRectangle+0x94>
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	2b3f      	cmp	r3, #63	; 0x3f
 8000dd2:	d9e0      	bls.n	8000d96 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8000dd4:	bf00      	nop
 8000dd6:	bf00      	nop
}
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd90      	pop	{r4, r7, pc}

08000dde <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b084      	sub	sp, #16
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000de8:	2381      	movs	r3, #129	; 0x81
 8000dea:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fd06 	bl	8000800 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fd02 	bl	8000800 <ssd1306_WriteCommand>
}
 8000dfc:	bf00      	nop
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d005      	beq.n	8000e20 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000e14:	23af      	movs	r3, #175	; 0xaf
 8000e16:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <ssd1306_SetDisplayOn+0x38>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	715a      	strb	r2, [r3, #5]
 8000e1e:	e004      	b.n	8000e2a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000e20:	23ae      	movs	r3, #174	; 0xae
 8000e22:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <ssd1306_SetDisplayOn+0x38>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fce7 	bl	8000800 <ssd1306_WriteCommand>
}
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200005a0 	.word	0x200005a0

08000e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <HAL_Init+0x28>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a07      	ldr	r2, [pc, #28]	; (8000e68 <HAL_Init+0x28>)
 8000e4a:	f043 0310 	orr.w	r3, r3, #16
 8000e4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e50:	2003      	movs	r0, #3
 8000e52:	f000 fde3 	bl	8001a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e56:	200f      	movs	r0, #15
 8000e58:	f000 f808 	bl	8000e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e5c:	f7ff fb4c 	bl	80004f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40022000 	.word	0x40022000

08000e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_InitTick+0x54>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <HAL_InitTick+0x58>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 fdfb 	bl	8001a86 <HAL_SYSTICK_Config>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e00e      	b.n	8000eb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b0f      	cmp	r3, #15
 8000e9e:	d80a      	bhi.n	8000eb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	f000 fdc3 	bl	8001a32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eac:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <HAL_InitTick+0x5c>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e000      	b.n	8000eb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	20000018 	.word	0x20000018
 8000ec8:	20000014 	.word	0x20000014

08000ecc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <HAL_IncTick+0x1c>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b05      	ldr	r3, [pc, #20]	; (8000eec <HAL_IncTick+0x20>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	4a03      	ldr	r2, [pc, #12]	; (8000eec <HAL_IncTick+0x20>)
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr
 8000ee8:	20000018 	.word	0x20000018
 8000eec:	200005a8 	.word	0x200005a8

08000ef0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef4:	4b02      	ldr	r3, [pc, #8]	; (8000f00 <HAL_GetTick+0x10>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	200005a8 	.word	0x200005a8

08000f04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f0c:	f7ff fff0 	bl	8000ef0 <HAL_GetTick>
 8000f10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f1c:	d005      	beq.n	8000f2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <HAL_Delay+0x44>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	461a      	mov	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4413      	add	r3, r2
 8000f28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f2a:	bf00      	nop
 8000f2c:	f7ff ffe0 	bl	8000ef0 <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d8f7      	bhi.n	8000f2c <HAL_Delay+0x28>
  {
  }
}
 8000f3c:	bf00      	nop
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000018 	.word	0x20000018

08000f4c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f54:	2300      	movs	r3, #0
 8000f56:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e0be      	b.n	80010ec <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d109      	bne.n	8000f90 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff fae6 	bl	800055c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f000 fbc7 	bl	8001724 <ADC_ConversionStop_Disable>
 8000f96:	4603      	mov	r3, r0
 8000f98:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f9e:	f003 0310 	and.w	r3, r3, #16
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f040 8099 	bne.w	80010da <HAL_ADC_Init+0x18e>
 8000fa8:	7dfb      	ldrb	r3, [r7, #23]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f040 8095 	bne.w	80010da <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fb8:	f023 0302 	bic.w	r3, r3, #2
 8000fbc:	f043 0202 	orr.w	r2, r3, #2
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fcc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	7b1b      	ldrb	r3, [r3, #12]
 8000fd2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000fd4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fe4:	d003      	beq.n	8000fee <HAL_ADC_Init+0xa2>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d102      	bne.n	8000ff4 <HAL_ADC_Init+0xa8>
 8000fee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ff2:	e000      	b.n	8000ff6 <HAL_ADC_Init+0xaa>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	7d1b      	ldrb	r3, [r3, #20]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d119      	bne.n	8001038 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	7b1b      	ldrb	r3, [r3, #12]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d109      	bne.n	8001020 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	3b01      	subs	r3, #1
 8001012:	035a      	lsls	r2, r3, #13
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	e00b      	b.n	8001038 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001024:	f043 0220 	orr.w	r2, r3, #32
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001030:	f043 0201 	orr.w	r2, r3, #1
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	430a      	orrs	r2, r1
 800104a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <HAL_ADC_Init+0x1a8>)
 8001054:	4013      	ands	r3, r2
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	6812      	ldr	r2, [r2, #0]
 800105a:	68b9      	ldr	r1, [r7, #8]
 800105c:	430b      	orrs	r3, r1
 800105e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001068:	d003      	beq.n	8001072 <HAL_ADC_Init+0x126>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d104      	bne.n	800107c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	3b01      	subs	r3, #1
 8001078:	051b      	lsls	r3, r3, #20
 800107a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001082:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	430a      	orrs	r2, r1
 800108e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <HAL_ADC_Init+0x1ac>)
 8001098:	4013      	ands	r3, r2
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	429a      	cmp	r2, r3
 800109e:	d10b      	bne.n	80010b8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010aa:	f023 0303 	bic.w	r3, r3, #3
 80010ae:	f043 0201 	orr.w	r2, r3, #1
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010b6:	e018      	b.n	80010ea <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010bc:	f023 0312 	bic.w	r3, r3, #18
 80010c0:	f043 0210 	orr.w	r2, r3, #16
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010cc:	f043 0201 	orr.w	r2, r3, #1
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010d8:	e007      	b.n	80010ea <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010de:	f043 0210 	orr.w	r2, r3, #16
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	ffe1f7fd 	.word	0xffe1f7fd
 80010f8:	ff1f0efe 	.word	0xff1f0efe

080010fc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001108:	2300      	movs	r3, #0
 800110a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a64      	ldr	r2, [pc, #400]	; (80012a4 <HAL_ADC_Start_DMA+0x1a8>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d004      	beq.n	8001120 <HAL_ADC_Start_DMA+0x24>
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a63      	ldr	r2, [pc, #396]	; (80012a8 <HAL_ADC_Start_DMA+0x1ac>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d106      	bne.n	800112e <HAL_ADC_Start_DMA+0x32>
 8001120:	4b60      	ldr	r3, [pc, #384]	; (80012a4 <HAL_ADC_Start_DMA+0x1a8>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001128:	2b00      	cmp	r3, #0
 800112a:	f040 80b3 	bne.w	8001294 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001134:	2b01      	cmp	r3, #1
 8001136:	d101      	bne.n	800113c <HAL_ADC_Start_DMA+0x40>
 8001138:	2302      	movs	r3, #2
 800113a:	e0ae      	b.n	800129a <HAL_ADC_Start_DMA+0x19e>
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2201      	movs	r2, #1
 8001140:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	f000 fa93 	bl	8001670 <ADC_Enable>
 800114a:	4603      	mov	r3, r0
 800114c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800114e:	7dfb      	ldrb	r3, [r7, #23]
 8001150:	2b00      	cmp	r3, #0
 8001152:	f040 809a 	bne.w	800128a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800115e:	f023 0301 	bic.w	r3, r3, #1
 8001162:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a4e      	ldr	r2, [pc, #312]	; (80012a8 <HAL_ADC_Start_DMA+0x1ac>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d105      	bne.n	8001180 <HAL_ADC_Start_DMA+0x84>
 8001174:	4b4b      	ldr	r3, [pc, #300]	; (80012a4 <HAL_ADC_Start_DMA+0x1a8>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d115      	bne.n	80011ac <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001184:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001196:	2b00      	cmp	r3, #0
 8001198:	d026      	beq.n	80011e8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800119e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011aa:	e01d      	b.n	80011e8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a39      	ldr	r2, [pc, #228]	; (80012a4 <HAL_ADC_Start_DMA+0x1a8>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d004      	beq.n	80011cc <HAL_ADC_Start_DMA+0xd0>
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a38      	ldr	r2, [pc, #224]	; (80012a8 <HAL_ADC_Start_DMA+0x1ac>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d10d      	bne.n	80011e8 <HAL_ADC_Start_DMA+0xec>
 80011cc:	4b35      	ldr	r3, [pc, #212]	; (80012a4 <HAL_ADC_Start_DMA+0x1a8>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d007      	beq.n	80011e8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d006      	beq.n	8001202 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f8:	f023 0206 	bic.w	r2, r3, #6
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8001200:	e002      	b.n	8001208 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2200      	movs	r2, #0
 8001206:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	4a25      	ldr	r2, [pc, #148]	; (80012ac <HAL_ADC_Start_DMA+0x1b0>)
 8001216:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6a1b      	ldr	r3, [r3, #32]
 800121c:	4a24      	ldr	r2, [pc, #144]	; (80012b0 <HAL_ADC_Start_DMA+0x1b4>)
 800121e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	4a23      	ldr	r2, [pc, #140]	; (80012b4 <HAL_ADC_Start_DMA+0x1b8>)
 8001226:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f06f 0202 	mvn.w	r2, #2
 8001230:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	689a      	ldr	r2, [r3, #8]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001240:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6a18      	ldr	r0, [r3, #32]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	334c      	adds	r3, #76	; 0x4c
 800124c:	4619      	mov	r1, r3
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f000 fc7f 	bl	8001b54 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001260:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001264:	d108      	bne.n	8001278 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001274:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001276:	e00f      	b.n	8001298 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	689a      	ldr	r2, [r3, #8]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001286:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001288:	e006      	b.n	8001298 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001292:	e001      	b.n	8001298 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001298:	7dfb      	ldrb	r3, [r7, #23]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40012400 	.word	0x40012400
 80012a8:	40012800 	.word	0x40012800
 80012ac:	080017a7 	.word	0x080017a7
 80012b0:	08001823 	.word	0x08001823
 80012b4:	0800183f 	.word	0x0800183f

080012b8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	f003 0320 	and.w	r3, r3, #32
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d03e      	beq.n	8001358 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d039      	beq.n	8001358 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e8:	f003 0310 	and.w	r3, r3, #16
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d105      	bne.n	80012fc <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001306:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800130a:	d11d      	bne.n	8001348 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001310:	2b00      	cmp	r3, #0
 8001312:	d119      	bne.n	8001348 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0220 	bic.w	r2, r2, #32
 8001322:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001328:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001334:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d105      	bne.n	8001348 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001340:	f043 0201 	orr.w	r2, r3, #1
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 f874 	bl	8001436 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f06f 0212 	mvn.w	r2, #18
 8001356:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800135e:	2b00      	cmp	r3, #0
 8001360:	d04d      	beq.n	80013fe <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	2b00      	cmp	r3, #0
 800136a:	d048      	beq.n	80013fe <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001370:	f003 0310 	and.w	r3, r3, #16
 8001374:	2b00      	cmp	r3, #0
 8001376:	d105      	bne.n	8001384 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800138e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001392:	d012      	beq.n	80013ba <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d125      	bne.n	80013ee <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80013ac:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80013b0:	d11d      	bne.n	80013ee <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d119      	bne.n	80013ee <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013c8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d105      	bne.n	80013ee <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e6:	f043 0201 	orr.w	r2, r3, #1
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 fa3f 	bl	8001872 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f06f 020c 	mvn.w	r2, #12
 80013fc:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001404:	2b00      	cmp	r3, #0
 8001406:	d012      	beq.n	800142e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00d      	beq.n	800142e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001416:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 f81b 	bl	800145a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f06f 0201 	mvn.w	r2, #1
 800142c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800142e:	bf00      	nop
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr

0800145a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
	...

08001480 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001498:	2b01      	cmp	r3, #1
 800149a:	d101      	bne.n	80014a0 <HAL_ADC_ConfigChannel+0x20>
 800149c:	2302      	movs	r3, #2
 800149e:	e0dc      	b.n	800165a <HAL_ADC_ConfigChannel+0x1da>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b06      	cmp	r3, #6
 80014ae:	d81c      	bhi.n	80014ea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	3b05      	subs	r3, #5
 80014c2:	221f      	movs	r2, #31
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	4019      	ands	r1, r3
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	6818      	ldr	r0, [r3, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	3b05      	subs	r3, #5
 80014dc:	fa00 f203 	lsl.w	r2, r0, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	635a      	str	r2, [r3, #52]	; 0x34
 80014e8:	e03c      	b.n	8001564 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b0c      	cmp	r3, #12
 80014f0:	d81c      	bhi.n	800152c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	3b23      	subs	r3, #35	; 0x23
 8001504:	221f      	movs	r2, #31
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	4019      	ands	r1, r3
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	6818      	ldr	r0, [r3, #0]
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	3b23      	subs	r3, #35	; 0x23
 800151e:	fa00 f203 	lsl.w	r2, r0, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	430a      	orrs	r2, r1
 8001528:	631a      	str	r2, [r3, #48]	; 0x30
 800152a:	e01b      	b.n	8001564 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	4613      	mov	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	3b41      	subs	r3, #65	; 0x41
 800153e:	221f      	movs	r2, #31
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	4019      	ands	r1, r3
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	6818      	ldr	r0, [r3, #0]
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	4613      	mov	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	3b41      	subs	r3, #65	; 0x41
 8001558:	fa00 f203 	lsl.w	r2, r0, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	430a      	orrs	r2, r1
 8001562:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b09      	cmp	r3, #9
 800156a:	d91c      	bls.n	80015a6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	68d9      	ldr	r1, [r3, #12]
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	4613      	mov	r3, r2
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	4413      	add	r3, r2
 800157c:	3b1e      	subs	r3, #30
 800157e:	2207      	movs	r2, #7
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	4019      	ands	r1, r3
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	6898      	ldr	r0, [r3, #8]
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4613      	mov	r3, r2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	4413      	add	r3, r2
 8001596:	3b1e      	subs	r3, #30
 8001598:	fa00 f203 	lsl.w	r2, r0, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	e019      	b.n	80015da <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6919      	ldr	r1, [r3, #16]
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4613      	mov	r3, r2
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	4413      	add	r3, r2
 80015b6:	2207      	movs	r2, #7
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	4019      	ands	r1, r3
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	6898      	ldr	r0, [r3, #8]
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4613      	mov	r3, r2
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	fa00 f203 	lsl.w	r2, r0, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2b10      	cmp	r3, #16
 80015e0:	d003      	beq.n	80015ea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015e6:	2b11      	cmp	r3, #17
 80015e8:	d132      	bne.n	8001650 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a1d      	ldr	r2, [pc, #116]	; (8001664 <HAL_ADC_ConfigChannel+0x1e4>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d125      	bne.n	8001640 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d126      	bne.n	8001650 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001610:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b10      	cmp	r3, #16
 8001618:	d11a      	bne.n	8001650 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800161a:	4b13      	ldr	r3, [pc, #76]	; (8001668 <HAL_ADC_ConfigChannel+0x1e8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a13      	ldr	r2, [pc, #76]	; (800166c <HAL_ADC_ConfigChannel+0x1ec>)
 8001620:	fba2 2303 	umull	r2, r3, r2, r3
 8001624:	0c9a      	lsrs	r2, r3, #18
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001630:	e002      	b.n	8001638 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	3b01      	subs	r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f9      	bne.n	8001632 <HAL_ADC_ConfigChannel+0x1b2>
 800163e:	e007      	b.n	8001650 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001644:	f043 0220 	orr.w	r2, r3, #32
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001658:	7bfb      	ldrb	r3, [r7, #15]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	40012400 	.word	0x40012400
 8001668:	20000000 	.word	0x20000000
 800166c:	431bde83 	.word	0x431bde83

08001670 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800167c:	2300      	movs	r3, #0
 800167e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b01      	cmp	r3, #1
 800168c:	d040      	beq.n	8001710 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f042 0201 	orr.w	r2, r2, #1
 800169c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800169e:	4b1f      	ldr	r3, [pc, #124]	; (800171c <ADC_Enable+0xac>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a1f      	ldr	r2, [pc, #124]	; (8001720 <ADC_Enable+0xb0>)
 80016a4:	fba2 2303 	umull	r2, r3, r2, r3
 80016a8:	0c9b      	lsrs	r3, r3, #18
 80016aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80016ac:	e002      	b.n	80016b4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	3b01      	subs	r3, #1
 80016b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f9      	bne.n	80016ae <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016ba:	f7ff fc19 	bl	8000ef0 <HAL_GetTick>
 80016be:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80016c0:	e01f      	b.n	8001702 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016c2:	f7ff fc15 	bl	8000ef0 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d918      	bls.n	8001702 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d011      	beq.n	8001702 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e2:	f043 0210 	orr.w	r2, r3, #16
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ee:	f043 0201 	orr.w	r2, r3, #1
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e007      	b.n	8001712 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	2b01      	cmp	r3, #1
 800170e:	d1d8      	bne.n	80016c2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000000 	.word	0x20000000
 8001720:	431bde83 	.word	0x431bde83

08001724 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b01      	cmp	r3, #1
 800173c:	d12e      	bne.n	800179c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0201 	bic.w	r2, r2, #1
 800174c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800174e:	f7ff fbcf 	bl	8000ef0 <HAL_GetTick>
 8001752:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001754:	e01b      	b.n	800178e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001756:	f7ff fbcb 	bl	8000ef0 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d914      	bls.n	800178e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b01      	cmp	r3, #1
 8001770:	d10d      	bne.n	800178e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001776:	f043 0210 	orr.w	r2, r3, #16
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001782:	f043 0201 	orr.w	r2, r3, #1
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e007      	b.n	800179e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b01      	cmp	r3, #1
 800179a:	d0dc      	beq.n	8001756 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b084      	sub	sp, #16
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d127      	bne.n	8001810 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80017d6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80017da:	d115      	bne.n	8001808 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d111      	bne.n	8001808 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d105      	bne.n	8001808 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001800:	f043 0201 	orr.w	r2, r3, #1
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001808:	68f8      	ldr	r0, [r7, #12]
 800180a:	f7ff fe14 	bl	8001436 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800180e:	e004      	b.n	800181a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	4798      	blx	r3
}
 800181a:	bf00      	nop
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b084      	sub	sp, #16
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f7ff fe09 	bl	8001448 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b084      	sub	sp, #16
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001850:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185c:	f043 0204 	orr.w	r2, r3, #4
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	f7ff fe01 	bl	800146c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800186a:	bf00      	nop
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr

08001884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a0:	4013      	ands	r3, r2
 80018a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b6:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	60d3      	str	r3, [r2, #12]
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d0:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <__NVIC_GetPriorityGrouping+0x18>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	f003 0307 	and.w	r3, r3, #7
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	db0b      	blt.n	8001912 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	f003 021f 	and.w	r2, r3, #31
 8001900:	4906      	ldr	r1, [pc, #24]	; (800191c <__NVIC_EnableIRQ+0x34>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	2001      	movs	r0, #1
 800190a:	fa00 f202 	lsl.w	r2, r0, r2
 800190e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	e000e100 	.word	0xe000e100

08001920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	6039      	str	r1, [r7, #0]
 800192a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	2b00      	cmp	r3, #0
 8001932:	db0a      	blt.n	800194a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	b2da      	uxtb	r2, r3
 8001938:	490c      	ldr	r1, [pc, #48]	; (800196c <__NVIC_SetPriority+0x4c>)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	0112      	lsls	r2, r2, #4
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	440b      	add	r3, r1
 8001944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001948:	e00a      	b.n	8001960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	b2da      	uxtb	r2, r3
 800194e:	4908      	ldr	r1, [pc, #32]	; (8001970 <__NVIC_SetPriority+0x50>)
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	3b04      	subs	r3, #4
 8001958:	0112      	lsls	r2, r2, #4
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	440b      	add	r3, r1
 800195e:	761a      	strb	r2, [r3, #24]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000e100 	.word	0xe000e100
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001974:	b480      	push	{r7}
 8001976:	b089      	sub	sp, #36	; 0x24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f1c3 0307 	rsb	r3, r3, #7
 800198e:	2b04      	cmp	r3, #4
 8001990:	bf28      	it	cs
 8001992:	2304      	movcs	r3, #4
 8001994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3304      	adds	r3, #4
 800199a:	2b06      	cmp	r3, #6
 800199c:	d902      	bls.n	80019a4 <NVIC_EncodePriority+0x30>
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3b03      	subs	r3, #3
 80019a2:	e000      	b.n	80019a6 <NVIC_EncodePriority+0x32>
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43da      	mvns	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	401a      	ands	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019bc:	f04f 31ff 	mov.w	r1, #4294967295
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	43d9      	mvns	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	4313      	orrs	r3, r2
         );
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3724      	adds	r7, #36	; 0x24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e8:	d301      	bcc.n	80019ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ea:	2301      	movs	r3, #1
 80019ec:	e00f      	b.n	8001a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ee:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <SysTick_Config+0x40>)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019f6:	210f      	movs	r1, #15
 80019f8:	f04f 30ff 	mov.w	r0, #4294967295
 80019fc:	f7ff ff90 	bl	8001920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a00:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <SysTick_Config+0x40>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a06:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <SysTick_Config+0x40>)
 8001a08:	2207      	movs	r2, #7
 8001a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	e000e010 	.word	0xe000e010

08001a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ff2d 	bl	8001884 <__NVIC_SetPriorityGrouping>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b086      	sub	sp, #24
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
 8001a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a44:	f7ff ff42 	bl	80018cc <__NVIC_GetPriorityGrouping>
 8001a48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	68b9      	ldr	r1, [r7, #8]
 8001a4e:	6978      	ldr	r0, [r7, #20]
 8001a50:	f7ff ff90 	bl	8001974 <NVIC_EncodePriority>
 8001a54:	4602      	mov	r2, r0
 8001a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff5f 	bl	8001920 <__NVIC_SetPriority>
}
 8001a62:	bf00      	nop
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	4603      	mov	r3, r0
 8001a72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff35 	bl	80018e8 <__NVIC_EnableIRQ>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff ffa2 	bl	80019d8 <SysTick_Config>
 8001a94:	4603      	mov	r3, r0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e043      	b.n	8001b3e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <HAL_DMA_Init+0xa8>)
 8001abe:	4413      	add	r3, r2
 8001ac0:	4a22      	ldr	r2, [pc, #136]	; (8001b4c <HAL_DMA_Init+0xac>)
 8001ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac6:	091b      	lsrs	r3, r3, #4
 8001ac8:	009a      	lsls	r2, r3, #2
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a1f      	ldr	r2, [pc, #124]	; (8001b50 <HAL_DMA_Init+0xb0>)
 8001ad2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001aea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001aee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001af8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	bffdfff8 	.word	0xbffdfff8
 8001b4c:	cccccccd 	.word	0xcccccccd
 8001b50:	40020000 	.word	0x40020000

08001b54 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
 8001b60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b62:	2300      	movs	r3, #0
 8001b64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d101      	bne.n	8001b74 <HAL_DMA_Start_IT+0x20>
 8001b70:	2302      	movs	r3, #2
 8001b72:	e04b      	b.n	8001c0c <HAL_DMA_Start_IT+0xb8>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d13a      	bne.n	8001bfe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2200      	movs	r2, #0
 8001b94:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0201 	bic.w	r2, r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	68b9      	ldr	r1, [r7, #8]
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f000 f937 	bl	8001e20 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d008      	beq.n	8001bcc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f042 020e 	orr.w	r2, r2, #14
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	e00f      	b.n	8001bec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0204 	bic.w	r2, r2, #4
 8001bda:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 020a 	orr.w	r2, r2, #10
 8001bea:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0201 	orr.w	r2, r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	e005      	b.n	8001c0a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c06:	2302      	movs	r3, #2
 8001c08:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	2204      	movs	r2, #4
 8001c32:	409a      	lsls	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4013      	ands	r3, r2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d04f      	beq.n	8001cdc <HAL_DMA_IRQHandler+0xc8>
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	f003 0304 	and.w	r3, r3, #4
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d04a      	beq.n	8001cdc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0320 	and.w	r3, r3, #32
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d107      	bne.n	8001c64 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0204 	bic.w	r2, r2, #4
 8001c62:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a66      	ldr	r2, [pc, #408]	; (8001e04 <HAL_DMA_IRQHandler+0x1f0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d029      	beq.n	8001cc2 <HAL_DMA_IRQHandler+0xae>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a65      	ldr	r2, [pc, #404]	; (8001e08 <HAL_DMA_IRQHandler+0x1f4>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d022      	beq.n	8001cbe <HAL_DMA_IRQHandler+0xaa>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a63      	ldr	r2, [pc, #396]	; (8001e0c <HAL_DMA_IRQHandler+0x1f8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d01a      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0xa4>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a62      	ldr	r2, [pc, #392]	; (8001e10 <HAL_DMA_IRQHandler+0x1fc>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d012      	beq.n	8001cb2 <HAL_DMA_IRQHandler+0x9e>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a60      	ldr	r2, [pc, #384]	; (8001e14 <HAL_DMA_IRQHandler+0x200>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d00a      	beq.n	8001cac <HAL_DMA_IRQHandler+0x98>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a5f      	ldr	r2, [pc, #380]	; (8001e18 <HAL_DMA_IRQHandler+0x204>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d102      	bne.n	8001ca6 <HAL_DMA_IRQHandler+0x92>
 8001ca0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ca4:	e00e      	b.n	8001cc4 <HAL_DMA_IRQHandler+0xb0>
 8001ca6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001caa:	e00b      	b.n	8001cc4 <HAL_DMA_IRQHandler+0xb0>
 8001cac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001cb0:	e008      	b.n	8001cc4 <HAL_DMA_IRQHandler+0xb0>
 8001cb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cb6:	e005      	b.n	8001cc4 <HAL_DMA_IRQHandler+0xb0>
 8001cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cbc:	e002      	b.n	8001cc4 <HAL_DMA_IRQHandler+0xb0>
 8001cbe:	2340      	movs	r3, #64	; 0x40
 8001cc0:	e000      	b.n	8001cc4 <HAL_DMA_IRQHandler+0xb0>
 8001cc2:	2304      	movs	r3, #4
 8001cc4:	4a55      	ldr	r2, [pc, #340]	; (8001e1c <HAL_DMA_IRQHandler+0x208>)
 8001cc6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 8094 	beq.w	8001dfa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001cda:	e08e      	b.n	8001dfa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d056      	beq.n	8001d9a <HAL_DMA_IRQHandler+0x186>
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d051      	beq.n	8001d9a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0320 	and.w	r3, r3, #32
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10b      	bne.n	8001d1c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 020a 	bic.w	r2, r2, #10
 8001d12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a38      	ldr	r2, [pc, #224]	; (8001e04 <HAL_DMA_IRQHandler+0x1f0>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d029      	beq.n	8001d7a <HAL_DMA_IRQHandler+0x166>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a37      	ldr	r2, [pc, #220]	; (8001e08 <HAL_DMA_IRQHandler+0x1f4>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d022      	beq.n	8001d76 <HAL_DMA_IRQHandler+0x162>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a35      	ldr	r2, [pc, #212]	; (8001e0c <HAL_DMA_IRQHandler+0x1f8>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d01a      	beq.n	8001d70 <HAL_DMA_IRQHandler+0x15c>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a34      	ldr	r2, [pc, #208]	; (8001e10 <HAL_DMA_IRQHandler+0x1fc>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d012      	beq.n	8001d6a <HAL_DMA_IRQHandler+0x156>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a32      	ldr	r2, [pc, #200]	; (8001e14 <HAL_DMA_IRQHandler+0x200>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d00a      	beq.n	8001d64 <HAL_DMA_IRQHandler+0x150>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a31      	ldr	r2, [pc, #196]	; (8001e18 <HAL_DMA_IRQHandler+0x204>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d102      	bne.n	8001d5e <HAL_DMA_IRQHandler+0x14a>
 8001d58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d5c:	e00e      	b.n	8001d7c <HAL_DMA_IRQHandler+0x168>
 8001d5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d62:	e00b      	b.n	8001d7c <HAL_DMA_IRQHandler+0x168>
 8001d64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d68:	e008      	b.n	8001d7c <HAL_DMA_IRQHandler+0x168>
 8001d6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d6e:	e005      	b.n	8001d7c <HAL_DMA_IRQHandler+0x168>
 8001d70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d74:	e002      	b.n	8001d7c <HAL_DMA_IRQHandler+0x168>
 8001d76:	2320      	movs	r3, #32
 8001d78:	e000      	b.n	8001d7c <HAL_DMA_IRQHandler+0x168>
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	4a27      	ldr	r2, [pc, #156]	; (8001e1c <HAL_DMA_IRQHandler+0x208>)
 8001d7e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d034      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d98:	e02f      	b.n	8001dfa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	2208      	movs	r2, #8
 8001da0:	409a      	lsls	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4013      	ands	r3, r2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d028      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x1e8>
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d023      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 020e 	bic.w	r2, r2, #14
 8001dc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dcc:	2101      	movs	r1, #1
 8001dce:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d004      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	4798      	blx	r3
    }
  }
  return;
 8001dfa:	bf00      	nop
 8001dfc:	bf00      	nop
}
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40020008 	.word	0x40020008
 8001e08:	4002001c 	.word	0x4002001c
 8001e0c:	40020030 	.word	0x40020030
 8001e10:	40020044 	.word	0x40020044
 8001e14:	40020058 	.word	0x40020058
 8001e18:	4002006c 	.word	0x4002006c
 8001e1c:	40020000 	.word	0x40020000

08001e20 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e36:	2101      	movs	r1, #1
 8001e38:	fa01 f202 	lsl.w	r2, r1, r2
 8001e3c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b10      	cmp	r3, #16
 8001e4c:	d108      	bne.n	8001e60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e5e:	e007      	b.n	8001e70 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	60da      	str	r2, [r3, #12]
}
 8001e70:	bf00      	nop
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr
	...

08001e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b08b      	sub	sp, #44	; 0x2c
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e86:	2300      	movs	r3, #0
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e8e:	e169      	b.n	8002164 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e90:	2201      	movs	r2, #1
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	69fa      	ldr	r2, [r7, #28]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	f040 8158 	bne.w	800215e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	4a9a      	ldr	r2, [pc, #616]	; (800211c <HAL_GPIO_Init+0x2a0>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d05e      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001eb8:	4a98      	ldr	r2, [pc, #608]	; (800211c <HAL_GPIO_Init+0x2a0>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d875      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001ebe:	4a98      	ldr	r2, [pc, #608]	; (8002120 <HAL_GPIO_Init+0x2a4>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d058      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001ec4:	4a96      	ldr	r2, [pc, #600]	; (8002120 <HAL_GPIO_Init+0x2a4>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d86f      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001eca:	4a96      	ldr	r2, [pc, #600]	; (8002124 <HAL_GPIO_Init+0x2a8>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d052      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001ed0:	4a94      	ldr	r2, [pc, #592]	; (8002124 <HAL_GPIO_Init+0x2a8>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d869      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001ed6:	4a94      	ldr	r2, [pc, #592]	; (8002128 <HAL_GPIO_Init+0x2ac>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d04c      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001edc:	4a92      	ldr	r2, [pc, #584]	; (8002128 <HAL_GPIO_Init+0x2ac>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d863      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001ee2:	4a92      	ldr	r2, [pc, #584]	; (800212c <HAL_GPIO_Init+0x2b0>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d046      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001ee8:	4a90      	ldr	r2, [pc, #576]	; (800212c <HAL_GPIO_Init+0x2b0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d85d      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001eee:	2b12      	cmp	r3, #18
 8001ef0:	d82a      	bhi.n	8001f48 <HAL_GPIO_Init+0xcc>
 8001ef2:	2b12      	cmp	r3, #18
 8001ef4:	d859      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001ef6:	a201      	add	r2, pc, #4	; (adr r2, 8001efc <HAL_GPIO_Init+0x80>)
 8001ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efc:	08001f77 	.word	0x08001f77
 8001f00:	08001f51 	.word	0x08001f51
 8001f04:	08001f63 	.word	0x08001f63
 8001f08:	08001fa5 	.word	0x08001fa5
 8001f0c:	08001fab 	.word	0x08001fab
 8001f10:	08001fab 	.word	0x08001fab
 8001f14:	08001fab 	.word	0x08001fab
 8001f18:	08001fab 	.word	0x08001fab
 8001f1c:	08001fab 	.word	0x08001fab
 8001f20:	08001fab 	.word	0x08001fab
 8001f24:	08001fab 	.word	0x08001fab
 8001f28:	08001fab 	.word	0x08001fab
 8001f2c:	08001fab 	.word	0x08001fab
 8001f30:	08001fab 	.word	0x08001fab
 8001f34:	08001fab 	.word	0x08001fab
 8001f38:	08001fab 	.word	0x08001fab
 8001f3c:	08001fab 	.word	0x08001fab
 8001f40:	08001f59 	.word	0x08001f59
 8001f44:	08001f6d 	.word	0x08001f6d
 8001f48:	4a79      	ldr	r2, [pc, #484]	; (8002130 <HAL_GPIO_Init+0x2b4>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d013      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f4e:	e02c      	b.n	8001faa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	623b      	str	r3, [r7, #32]
          break;
 8001f56:	e029      	b.n	8001fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	623b      	str	r3, [r7, #32]
          break;
 8001f60:	e024      	b.n	8001fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	3308      	adds	r3, #8
 8001f68:	623b      	str	r3, [r7, #32]
          break;
 8001f6a:	e01f      	b.n	8001fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	330c      	adds	r3, #12
 8001f72:	623b      	str	r3, [r7, #32]
          break;
 8001f74:	e01a      	b.n	8001fac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d102      	bne.n	8001f84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f7e:	2304      	movs	r3, #4
 8001f80:	623b      	str	r3, [r7, #32]
          break;
 8001f82:	e013      	b.n	8001fac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d105      	bne.n	8001f98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f8c:	2308      	movs	r3, #8
 8001f8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69fa      	ldr	r2, [r7, #28]
 8001f94:	611a      	str	r2, [r3, #16]
          break;
 8001f96:	e009      	b.n	8001fac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f98:	2308      	movs	r3, #8
 8001f9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69fa      	ldr	r2, [r7, #28]
 8001fa0:	615a      	str	r2, [r3, #20]
          break;
 8001fa2:	e003      	b.n	8001fac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	623b      	str	r3, [r7, #32]
          break;
 8001fa8:	e000      	b.n	8001fac <HAL_GPIO_Init+0x130>
          break;
 8001faa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2bff      	cmp	r3, #255	; 0xff
 8001fb0:	d801      	bhi.n	8001fb6 <HAL_GPIO_Init+0x13a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	e001      	b.n	8001fba <HAL_GPIO_Init+0x13e>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	2bff      	cmp	r3, #255	; 0xff
 8001fc0:	d802      	bhi.n	8001fc8 <HAL_GPIO_Init+0x14c>
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	e002      	b.n	8001fce <HAL_GPIO_Init+0x152>
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	3b08      	subs	r3, #8
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	210f      	movs	r1, #15
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	401a      	ands	r2, r3
 8001fe0:	6a39      	ldr	r1, [r7, #32]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 80b1 	beq.w	800215e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ffc:	4b4d      	ldr	r3, [pc, #308]	; (8002134 <HAL_GPIO_Init+0x2b8>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	4a4c      	ldr	r2, [pc, #304]	; (8002134 <HAL_GPIO_Init+0x2b8>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6193      	str	r3, [r2, #24]
 8002008:	4b4a      	ldr	r3, [pc, #296]	; (8002134 <HAL_GPIO_Init+0x2b8>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002014:	4a48      	ldr	r2, [pc, #288]	; (8002138 <HAL_GPIO_Init+0x2bc>)
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	089b      	lsrs	r3, r3, #2
 800201a:	3302      	adds	r3, #2
 800201c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002020:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	220f      	movs	r2, #15
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	4013      	ands	r3, r2
 8002036:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a40      	ldr	r2, [pc, #256]	; (800213c <HAL_GPIO_Init+0x2c0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d013      	beq.n	8002068 <HAL_GPIO_Init+0x1ec>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a3f      	ldr	r2, [pc, #252]	; (8002140 <HAL_GPIO_Init+0x2c4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d00d      	beq.n	8002064 <HAL_GPIO_Init+0x1e8>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a3e      	ldr	r2, [pc, #248]	; (8002144 <HAL_GPIO_Init+0x2c8>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d007      	beq.n	8002060 <HAL_GPIO_Init+0x1e4>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a3d      	ldr	r2, [pc, #244]	; (8002148 <HAL_GPIO_Init+0x2cc>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d101      	bne.n	800205c <HAL_GPIO_Init+0x1e0>
 8002058:	2303      	movs	r3, #3
 800205a:	e006      	b.n	800206a <HAL_GPIO_Init+0x1ee>
 800205c:	2304      	movs	r3, #4
 800205e:	e004      	b.n	800206a <HAL_GPIO_Init+0x1ee>
 8002060:	2302      	movs	r3, #2
 8002062:	e002      	b.n	800206a <HAL_GPIO_Init+0x1ee>
 8002064:	2301      	movs	r3, #1
 8002066:	e000      	b.n	800206a <HAL_GPIO_Init+0x1ee>
 8002068:	2300      	movs	r3, #0
 800206a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800206c:	f002 0203 	and.w	r2, r2, #3
 8002070:	0092      	lsls	r2, r2, #2
 8002072:	4093      	lsls	r3, r2
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800207a:	492f      	ldr	r1, [pc, #188]	; (8002138 <HAL_GPIO_Init+0x2bc>)
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	089b      	lsrs	r3, r3, #2
 8002080:	3302      	adds	r3, #2
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d006      	beq.n	80020a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002094:	4b2d      	ldr	r3, [pc, #180]	; (800214c <HAL_GPIO_Init+0x2d0>)
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	492c      	ldr	r1, [pc, #176]	; (800214c <HAL_GPIO_Init+0x2d0>)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	608b      	str	r3, [r1, #8]
 80020a0:	e006      	b.n	80020b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020a2:	4b2a      	ldr	r3, [pc, #168]	; (800214c <HAL_GPIO_Init+0x2d0>)
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	4928      	ldr	r1, [pc, #160]	; (800214c <HAL_GPIO_Init+0x2d0>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d006      	beq.n	80020ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020bc:	4b23      	ldr	r3, [pc, #140]	; (800214c <HAL_GPIO_Init+0x2d0>)
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	4922      	ldr	r1, [pc, #136]	; (800214c <HAL_GPIO_Init+0x2d0>)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	60cb      	str	r3, [r1, #12]
 80020c8:	e006      	b.n	80020d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020ca:	4b20      	ldr	r3, [pc, #128]	; (800214c <HAL_GPIO_Init+0x2d0>)
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	491e      	ldr	r1, [pc, #120]	; (800214c <HAL_GPIO_Init+0x2d0>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d006      	beq.n	80020f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020e4:	4b19      	ldr	r3, [pc, #100]	; (800214c <HAL_GPIO_Init+0x2d0>)
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	4918      	ldr	r1, [pc, #96]	; (800214c <HAL_GPIO_Init+0x2d0>)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	604b      	str	r3, [r1, #4]
 80020f0:	e006      	b.n	8002100 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020f2:	4b16      	ldr	r3, [pc, #88]	; (800214c <HAL_GPIO_Init+0x2d0>)
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	4914      	ldr	r1, [pc, #80]	; (800214c <HAL_GPIO_Init+0x2d0>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d021      	beq.n	8002150 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800210c:	4b0f      	ldr	r3, [pc, #60]	; (800214c <HAL_GPIO_Init+0x2d0>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	490e      	ldr	r1, [pc, #56]	; (800214c <HAL_GPIO_Init+0x2d0>)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	600b      	str	r3, [r1, #0]
 8002118:	e021      	b.n	800215e <HAL_GPIO_Init+0x2e2>
 800211a:	bf00      	nop
 800211c:	10320000 	.word	0x10320000
 8002120:	10310000 	.word	0x10310000
 8002124:	10220000 	.word	0x10220000
 8002128:	10210000 	.word	0x10210000
 800212c:	10120000 	.word	0x10120000
 8002130:	10110000 	.word	0x10110000
 8002134:	40021000 	.word	0x40021000
 8002138:	40010000 	.word	0x40010000
 800213c:	40010800 	.word	0x40010800
 8002140:	40010c00 	.word	0x40010c00
 8002144:	40011000 	.word	0x40011000
 8002148:	40011400 	.word	0x40011400
 800214c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002150:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <HAL_GPIO_Init+0x304>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	43db      	mvns	r3, r3
 8002158:	4909      	ldr	r1, [pc, #36]	; (8002180 <HAL_GPIO_Init+0x304>)
 800215a:	4013      	ands	r3, r2
 800215c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	3301      	adds	r3, #1
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	fa22 f303 	lsr.w	r3, r2, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	f47f ae8e 	bne.w	8001e90 <HAL_GPIO_Init+0x14>
  }
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	372c      	adds	r7, #44	; 0x2c
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr
 8002180:	40010400 	.word	0x40010400

08002184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	807b      	strh	r3, [r7, #2]
 8002190:	4613      	mov	r3, r2
 8002192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002194:	787b      	ldrb	r3, [r7, #1]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800219a:	887a      	ldrh	r2, [r7, #2]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021a0:	e003      	b.n	80021aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021a2:	887b      	ldrh	r3, [r7, #2]
 80021a4:	041a      	lsls	r2, r3, #16
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	611a      	str	r2, [r3, #16]
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e12b      	b.n	800241e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d106      	bne.n	80021e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7fe fa2e 	bl	800063c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2224      	movs	r2, #36	; 0x24
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0201 	bic.w	r2, r2, #1
 80021f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002206:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002216:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002218:	f001 f842 	bl	80032a0 <HAL_RCC_GetPCLK1Freq>
 800221c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	4a81      	ldr	r2, [pc, #516]	; (8002428 <HAL_I2C_Init+0x274>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d807      	bhi.n	8002238 <HAL_I2C_Init+0x84>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4a80      	ldr	r2, [pc, #512]	; (800242c <HAL_I2C_Init+0x278>)
 800222c:	4293      	cmp	r3, r2
 800222e:	bf94      	ite	ls
 8002230:	2301      	movls	r3, #1
 8002232:	2300      	movhi	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	e006      	b.n	8002246 <HAL_I2C_Init+0x92>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4a7d      	ldr	r2, [pc, #500]	; (8002430 <HAL_I2C_Init+0x27c>)
 800223c:	4293      	cmp	r3, r2
 800223e:	bf94      	ite	ls
 8002240:	2301      	movls	r3, #1
 8002242:	2300      	movhi	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e0e7      	b.n	800241e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4a78      	ldr	r2, [pc, #480]	; (8002434 <HAL_I2C_Init+0x280>)
 8002252:	fba2 2303 	umull	r2, r3, r2, r3
 8002256:	0c9b      	lsrs	r3, r3, #18
 8002258:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	430a      	orrs	r2, r1
 800226c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4a6a      	ldr	r2, [pc, #424]	; (8002428 <HAL_I2C_Init+0x274>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d802      	bhi.n	8002288 <HAL_I2C_Init+0xd4>
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	3301      	adds	r3, #1
 8002286:	e009      	b.n	800229c <HAL_I2C_Init+0xe8>
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800228e:	fb02 f303 	mul.w	r3, r2, r3
 8002292:	4a69      	ldr	r2, [pc, #420]	; (8002438 <HAL_I2C_Init+0x284>)
 8002294:	fba2 2303 	umull	r2, r3, r2, r3
 8002298:	099b      	lsrs	r3, r3, #6
 800229a:	3301      	adds	r3, #1
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	430b      	orrs	r3, r1
 80022a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	495c      	ldr	r1, [pc, #368]	; (8002428 <HAL_I2C_Init+0x274>)
 80022b8:	428b      	cmp	r3, r1
 80022ba:	d819      	bhi.n	80022f0 <HAL_I2C_Init+0x13c>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	1e59      	subs	r1, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80022ca:	1c59      	adds	r1, r3, #1
 80022cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022d0:	400b      	ands	r3, r1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00a      	beq.n	80022ec <HAL_I2C_Init+0x138>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1e59      	subs	r1, r3, #1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80022e4:	3301      	adds	r3, #1
 80022e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ea:	e051      	b.n	8002390 <HAL_I2C_Init+0x1dc>
 80022ec:	2304      	movs	r3, #4
 80022ee:	e04f      	b.n	8002390 <HAL_I2C_Init+0x1dc>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d111      	bne.n	800231c <HAL_I2C_Init+0x168>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	1e58      	subs	r0, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6859      	ldr	r1, [r3, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	440b      	add	r3, r1
 8002306:	fbb0 f3f3 	udiv	r3, r0, r3
 800230a:	3301      	adds	r3, #1
 800230c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002310:	2b00      	cmp	r3, #0
 8002312:	bf0c      	ite	eq
 8002314:	2301      	moveq	r3, #1
 8002316:	2300      	movne	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	e012      	b.n	8002342 <HAL_I2C_Init+0x18e>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1e58      	subs	r0, r3, #1
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6859      	ldr	r1, [r3, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	0099      	lsls	r1, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002332:	3301      	adds	r3, #1
 8002334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002338:	2b00      	cmp	r3, #0
 800233a:	bf0c      	ite	eq
 800233c:	2301      	moveq	r3, #1
 800233e:	2300      	movne	r3, #0
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_I2C_Init+0x196>
 8002346:	2301      	movs	r3, #1
 8002348:	e022      	b.n	8002390 <HAL_I2C_Init+0x1dc>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10e      	bne.n	8002370 <HAL_I2C_Init+0x1bc>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	1e58      	subs	r0, r3, #1
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6859      	ldr	r1, [r3, #4]
 800235a:	460b      	mov	r3, r1
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	440b      	add	r3, r1
 8002360:	fbb0 f3f3 	udiv	r3, r0, r3
 8002364:	3301      	adds	r3, #1
 8002366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800236a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800236e:	e00f      	b.n	8002390 <HAL_I2C_Init+0x1dc>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	1e58      	subs	r0, r3, #1
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6859      	ldr	r1, [r3, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	0099      	lsls	r1, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	fbb0 f3f3 	udiv	r3, r0, r3
 8002386:	3301      	adds	r3, #1
 8002388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800238c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	6809      	ldr	r1, [r1, #0]
 8002394:	4313      	orrs	r3, r2
 8002396:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69da      	ldr	r2, [r3, #28]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6911      	ldr	r1, [r2, #16]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68d2      	ldr	r2, [r2, #12]
 80023ca:	4311      	orrs	r1, r2
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	430b      	orrs	r3, r1
 80023d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695a      	ldr	r2, [r3, #20]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0201 	orr.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2220      	movs	r2, #32
 800240a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	000186a0 	.word	0x000186a0
 800242c:	001e847f 	.word	0x001e847f
 8002430:	003d08ff 	.word	0x003d08ff
 8002434:	431bde83 	.word	0x431bde83
 8002438:	10624dd3 	.word	0x10624dd3

0800243c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af02      	add	r7, sp, #8
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	4608      	mov	r0, r1
 8002446:	4611      	mov	r1, r2
 8002448:	461a      	mov	r2, r3
 800244a:	4603      	mov	r3, r0
 800244c:	817b      	strh	r3, [r7, #10]
 800244e:	460b      	mov	r3, r1
 8002450:	813b      	strh	r3, [r7, #8]
 8002452:	4613      	mov	r3, r2
 8002454:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002456:	f7fe fd4b 	bl	8000ef0 <HAL_GetTick>
 800245a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b20      	cmp	r3, #32
 8002466:	f040 80d9 	bne.w	800261c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	2319      	movs	r3, #25
 8002470:	2201      	movs	r2, #1
 8002472:	496d      	ldr	r1, [pc, #436]	; (8002628 <HAL_I2C_Mem_Write+0x1ec>)
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 f971 	bl	800275c <I2C_WaitOnFlagUntilTimeout>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002480:	2302      	movs	r3, #2
 8002482:	e0cc      	b.n	800261e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_I2C_Mem_Write+0x56>
 800248e:	2302      	movs	r3, #2
 8002490:	e0c5      	b.n	800261e <HAL_I2C_Mem_Write+0x1e2>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d007      	beq.n	80024b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0201 	orr.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2221      	movs	r2, #33	; 0x21
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2240      	movs	r2, #64	; 0x40
 80024d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6a3a      	ldr	r2, [r7, #32]
 80024e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4a4d      	ldr	r2, [pc, #308]	; (800262c <HAL_I2C_Mem_Write+0x1f0>)
 80024f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024fa:	88f8      	ldrh	r0, [r7, #6]
 80024fc:	893a      	ldrh	r2, [r7, #8]
 80024fe:	8979      	ldrh	r1, [r7, #10]
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	9301      	str	r3, [sp, #4]
 8002504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	4603      	mov	r3, r0
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 f890 	bl	8002630 <I2C_RequestMemoryWrite>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d052      	beq.n	80025bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e081      	b.n	800261e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 fa36 	bl	8002990 <I2C_WaitOnTXEFlagUntilTimeout>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00d      	beq.n	8002546 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	2b04      	cmp	r3, #4
 8002530:	d107      	bne.n	8002542 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002540:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e06b      	b.n	800261e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	781a      	ldrb	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002560:	3b01      	subs	r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256c:	b29b      	uxth	r3, r3
 800256e:	3b01      	subs	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b04      	cmp	r3, #4
 8002582:	d11b      	bne.n	80025bc <HAL_I2C_Mem_Write+0x180>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002588:	2b00      	cmp	r3, #0
 800258a:	d017      	beq.n	80025bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	781a      	ldrb	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1aa      	bne.n	800251a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 fa29 	bl	8002a20 <I2C_WaitOnBTFFlagUntilTimeout>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00d      	beq.n	80025f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d107      	bne.n	80025ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e016      	b.n	800261e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2220      	movs	r2, #32
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	e000      	b.n	800261e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800261c:	2302      	movs	r3, #2
  }
}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	00100002 	.word	0x00100002
 800262c:	ffff0000 	.word	0xffff0000

08002630 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b088      	sub	sp, #32
 8002634:	af02      	add	r7, sp, #8
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	4608      	mov	r0, r1
 800263a:	4611      	mov	r1, r2
 800263c:	461a      	mov	r2, r3
 800263e:	4603      	mov	r3, r0
 8002640:	817b      	strh	r3, [r7, #10]
 8002642:	460b      	mov	r3, r1
 8002644:	813b      	strh	r3, [r7, #8]
 8002646:	4613      	mov	r3, r2
 8002648:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002658:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	2200      	movs	r2, #0
 8002662:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 f878 	bl	800275c <I2C_WaitOnFlagUntilTimeout>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00d      	beq.n	800268e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002680:	d103      	bne.n	800268a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002688:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e05f      	b.n	800274e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800268e:	897b      	ldrh	r3, [r7, #10]
 8002690:	b2db      	uxtb	r3, r3
 8002692:	461a      	mov	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800269c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	6a3a      	ldr	r2, [r7, #32]
 80026a2:	492d      	ldr	r1, [pc, #180]	; (8002758 <I2C_RequestMemoryWrite+0x128>)
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 f8d3 	bl	8002850 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e04c      	b.n	800274e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026cc:	6a39      	ldr	r1, [r7, #32]
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 f95e 	bl	8002990 <I2C_WaitOnTXEFlagUntilTimeout>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00d      	beq.n	80026f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d107      	bne.n	80026f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e02b      	b.n	800274e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026f6:	88fb      	ldrh	r3, [r7, #6]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d105      	bne.n	8002708 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026fc:	893b      	ldrh	r3, [r7, #8]
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	611a      	str	r2, [r3, #16]
 8002706:	e021      	b.n	800274c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002708:	893b      	ldrh	r3, [r7, #8]
 800270a:	0a1b      	lsrs	r3, r3, #8
 800270c:	b29b      	uxth	r3, r3
 800270e:	b2da      	uxtb	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002718:	6a39      	ldr	r1, [r7, #32]
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 f938 	bl	8002990 <I2C_WaitOnTXEFlagUntilTimeout>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00d      	beq.n	8002742 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	2b04      	cmp	r3, #4
 800272c:	d107      	bne.n	800273e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800273c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e005      	b.n	800274e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002742:	893b      	ldrh	r3, [r7, #8]
 8002744:	b2da      	uxtb	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	00010002 	.word	0x00010002

0800275c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	603b      	str	r3, [r7, #0]
 8002768:	4613      	mov	r3, r2
 800276a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800276c:	e048      	b.n	8002800 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002774:	d044      	beq.n	8002800 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002776:	f7fe fbbb 	bl	8000ef0 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d302      	bcc.n	800278c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d139      	bne.n	8002800 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	0c1b      	lsrs	r3, r3, #16
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b01      	cmp	r3, #1
 8002794:	d10d      	bne.n	80027b2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	43da      	mvns	r2, r3
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	4013      	ands	r3, r2
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	bf0c      	ite	eq
 80027a8:	2301      	moveq	r3, #1
 80027aa:	2300      	movne	r3, #0
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	461a      	mov	r2, r3
 80027b0:	e00c      	b.n	80027cc <I2C_WaitOnFlagUntilTimeout+0x70>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	43da      	mvns	r2, r3
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	4013      	ands	r3, r2
 80027be:	b29b      	uxth	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	bf0c      	ite	eq
 80027c4:	2301      	moveq	r3, #1
 80027c6:	2300      	movne	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	461a      	mov	r2, r3
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d116      	bne.n	8002800 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	f043 0220 	orr.w	r2, r3, #32
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e023      	b.n	8002848 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	0c1b      	lsrs	r3, r3, #16
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b01      	cmp	r3, #1
 8002808:	d10d      	bne.n	8002826 <I2C_WaitOnFlagUntilTimeout+0xca>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	43da      	mvns	r2, r3
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	4013      	ands	r3, r2
 8002816:	b29b      	uxth	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	bf0c      	ite	eq
 800281c:	2301      	moveq	r3, #1
 800281e:	2300      	movne	r3, #0
 8002820:	b2db      	uxtb	r3, r3
 8002822:	461a      	mov	r2, r3
 8002824:	e00c      	b.n	8002840 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	43da      	mvns	r2, r3
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	4013      	ands	r3, r2
 8002832:	b29b      	uxth	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	429a      	cmp	r2, r3
 8002844:	d093      	beq.n	800276e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
 800285c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800285e:	e071      	b.n	8002944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800286a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800286e:	d123      	bne.n	80028b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800287e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002888:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2220      	movs	r2, #32
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	f043 0204 	orr.w	r2, r3, #4
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e067      	b.n	8002988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028be:	d041      	beq.n	8002944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028c0:	f7fe fb16 	bl	8000ef0 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d302      	bcc.n	80028d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d136      	bne.n	8002944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	0c1b      	lsrs	r3, r3, #16
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d10c      	bne.n	80028fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	43da      	mvns	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	4013      	ands	r3, r2
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	bf14      	ite	ne
 80028f2:	2301      	movne	r3, #1
 80028f4:	2300      	moveq	r3, #0
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	e00b      	b.n	8002912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	43da      	mvns	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	4013      	ands	r3, r2
 8002906:	b29b      	uxth	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	bf14      	ite	ne
 800290c:	2301      	movne	r3, #1
 800290e:	2300      	moveq	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d016      	beq.n	8002944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	f043 0220 	orr.w	r2, r3, #32
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e021      	b.n	8002988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	0c1b      	lsrs	r3, r3, #16
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b01      	cmp	r3, #1
 800294c:	d10c      	bne.n	8002968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	43da      	mvns	r2, r3
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	4013      	ands	r3, r2
 800295a:	b29b      	uxth	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	bf14      	ite	ne
 8002960:	2301      	movne	r3, #1
 8002962:	2300      	moveq	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	e00b      	b.n	8002980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	43da      	mvns	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	4013      	ands	r3, r2
 8002974:	b29b      	uxth	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	bf14      	ite	ne
 800297a:	2301      	movne	r3, #1
 800297c:	2300      	moveq	r3, #0
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	f47f af6d 	bne.w	8002860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800299c:	e034      	b.n	8002a08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 f886 	bl	8002ab0 <I2C_IsAcknowledgeFailed>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e034      	b.n	8002a18 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b4:	d028      	beq.n	8002a08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b6:	f7fe fa9b 	bl	8000ef0 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d302      	bcc.n	80029cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d11d      	bne.n	8002a08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d6:	2b80      	cmp	r3, #128	; 0x80
 80029d8:	d016      	beq.n	8002a08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	f043 0220 	orr.w	r2, r3, #32
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e007      	b.n	8002a18 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a12:	2b80      	cmp	r3, #128	; 0x80
 8002a14:	d1c3      	bne.n	800299e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a2c:	e034      	b.n	8002a98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 f83e 	bl	8002ab0 <I2C_IsAcknowledgeFailed>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e034      	b.n	8002aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a44:	d028      	beq.n	8002a98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a46:	f7fe fa53 	bl	8000ef0 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d302      	bcc.n	8002a5c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d11d      	bne.n	8002a98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d016      	beq.n	8002a98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	f043 0220 	orr.w	r2, r3, #32
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e007      	b.n	8002aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d1c3      	bne.n	8002a2e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac6:	d11b      	bne.n	8002b00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ad0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2220      	movs	r2, #32
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	f043 0204 	orr.w	r2, r3, #4
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e272      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 8087 	beq.w	8002c3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b2c:	4b92      	ldr	r3, [pc, #584]	; (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 030c 	and.w	r3, r3, #12
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d00c      	beq.n	8002b52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b38:	4b8f      	ldr	r3, [pc, #572]	; (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 030c 	and.w	r3, r3, #12
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d112      	bne.n	8002b6a <HAL_RCC_OscConfig+0x5e>
 8002b44:	4b8c      	ldr	r3, [pc, #560]	; (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b50:	d10b      	bne.n	8002b6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b52:	4b89      	ldr	r3, [pc, #548]	; (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d06c      	beq.n	8002c38 <HAL_RCC_OscConfig+0x12c>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d168      	bne.n	8002c38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e24c      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b72:	d106      	bne.n	8002b82 <HAL_RCC_OscConfig+0x76>
 8002b74:	4b80      	ldr	r3, [pc, #512]	; (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a7f      	ldr	r2, [pc, #508]	; (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	e02e      	b.n	8002be0 <HAL_RCC_OscConfig+0xd4>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x98>
 8002b8a:	4b7b      	ldr	r3, [pc, #492]	; (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a7a      	ldr	r2, [pc, #488]	; (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	4b78      	ldr	r3, [pc, #480]	; (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a77      	ldr	r2, [pc, #476]	; (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	e01d      	b.n	8002be0 <HAL_RCC_OscConfig+0xd4>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bac:	d10c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0xbc>
 8002bae:	4b72      	ldr	r3, [pc, #456]	; (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a71      	ldr	r2, [pc, #452]	; (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	4b6f      	ldr	r3, [pc, #444]	; (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a6e      	ldr	r2, [pc, #440]	; (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	e00b      	b.n	8002be0 <HAL_RCC_OscConfig+0xd4>
 8002bc8:	4b6b      	ldr	r3, [pc, #428]	; (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a6a      	ldr	r2, [pc, #424]	; (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	4b68      	ldr	r3, [pc, #416]	; (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a67      	ldr	r2, [pc, #412]	; (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bde:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d013      	beq.n	8002c10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be8:	f7fe f982 	bl	8000ef0 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bf0:	f7fe f97e 	bl	8000ef0 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b64      	cmp	r3, #100	; 0x64
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e200      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c02:	4b5d      	ldr	r3, [pc, #372]	; (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0xe4>
 8002c0e:	e014      	b.n	8002c3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c10:	f7fe f96e 	bl	8000ef0 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c18:	f7fe f96a 	bl	8000ef0 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b64      	cmp	r3, #100	; 0x64
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e1ec      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c2a:	4b53      	ldr	r3, [pc, #332]	; (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f0      	bne.n	8002c18 <HAL_RCC_OscConfig+0x10c>
 8002c36:	e000      	b.n	8002c3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d063      	beq.n	8002d0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c46:	4b4c      	ldr	r3, [pc, #304]	; (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00b      	beq.n	8002c6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c52:	4b49      	ldr	r3, [pc, #292]	; (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f003 030c 	and.w	r3, r3, #12
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d11c      	bne.n	8002c98 <HAL_RCC_OscConfig+0x18c>
 8002c5e:	4b46      	ldr	r3, [pc, #280]	; (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d116      	bne.n	8002c98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c6a:	4b43      	ldr	r3, [pc, #268]	; (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d005      	beq.n	8002c82 <HAL_RCC_OscConfig+0x176>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d001      	beq.n	8002c82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e1c0      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c82:	4b3d      	ldr	r3, [pc, #244]	; (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4939      	ldr	r1, [pc, #228]	; (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c96:	e03a      	b.n	8002d0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d020      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ca0:	4b36      	ldr	r3, [pc, #216]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca6:	f7fe f923 	bl	8000ef0 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cae:	f7fe f91f 	bl	8000ef0 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e1a1      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc0:	4b2d      	ldr	r3, [pc, #180]	; (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ccc:	4b2a      	ldr	r3, [pc, #168]	; (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	4927      	ldr	r1, [pc, #156]	; (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	600b      	str	r3, [r1, #0]
 8002ce0:	e015      	b.n	8002d0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ce2:	4b26      	ldr	r3, [pc, #152]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce8:	f7fe f902 	bl	8000ef0 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cf0:	f7fe f8fe 	bl	8000ef0 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e180      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d02:	4b1d      	ldr	r3, [pc, #116]	; (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f0      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d03a      	beq.n	8002d90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d019      	beq.n	8002d56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d22:	4b17      	ldr	r3, [pc, #92]	; (8002d80 <HAL_RCC_OscConfig+0x274>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d28:	f7fe f8e2 	bl	8000ef0 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d30:	f7fe f8de 	bl	8000ef0 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e160      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d42:	4b0d      	ldr	r3, [pc, #52]	; (8002d78 <HAL_RCC_OscConfig+0x26c>)
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d4e:	2001      	movs	r0, #1
 8002d50:	f000 faba 	bl	80032c8 <RCC_Delay>
 8002d54:	e01c      	b.n	8002d90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d56:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <HAL_RCC_OscConfig+0x274>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5c:	f7fe f8c8 	bl	8000ef0 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d62:	e00f      	b.n	8002d84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d64:	f7fe f8c4 	bl	8000ef0 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d908      	bls.n	8002d84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e146      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>
 8002d76:	bf00      	nop
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	42420000 	.word	0x42420000
 8002d80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d84:	4b92      	ldr	r3, [pc, #584]	; (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1e9      	bne.n	8002d64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 80a6 	beq.w	8002eea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002da2:	4b8b      	ldr	r3, [pc, #556]	; (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10d      	bne.n	8002dca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dae:	4b88      	ldr	r3, [pc, #544]	; (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	4a87      	ldr	r2, [pc, #540]	; (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db8:	61d3      	str	r3, [r2, #28]
 8002dba:	4b85      	ldr	r3, [pc, #532]	; (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc2:	60bb      	str	r3, [r7, #8]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dca:	4b82      	ldr	r3, [pc, #520]	; (8002fd4 <HAL_RCC_OscConfig+0x4c8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d118      	bne.n	8002e08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dd6:	4b7f      	ldr	r3, [pc, #508]	; (8002fd4 <HAL_RCC_OscConfig+0x4c8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a7e      	ldr	r2, [pc, #504]	; (8002fd4 <HAL_RCC_OscConfig+0x4c8>)
 8002ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002de2:	f7fe f885 	bl	8000ef0 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dea:	f7fe f881 	bl	8000ef0 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b64      	cmp	r3, #100	; 0x64
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e103      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfc:	4b75      	ldr	r3, [pc, #468]	; (8002fd4 <HAL_RCC_OscConfig+0x4c8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f0      	beq.n	8002dea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d106      	bne.n	8002e1e <HAL_RCC_OscConfig+0x312>
 8002e10:	4b6f      	ldr	r3, [pc, #444]	; (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	4a6e      	ldr	r2, [pc, #440]	; (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	6213      	str	r3, [r2, #32]
 8002e1c:	e02d      	b.n	8002e7a <HAL_RCC_OscConfig+0x36e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10c      	bne.n	8002e40 <HAL_RCC_OscConfig+0x334>
 8002e26:	4b6a      	ldr	r3, [pc, #424]	; (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	4a69      	ldr	r2, [pc, #420]	; (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002e2c:	f023 0301 	bic.w	r3, r3, #1
 8002e30:	6213      	str	r3, [r2, #32]
 8002e32:	4b67      	ldr	r3, [pc, #412]	; (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	4a66      	ldr	r2, [pc, #408]	; (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002e38:	f023 0304 	bic.w	r3, r3, #4
 8002e3c:	6213      	str	r3, [r2, #32]
 8002e3e:	e01c      	b.n	8002e7a <HAL_RCC_OscConfig+0x36e>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	2b05      	cmp	r3, #5
 8002e46:	d10c      	bne.n	8002e62 <HAL_RCC_OscConfig+0x356>
 8002e48:	4b61      	ldr	r3, [pc, #388]	; (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	4a60      	ldr	r2, [pc, #384]	; (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002e4e:	f043 0304 	orr.w	r3, r3, #4
 8002e52:	6213      	str	r3, [r2, #32]
 8002e54:	4b5e      	ldr	r3, [pc, #376]	; (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	4a5d      	ldr	r2, [pc, #372]	; (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	6213      	str	r3, [r2, #32]
 8002e60:	e00b      	b.n	8002e7a <HAL_RCC_OscConfig+0x36e>
 8002e62:	4b5b      	ldr	r3, [pc, #364]	; (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	4a5a      	ldr	r2, [pc, #360]	; (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002e68:	f023 0301 	bic.w	r3, r3, #1
 8002e6c:	6213      	str	r3, [r2, #32]
 8002e6e:	4b58      	ldr	r3, [pc, #352]	; (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	4a57      	ldr	r2, [pc, #348]	; (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002e74:	f023 0304 	bic.w	r3, r3, #4
 8002e78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d015      	beq.n	8002eae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e82:	f7fe f835 	bl	8000ef0 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e88:	e00a      	b.n	8002ea0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8a:	f7fe f831 	bl	8000ef0 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e0b1      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea0:	4b4b      	ldr	r3, [pc, #300]	; (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0ee      	beq.n	8002e8a <HAL_RCC_OscConfig+0x37e>
 8002eac:	e014      	b.n	8002ed8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eae:	f7fe f81f 	bl	8000ef0 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb4:	e00a      	b.n	8002ecc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb6:	f7fe f81b 	bl	8000ef0 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e09b      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ecc:	4b40      	ldr	r3, [pc, #256]	; (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1ee      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ed8:	7dfb      	ldrb	r3, [r7, #23]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d105      	bne.n	8002eea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ede:	4b3c      	ldr	r3, [pc, #240]	; (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	4a3b      	ldr	r2, [pc, #236]	; (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ee8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 8087 	beq.w	8003002 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ef4:	4b36      	ldr	r3, [pc, #216]	; (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 030c 	and.w	r3, r3, #12
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d061      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d146      	bne.n	8002f96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f08:	4b33      	ldr	r3, [pc, #204]	; (8002fd8 <HAL_RCC_OscConfig+0x4cc>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0e:	f7fd ffef 	bl	8000ef0 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f16:	f7fd ffeb 	bl	8000ef0 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e06d      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f28:	4b29      	ldr	r3, [pc, #164]	; (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1f0      	bne.n	8002f16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f3c:	d108      	bne.n	8002f50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f3e:	4b24      	ldr	r3, [pc, #144]	; (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	4921      	ldr	r1, [pc, #132]	; (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f50:	4b1f      	ldr	r3, [pc, #124]	; (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a19      	ldr	r1, [r3, #32]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	430b      	orrs	r3, r1
 8002f62:	491b      	ldr	r1, [pc, #108]	; (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f68:	4b1b      	ldr	r3, [pc, #108]	; (8002fd8 <HAL_RCC_OscConfig+0x4cc>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6e:	f7fd ffbf 	bl	8000ef0 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f76:	f7fd ffbb 	bl	8000ef0 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e03d      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f88:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCC_OscConfig+0x46a>
 8002f94:	e035      	b.n	8003002 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f96:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <HAL_RCC_OscConfig+0x4cc>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9c:	f7fd ffa8 	bl	8000ef0 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa4:	f7fd ffa4 	bl	8000ef0 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e026      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb6:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <HAL_RCC_OscConfig+0x4c4>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f0      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x498>
 8002fc2:	e01e      	b.n	8003002 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d107      	bne.n	8002fdc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e019      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	40007000 	.word	0x40007000
 8002fd8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	; (800300c <HAL_RCC_OscConfig+0x500>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d106      	bne.n	8002ffe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d001      	beq.n	8003002 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40021000 	.word	0x40021000

08003010 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e0d0      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003024:	4b6a      	ldr	r3, [pc, #424]	; (80031d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d910      	bls.n	8003054 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003032:	4b67      	ldr	r3, [pc, #412]	; (80031d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f023 0207 	bic.w	r2, r3, #7
 800303a:	4965      	ldr	r1, [pc, #404]	; (80031d0 <HAL_RCC_ClockConfig+0x1c0>)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	4313      	orrs	r3, r2
 8003040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003042:	4b63      	ldr	r3, [pc, #396]	; (80031d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	429a      	cmp	r2, r3
 800304e:	d001      	beq.n	8003054 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e0b8      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d020      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d005      	beq.n	8003078 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800306c:	4b59      	ldr	r3, [pc, #356]	; (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	4a58      	ldr	r2, [pc, #352]	; (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003072:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003076:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	2b00      	cmp	r3, #0
 8003082:	d005      	beq.n	8003090 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003084:	4b53      	ldr	r3, [pc, #332]	; (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	4a52      	ldr	r2, [pc, #328]	; (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 800308a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800308e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003090:	4b50      	ldr	r3, [pc, #320]	; (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	494d      	ldr	r1, [pc, #308]	; (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d040      	beq.n	8003130 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d107      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b6:	4b47      	ldr	r3, [pc, #284]	; (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d115      	bne.n	80030ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e07f      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d107      	bne.n	80030de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ce:	4b41      	ldr	r3, [pc, #260]	; (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d109      	bne.n	80030ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e073      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030de:	4b3d      	ldr	r3, [pc, #244]	; (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e06b      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ee:	4b39      	ldr	r3, [pc, #228]	; (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f023 0203 	bic.w	r2, r3, #3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	4936      	ldr	r1, [pc, #216]	; (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003100:	f7fd fef6 	bl	8000ef0 <HAL_GetTick>
 8003104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003106:	e00a      	b.n	800311e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003108:	f7fd fef2 	bl	8000ef0 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	f241 3288 	movw	r2, #5000	; 0x1388
 8003116:	4293      	cmp	r3, r2
 8003118:	d901      	bls.n	800311e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e053      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311e:	4b2d      	ldr	r3, [pc, #180]	; (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f003 020c 	and.w	r2, r3, #12
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	429a      	cmp	r2, r3
 800312e:	d1eb      	bne.n	8003108 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003130:	4b27      	ldr	r3, [pc, #156]	; (80031d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d210      	bcs.n	8003160 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313e:	4b24      	ldr	r3, [pc, #144]	; (80031d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f023 0207 	bic.w	r2, r3, #7
 8003146:	4922      	ldr	r1, [pc, #136]	; (80031d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	4313      	orrs	r3, r2
 800314c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800314e:	4b20      	ldr	r3, [pc, #128]	; (80031d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	429a      	cmp	r2, r3
 800315a:	d001      	beq.n	8003160 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e032      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b00      	cmp	r3, #0
 800316a:	d008      	beq.n	800317e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800316c:	4b19      	ldr	r3, [pc, #100]	; (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	4916      	ldr	r1, [pc, #88]	; (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 800317a:	4313      	orrs	r3, r2
 800317c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b00      	cmp	r3, #0
 8003188:	d009      	beq.n	800319e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800318a:	4b12      	ldr	r3, [pc, #72]	; (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	490e      	ldr	r1, [pc, #56]	; (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 800319a:	4313      	orrs	r3, r2
 800319c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800319e:	f000 f821 	bl	80031e4 <HAL_RCC_GetSysClockFreq>
 80031a2:	4602      	mov	r2, r0
 80031a4:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	091b      	lsrs	r3, r3, #4
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	490a      	ldr	r1, [pc, #40]	; (80031d8 <HAL_RCC_ClockConfig+0x1c8>)
 80031b0:	5ccb      	ldrb	r3, [r1, r3]
 80031b2:	fa22 f303 	lsr.w	r3, r2, r3
 80031b6:	4a09      	ldr	r2, [pc, #36]	; (80031dc <HAL_RCC_ClockConfig+0x1cc>)
 80031b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031ba:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <HAL_RCC_ClockConfig+0x1d0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fd fe54 	bl	8000e6c <HAL_InitTick>

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40022000 	.word	0x40022000
 80031d4:	40021000 	.word	0x40021000
 80031d8:	08003e04 	.word	0x08003e04
 80031dc:	20000000 	.word	0x20000000
 80031e0:	20000014 	.word	0x20000014

080031e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b087      	sub	sp, #28
 80031e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	2300      	movs	r3, #0
 80031f0:	60bb      	str	r3, [r7, #8]
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]
 80031f6:	2300      	movs	r3, #0
 80031f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031fe:	4b1e      	ldr	r3, [pc, #120]	; (8003278 <HAL_RCC_GetSysClockFreq+0x94>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f003 030c 	and.w	r3, r3, #12
 800320a:	2b04      	cmp	r3, #4
 800320c:	d002      	beq.n	8003214 <HAL_RCC_GetSysClockFreq+0x30>
 800320e:	2b08      	cmp	r3, #8
 8003210:	d003      	beq.n	800321a <HAL_RCC_GetSysClockFreq+0x36>
 8003212:	e027      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003214:	4b19      	ldr	r3, [pc, #100]	; (800327c <HAL_RCC_GetSysClockFreq+0x98>)
 8003216:	613b      	str	r3, [r7, #16]
      break;
 8003218:	e027      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	0c9b      	lsrs	r3, r3, #18
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	4a17      	ldr	r2, [pc, #92]	; (8003280 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003224:	5cd3      	ldrb	r3, [r2, r3]
 8003226:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d010      	beq.n	8003254 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003232:	4b11      	ldr	r3, [pc, #68]	; (8003278 <HAL_RCC_GetSysClockFreq+0x94>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	0c5b      	lsrs	r3, r3, #17
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	4a11      	ldr	r2, [pc, #68]	; (8003284 <HAL_RCC_GetSysClockFreq+0xa0>)
 800323e:	5cd3      	ldrb	r3, [r2, r3]
 8003240:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a0d      	ldr	r2, [pc, #52]	; (800327c <HAL_RCC_GetSysClockFreq+0x98>)
 8003246:	fb03 f202 	mul.w	r2, r3, r2
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	e004      	b.n	800325e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a0c      	ldr	r2, [pc, #48]	; (8003288 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003258:	fb02 f303 	mul.w	r3, r2, r3
 800325c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	613b      	str	r3, [r7, #16]
      break;
 8003262:	e002      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003264:	4b05      	ldr	r3, [pc, #20]	; (800327c <HAL_RCC_GetSysClockFreq+0x98>)
 8003266:	613b      	str	r3, [r7, #16]
      break;
 8003268:	bf00      	nop
    }
  }
  return sysclockfreq;
 800326a:	693b      	ldr	r3, [r7, #16]
}
 800326c:	4618      	mov	r0, r3
 800326e:	371c      	adds	r7, #28
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40021000 	.word	0x40021000
 800327c:	007a1200 	.word	0x007a1200
 8003280:	08005168 	.word	0x08005168
 8003284:	08005178 	.word	0x08005178
 8003288:	003d0900 	.word	0x003d0900

0800328c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003290:	4b02      	ldr	r3, [pc, #8]	; (800329c <HAL_RCC_GetHCLKFreq+0x10>)
 8003292:	681b      	ldr	r3, [r3, #0]
}
 8003294:	4618      	mov	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr
 800329c:	20000000 	.word	0x20000000

080032a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032a4:	f7ff fff2 	bl	800328c <HAL_RCC_GetHCLKFreq>
 80032a8:	4602      	mov	r2, r0
 80032aa:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	0a1b      	lsrs	r3, r3, #8
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	4903      	ldr	r1, [pc, #12]	; (80032c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032b6:	5ccb      	ldrb	r3, [r1, r3]
 80032b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032bc:	4618      	mov	r0, r3
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40021000 	.word	0x40021000
 80032c4:	08003e14 	.word	0x08003e14

080032c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032d0:	4b0a      	ldr	r3, [pc, #40]	; (80032fc <RCC_Delay+0x34>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a0a      	ldr	r2, [pc, #40]	; (8003300 <RCC_Delay+0x38>)
 80032d6:	fba2 2303 	umull	r2, r3, r2, r3
 80032da:	0a5b      	lsrs	r3, r3, #9
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	fb02 f303 	mul.w	r3, r2, r3
 80032e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032e4:	bf00      	nop
  }
  while (Delay --);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	1e5a      	subs	r2, r3, #1
 80032ea:	60fa      	str	r2, [r7, #12]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1f9      	bne.n	80032e4 <RCC_Delay+0x1c>
}
 80032f0:	bf00      	nop
 80032f2:	bf00      	nop
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr
 80032fc:	20000000 	.word	0x20000000
 8003300:	10624dd3 	.word	0x10624dd3

08003304 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	613b      	str	r3, [r7, #16]
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d07d      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003320:	2300      	movs	r3, #0
 8003322:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003324:	4b4f      	ldr	r3, [pc, #316]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10d      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003330:	4b4c      	ldr	r3, [pc, #304]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	4a4b      	ldr	r2, [pc, #300]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800333a:	61d3      	str	r3, [r2, #28]
 800333c:	4b49      	ldr	r3, [pc, #292]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003344:	60bb      	str	r3, [r7, #8]
 8003346:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003348:	2301      	movs	r3, #1
 800334a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334c:	4b46      	ldr	r3, [pc, #280]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003354:	2b00      	cmp	r3, #0
 8003356:	d118      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003358:	4b43      	ldr	r3, [pc, #268]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a42      	ldr	r2, [pc, #264]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800335e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003362:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003364:	f7fd fdc4 	bl	8000ef0 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336a:	e008      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800336c:	f7fd fdc0 	bl	8000ef0 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b64      	cmp	r3, #100	; 0x64
 8003378:	d901      	bls.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e06d      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337e:	4b3a      	ldr	r3, [pc, #232]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800338a:	4b36      	ldr	r3, [pc, #216]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003392:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d02e      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d027      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033a8:	4b2e      	ldr	r3, [pc, #184]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033b2:	4b2e      	ldr	r3, [pc, #184]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033b4:	2201      	movs	r2, #1
 80033b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033b8:	4b2c      	ldr	r3, [pc, #176]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033be:	4a29      	ldr	r2, [pc, #164]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d014      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ce:	f7fd fd8f 	bl	8000ef0 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d4:	e00a      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d6:	f7fd fd8b 	bl	8000ef0 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d901      	bls.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e036      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ec:	4b1d      	ldr	r3, [pc, #116]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0ee      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033f8:	4b1a      	ldr	r3, [pc, #104]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	4917      	ldr	r1, [pc, #92]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003406:	4313      	orrs	r3, r2
 8003408:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800340a:	7dfb      	ldrb	r3, [r7, #23]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d105      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003410:	4b14      	ldr	r3, [pc, #80]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	4a13      	ldr	r2, [pc, #76]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003416:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800341a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d008      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003428:	4b0e      	ldr	r3, [pc, #56]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	490b      	ldr	r1, [pc, #44]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003436:	4313      	orrs	r3, r2
 8003438:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0310 	and.w	r3, r3, #16
 8003442:	2b00      	cmp	r3, #0
 8003444:	d008      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003446:	4b07      	ldr	r3, [pc, #28]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	4904      	ldr	r1, [pc, #16]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003454:	4313      	orrs	r3, r2
 8003456:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40021000 	.word	0x40021000
 8003468:	40007000 	.word	0x40007000
 800346c:	42420440 	.word	0x42420440

08003470 <__errno>:
 8003470:	4b01      	ldr	r3, [pc, #4]	; (8003478 <__errno+0x8>)
 8003472:	6818      	ldr	r0, [r3, #0]
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	2000001c 	.word	0x2000001c

0800347c <__libc_init_array>:
 800347c:	b570      	push	{r4, r5, r6, lr}
 800347e:	2600      	movs	r6, #0
 8003480:	4d0c      	ldr	r5, [pc, #48]	; (80034b4 <__libc_init_array+0x38>)
 8003482:	4c0d      	ldr	r4, [pc, #52]	; (80034b8 <__libc_init_array+0x3c>)
 8003484:	1b64      	subs	r4, r4, r5
 8003486:	10a4      	asrs	r4, r4, #2
 8003488:	42a6      	cmp	r6, r4
 800348a:	d109      	bne.n	80034a0 <__libc_init_array+0x24>
 800348c:	f000 fc9c 	bl	8003dc8 <_init>
 8003490:	2600      	movs	r6, #0
 8003492:	4d0a      	ldr	r5, [pc, #40]	; (80034bc <__libc_init_array+0x40>)
 8003494:	4c0a      	ldr	r4, [pc, #40]	; (80034c0 <__libc_init_array+0x44>)
 8003496:	1b64      	subs	r4, r4, r5
 8003498:	10a4      	asrs	r4, r4, #2
 800349a:	42a6      	cmp	r6, r4
 800349c:	d105      	bne.n	80034aa <__libc_init_array+0x2e>
 800349e:	bd70      	pop	{r4, r5, r6, pc}
 80034a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80034a4:	4798      	blx	r3
 80034a6:	3601      	adds	r6, #1
 80034a8:	e7ee      	b.n	8003488 <__libc_init_array+0xc>
 80034aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80034ae:	4798      	blx	r3
 80034b0:	3601      	adds	r6, #1
 80034b2:	e7f2      	b.n	800349a <__libc_init_array+0x1e>
 80034b4:	080051b0 	.word	0x080051b0
 80034b8:	080051b0 	.word	0x080051b0
 80034bc:	080051b0 	.word	0x080051b0
 80034c0:	080051b4 	.word	0x080051b4

080034c4 <memcpy>:
 80034c4:	440a      	add	r2, r1
 80034c6:	4291      	cmp	r1, r2
 80034c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80034cc:	d100      	bne.n	80034d0 <memcpy+0xc>
 80034ce:	4770      	bx	lr
 80034d0:	b510      	push	{r4, lr}
 80034d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034d6:	4291      	cmp	r1, r2
 80034d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034dc:	d1f9      	bne.n	80034d2 <memcpy+0xe>
 80034de:	bd10      	pop	{r4, pc}

080034e0 <memmove>:
 80034e0:	4288      	cmp	r0, r1
 80034e2:	b510      	push	{r4, lr}
 80034e4:	eb01 0402 	add.w	r4, r1, r2
 80034e8:	d902      	bls.n	80034f0 <memmove+0x10>
 80034ea:	4284      	cmp	r4, r0
 80034ec:	4623      	mov	r3, r4
 80034ee:	d807      	bhi.n	8003500 <memmove+0x20>
 80034f0:	1e43      	subs	r3, r0, #1
 80034f2:	42a1      	cmp	r1, r4
 80034f4:	d008      	beq.n	8003508 <memmove+0x28>
 80034f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80034fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80034fe:	e7f8      	b.n	80034f2 <memmove+0x12>
 8003500:	4601      	mov	r1, r0
 8003502:	4402      	add	r2, r0
 8003504:	428a      	cmp	r2, r1
 8003506:	d100      	bne.n	800350a <memmove+0x2a>
 8003508:	bd10      	pop	{r4, pc}
 800350a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800350e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003512:	e7f7      	b.n	8003504 <memmove+0x24>

08003514 <memset>:
 8003514:	4603      	mov	r3, r0
 8003516:	4402      	add	r2, r0
 8003518:	4293      	cmp	r3, r2
 800351a:	d100      	bne.n	800351e <memset+0xa>
 800351c:	4770      	bx	lr
 800351e:	f803 1b01 	strb.w	r1, [r3], #1
 8003522:	e7f9      	b.n	8003518 <memset+0x4>

08003524 <siprintf>:
 8003524:	b40e      	push	{r1, r2, r3}
 8003526:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800352a:	b500      	push	{lr}
 800352c:	b09c      	sub	sp, #112	; 0x70
 800352e:	ab1d      	add	r3, sp, #116	; 0x74
 8003530:	9002      	str	r0, [sp, #8]
 8003532:	9006      	str	r0, [sp, #24]
 8003534:	9107      	str	r1, [sp, #28]
 8003536:	9104      	str	r1, [sp, #16]
 8003538:	4808      	ldr	r0, [pc, #32]	; (800355c <siprintf+0x38>)
 800353a:	4909      	ldr	r1, [pc, #36]	; (8003560 <siprintf+0x3c>)
 800353c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003540:	9105      	str	r1, [sp, #20]
 8003542:	6800      	ldr	r0, [r0, #0]
 8003544:	a902      	add	r1, sp, #8
 8003546:	9301      	str	r3, [sp, #4]
 8003548:	f000 f868 	bl	800361c <_svfiprintf_r>
 800354c:	2200      	movs	r2, #0
 800354e:	9b02      	ldr	r3, [sp, #8]
 8003550:	701a      	strb	r2, [r3, #0]
 8003552:	b01c      	add	sp, #112	; 0x70
 8003554:	f85d eb04 	ldr.w	lr, [sp], #4
 8003558:	b003      	add	sp, #12
 800355a:	4770      	bx	lr
 800355c:	2000001c 	.word	0x2000001c
 8003560:	ffff0208 	.word	0xffff0208

08003564 <__ssputs_r>:
 8003564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003568:	688e      	ldr	r6, [r1, #8]
 800356a:	4682      	mov	sl, r0
 800356c:	429e      	cmp	r6, r3
 800356e:	460c      	mov	r4, r1
 8003570:	4690      	mov	r8, r2
 8003572:	461f      	mov	r7, r3
 8003574:	d838      	bhi.n	80035e8 <__ssputs_r+0x84>
 8003576:	898a      	ldrh	r2, [r1, #12]
 8003578:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800357c:	d032      	beq.n	80035e4 <__ssputs_r+0x80>
 800357e:	6825      	ldr	r5, [r4, #0]
 8003580:	6909      	ldr	r1, [r1, #16]
 8003582:	3301      	adds	r3, #1
 8003584:	eba5 0901 	sub.w	r9, r5, r1
 8003588:	6965      	ldr	r5, [r4, #20]
 800358a:	444b      	add	r3, r9
 800358c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003590:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003594:	106d      	asrs	r5, r5, #1
 8003596:	429d      	cmp	r5, r3
 8003598:	bf38      	it	cc
 800359a:	461d      	movcc	r5, r3
 800359c:	0553      	lsls	r3, r2, #21
 800359e:	d531      	bpl.n	8003604 <__ssputs_r+0xa0>
 80035a0:	4629      	mov	r1, r5
 80035a2:	f000 fb47 	bl	8003c34 <_malloc_r>
 80035a6:	4606      	mov	r6, r0
 80035a8:	b950      	cbnz	r0, 80035c0 <__ssputs_r+0x5c>
 80035aa:	230c      	movs	r3, #12
 80035ac:	f04f 30ff 	mov.w	r0, #4294967295
 80035b0:	f8ca 3000 	str.w	r3, [sl]
 80035b4:	89a3      	ldrh	r3, [r4, #12]
 80035b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035ba:	81a3      	strh	r3, [r4, #12]
 80035bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035c0:	464a      	mov	r2, r9
 80035c2:	6921      	ldr	r1, [r4, #16]
 80035c4:	f7ff ff7e 	bl	80034c4 <memcpy>
 80035c8:	89a3      	ldrh	r3, [r4, #12]
 80035ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80035ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035d2:	81a3      	strh	r3, [r4, #12]
 80035d4:	6126      	str	r6, [r4, #16]
 80035d6:	444e      	add	r6, r9
 80035d8:	6026      	str	r6, [r4, #0]
 80035da:	463e      	mov	r6, r7
 80035dc:	6165      	str	r5, [r4, #20]
 80035de:	eba5 0509 	sub.w	r5, r5, r9
 80035e2:	60a5      	str	r5, [r4, #8]
 80035e4:	42be      	cmp	r6, r7
 80035e6:	d900      	bls.n	80035ea <__ssputs_r+0x86>
 80035e8:	463e      	mov	r6, r7
 80035ea:	4632      	mov	r2, r6
 80035ec:	4641      	mov	r1, r8
 80035ee:	6820      	ldr	r0, [r4, #0]
 80035f0:	f7ff ff76 	bl	80034e0 <memmove>
 80035f4:	68a3      	ldr	r3, [r4, #8]
 80035f6:	2000      	movs	r0, #0
 80035f8:	1b9b      	subs	r3, r3, r6
 80035fa:	60a3      	str	r3, [r4, #8]
 80035fc:	6823      	ldr	r3, [r4, #0]
 80035fe:	4433      	add	r3, r6
 8003600:	6023      	str	r3, [r4, #0]
 8003602:	e7db      	b.n	80035bc <__ssputs_r+0x58>
 8003604:	462a      	mov	r2, r5
 8003606:	f000 fb89 	bl	8003d1c <_realloc_r>
 800360a:	4606      	mov	r6, r0
 800360c:	2800      	cmp	r0, #0
 800360e:	d1e1      	bne.n	80035d4 <__ssputs_r+0x70>
 8003610:	4650      	mov	r0, sl
 8003612:	6921      	ldr	r1, [r4, #16]
 8003614:	f000 faa6 	bl	8003b64 <_free_r>
 8003618:	e7c7      	b.n	80035aa <__ssputs_r+0x46>
	...

0800361c <_svfiprintf_r>:
 800361c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003620:	4698      	mov	r8, r3
 8003622:	898b      	ldrh	r3, [r1, #12]
 8003624:	4607      	mov	r7, r0
 8003626:	061b      	lsls	r3, r3, #24
 8003628:	460d      	mov	r5, r1
 800362a:	4614      	mov	r4, r2
 800362c:	b09d      	sub	sp, #116	; 0x74
 800362e:	d50e      	bpl.n	800364e <_svfiprintf_r+0x32>
 8003630:	690b      	ldr	r3, [r1, #16]
 8003632:	b963      	cbnz	r3, 800364e <_svfiprintf_r+0x32>
 8003634:	2140      	movs	r1, #64	; 0x40
 8003636:	f000 fafd 	bl	8003c34 <_malloc_r>
 800363a:	6028      	str	r0, [r5, #0]
 800363c:	6128      	str	r0, [r5, #16]
 800363e:	b920      	cbnz	r0, 800364a <_svfiprintf_r+0x2e>
 8003640:	230c      	movs	r3, #12
 8003642:	603b      	str	r3, [r7, #0]
 8003644:	f04f 30ff 	mov.w	r0, #4294967295
 8003648:	e0d1      	b.n	80037ee <_svfiprintf_r+0x1d2>
 800364a:	2340      	movs	r3, #64	; 0x40
 800364c:	616b      	str	r3, [r5, #20]
 800364e:	2300      	movs	r3, #0
 8003650:	9309      	str	r3, [sp, #36]	; 0x24
 8003652:	2320      	movs	r3, #32
 8003654:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003658:	2330      	movs	r3, #48	; 0x30
 800365a:	f04f 0901 	mov.w	r9, #1
 800365e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003662:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003808 <_svfiprintf_r+0x1ec>
 8003666:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800366a:	4623      	mov	r3, r4
 800366c:	469a      	mov	sl, r3
 800366e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003672:	b10a      	cbz	r2, 8003678 <_svfiprintf_r+0x5c>
 8003674:	2a25      	cmp	r2, #37	; 0x25
 8003676:	d1f9      	bne.n	800366c <_svfiprintf_r+0x50>
 8003678:	ebba 0b04 	subs.w	fp, sl, r4
 800367c:	d00b      	beq.n	8003696 <_svfiprintf_r+0x7a>
 800367e:	465b      	mov	r3, fp
 8003680:	4622      	mov	r2, r4
 8003682:	4629      	mov	r1, r5
 8003684:	4638      	mov	r0, r7
 8003686:	f7ff ff6d 	bl	8003564 <__ssputs_r>
 800368a:	3001      	adds	r0, #1
 800368c:	f000 80aa 	beq.w	80037e4 <_svfiprintf_r+0x1c8>
 8003690:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003692:	445a      	add	r2, fp
 8003694:	9209      	str	r2, [sp, #36]	; 0x24
 8003696:	f89a 3000 	ldrb.w	r3, [sl]
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 80a2 	beq.w	80037e4 <_svfiprintf_r+0x1c8>
 80036a0:	2300      	movs	r3, #0
 80036a2:	f04f 32ff 	mov.w	r2, #4294967295
 80036a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036aa:	f10a 0a01 	add.w	sl, sl, #1
 80036ae:	9304      	str	r3, [sp, #16]
 80036b0:	9307      	str	r3, [sp, #28]
 80036b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036b6:	931a      	str	r3, [sp, #104]	; 0x68
 80036b8:	4654      	mov	r4, sl
 80036ba:	2205      	movs	r2, #5
 80036bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036c0:	4851      	ldr	r0, [pc, #324]	; (8003808 <_svfiprintf_r+0x1ec>)
 80036c2:	f000 fa41 	bl	8003b48 <memchr>
 80036c6:	9a04      	ldr	r2, [sp, #16]
 80036c8:	b9d8      	cbnz	r0, 8003702 <_svfiprintf_r+0xe6>
 80036ca:	06d0      	lsls	r0, r2, #27
 80036cc:	bf44      	itt	mi
 80036ce:	2320      	movmi	r3, #32
 80036d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036d4:	0711      	lsls	r1, r2, #28
 80036d6:	bf44      	itt	mi
 80036d8:	232b      	movmi	r3, #43	; 0x2b
 80036da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036de:	f89a 3000 	ldrb.w	r3, [sl]
 80036e2:	2b2a      	cmp	r3, #42	; 0x2a
 80036e4:	d015      	beq.n	8003712 <_svfiprintf_r+0xf6>
 80036e6:	4654      	mov	r4, sl
 80036e8:	2000      	movs	r0, #0
 80036ea:	f04f 0c0a 	mov.w	ip, #10
 80036ee:	9a07      	ldr	r2, [sp, #28]
 80036f0:	4621      	mov	r1, r4
 80036f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036f6:	3b30      	subs	r3, #48	; 0x30
 80036f8:	2b09      	cmp	r3, #9
 80036fa:	d94e      	bls.n	800379a <_svfiprintf_r+0x17e>
 80036fc:	b1b0      	cbz	r0, 800372c <_svfiprintf_r+0x110>
 80036fe:	9207      	str	r2, [sp, #28]
 8003700:	e014      	b.n	800372c <_svfiprintf_r+0x110>
 8003702:	eba0 0308 	sub.w	r3, r0, r8
 8003706:	fa09 f303 	lsl.w	r3, r9, r3
 800370a:	4313      	orrs	r3, r2
 800370c:	46a2      	mov	sl, r4
 800370e:	9304      	str	r3, [sp, #16]
 8003710:	e7d2      	b.n	80036b8 <_svfiprintf_r+0x9c>
 8003712:	9b03      	ldr	r3, [sp, #12]
 8003714:	1d19      	adds	r1, r3, #4
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	9103      	str	r1, [sp, #12]
 800371a:	2b00      	cmp	r3, #0
 800371c:	bfbb      	ittet	lt
 800371e:	425b      	neglt	r3, r3
 8003720:	f042 0202 	orrlt.w	r2, r2, #2
 8003724:	9307      	strge	r3, [sp, #28]
 8003726:	9307      	strlt	r3, [sp, #28]
 8003728:	bfb8      	it	lt
 800372a:	9204      	strlt	r2, [sp, #16]
 800372c:	7823      	ldrb	r3, [r4, #0]
 800372e:	2b2e      	cmp	r3, #46	; 0x2e
 8003730:	d10c      	bne.n	800374c <_svfiprintf_r+0x130>
 8003732:	7863      	ldrb	r3, [r4, #1]
 8003734:	2b2a      	cmp	r3, #42	; 0x2a
 8003736:	d135      	bne.n	80037a4 <_svfiprintf_r+0x188>
 8003738:	9b03      	ldr	r3, [sp, #12]
 800373a:	3402      	adds	r4, #2
 800373c:	1d1a      	adds	r2, r3, #4
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	9203      	str	r2, [sp, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	bfb8      	it	lt
 8003746:	f04f 33ff 	movlt.w	r3, #4294967295
 800374a:	9305      	str	r3, [sp, #20]
 800374c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800380c <_svfiprintf_r+0x1f0>
 8003750:	2203      	movs	r2, #3
 8003752:	4650      	mov	r0, sl
 8003754:	7821      	ldrb	r1, [r4, #0]
 8003756:	f000 f9f7 	bl	8003b48 <memchr>
 800375a:	b140      	cbz	r0, 800376e <_svfiprintf_r+0x152>
 800375c:	2340      	movs	r3, #64	; 0x40
 800375e:	eba0 000a 	sub.w	r0, r0, sl
 8003762:	fa03 f000 	lsl.w	r0, r3, r0
 8003766:	9b04      	ldr	r3, [sp, #16]
 8003768:	3401      	adds	r4, #1
 800376a:	4303      	orrs	r3, r0
 800376c:	9304      	str	r3, [sp, #16]
 800376e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003772:	2206      	movs	r2, #6
 8003774:	4826      	ldr	r0, [pc, #152]	; (8003810 <_svfiprintf_r+0x1f4>)
 8003776:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800377a:	f000 f9e5 	bl	8003b48 <memchr>
 800377e:	2800      	cmp	r0, #0
 8003780:	d038      	beq.n	80037f4 <_svfiprintf_r+0x1d8>
 8003782:	4b24      	ldr	r3, [pc, #144]	; (8003814 <_svfiprintf_r+0x1f8>)
 8003784:	bb1b      	cbnz	r3, 80037ce <_svfiprintf_r+0x1b2>
 8003786:	9b03      	ldr	r3, [sp, #12]
 8003788:	3307      	adds	r3, #7
 800378a:	f023 0307 	bic.w	r3, r3, #7
 800378e:	3308      	adds	r3, #8
 8003790:	9303      	str	r3, [sp, #12]
 8003792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003794:	4433      	add	r3, r6
 8003796:	9309      	str	r3, [sp, #36]	; 0x24
 8003798:	e767      	b.n	800366a <_svfiprintf_r+0x4e>
 800379a:	460c      	mov	r4, r1
 800379c:	2001      	movs	r0, #1
 800379e:	fb0c 3202 	mla	r2, ip, r2, r3
 80037a2:	e7a5      	b.n	80036f0 <_svfiprintf_r+0xd4>
 80037a4:	2300      	movs	r3, #0
 80037a6:	f04f 0c0a 	mov.w	ip, #10
 80037aa:	4619      	mov	r1, r3
 80037ac:	3401      	adds	r4, #1
 80037ae:	9305      	str	r3, [sp, #20]
 80037b0:	4620      	mov	r0, r4
 80037b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037b6:	3a30      	subs	r2, #48	; 0x30
 80037b8:	2a09      	cmp	r2, #9
 80037ba:	d903      	bls.n	80037c4 <_svfiprintf_r+0x1a8>
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0c5      	beq.n	800374c <_svfiprintf_r+0x130>
 80037c0:	9105      	str	r1, [sp, #20]
 80037c2:	e7c3      	b.n	800374c <_svfiprintf_r+0x130>
 80037c4:	4604      	mov	r4, r0
 80037c6:	2301      	movs	r3, #1
 80037c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80037cc:	e7f0      	b.n	80037b0 <_svfiprintf_r+0x194>
 80037ce:	ab03      	add	r3, sp, #12
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	462a      	mov	r2, r5
 80037d4:	4638      	mov	r0, r7
 80037d6:	4b10      	ldr	r3, [pc, #64]	; (8003818 <_svfiprintf_r+0x1fc>)
 80037d8:	a904      	add	r1, sp, #16
 80037da:	f3af 8000 	nop.w
 80037de:	1c42      	adds	r2, r0, #1
 80037e0:	4606      	mov	r6, r0
 80037e2:	d1d6      	bne.n	8003792 <_svfiprintf_r+0x176>
 80037e4:	89ab      	ldrh	r3, [r5, #12]
 80037e6:	065b      	lsls	r3, r3, #25
 80037e8:	f53f af2c 	bmi.w	8003644 <_svfiprintf_r+0x28>
 80037ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037ee:	b01d      	add	sp, #116	; 0x74
 80037f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037f4:	ab03      	add	r3, sp, #12
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	462a      	mov	r2, r5
 80037fa:	4638      	mov	r0, r7
 80037fc:	4b06      	ldr	r3, [pc, #24]	; (8003818 <_svfiprintf_r+0x1fc>)
 80037fe:	a904      	add	r1, sp, #16
 8003800:	f000 f87c 	bl	80038fc <_printf_i>
 8003804:	e7eb      	b.n	80037de <_svfiprintf_r+0x1c2>
 8003806:	bf00      	nop
 8003808:	0800517a 	.word	0x0800517a
 800380c:	08005180 	.word	0x08005180
 8003810:	08005184 	.word	0x08005184
 8003814:	00000000 	.word	0x00000000
 8003818:	08003565 	.word	0x08003565

0800381c <_printf_common>:
 800381c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003820:	4616      	mov	r6, r2
 8003822:	4699      	mov	r9, r3
 8003824:	688a      	ldr	r2, [r1, #8]
 8003826:	690b      	ldr	r3, [r1, #16]
 8003828:	4607      	mov	r7, r0
 800382a:	4293      	cmp	r3, r2
 800382c:	bfb8      	it	lt
 800382e:	4613      	movlt	r3, r2
 8003830:	6033      	str	r3, [r6, #0]
 8003832:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003836:	460c      	mov	r4, r1
 8003838:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800383c:	b10a      	cbz	r2, 8003842 <_printf_common+0x26>
 800383e:	3301      	adds	r3, #1
 8003840:	6033      	str	r3, [r6, #0]
 8003842:	6823      	ldr	r3, [r4, #0]
 8003844:	0699      	lsls	r1, r3, #26
 8003846:	bf42      	ittt	mi
 8003848:	6833      	ldrmi	r3, [r6, #0]
 800384a:	3302      	addmi	r3, #2
 800384c:	6033      	strmi	r3, [r6, #0]
 800384e:	6825      	ldr	r5, [r4, #0]
 8003850:	f015 0506 	ands.w	r5, r5, #6
 8003854:	d106      	bne.n	8003864 <_printf_common+0x48>
 8003856:	f104 0a19 	add.w	sl, r4, #25
 800385a:	68e3      	ldr	r3, [r4, #12]
 800385c:	6832      	ldr	r2, [r6, #0]
 800385e:	1a9b      	subs	r3, r3, r2
 8003860:	42ab      	cmp	r3, r5
 8003862:	dc28      	bgt.n	80038b6 <_printf_common+0x9a>
 8003864:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003868:	1e13      	subs	r3, r2, #0
 800386a:	6822      	ldr	r2, [r4, #0]
 800386c:	bf18      	it	ne
 800386e:	2301      	movne	r3, #1
 8003870:	0692      	lsls	r2, r2, #26
 8003872:	d42d      	bmi.n	80038d0 <_printf_common+0xb4>
 8003874:	4649      	mov	r1, r9
 8003876:	4638      	mov	r0, r7
 8003878:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800387c:	47c0      	blx	r8
 800387e:	3001      	adds	r0, #1
 8003880:	d020      	beq.n	80038c4 <_printf_common+0xa8>
 8003882:	6823      	ldr	r3, [r4, #0]
 8003884:	68e5      	ldr	r5, [r4, #12]
 8003886:	f003 0306 	and.w	r3, r3, #6
 800388a:	2b04      	cmp	r3, #4
 800388c:	bf18      	it	ne
 800388e:	2500      	movne	r5, #0
 8003890:	6832      	ldr	r2, [r6, #0]
 8003892:	f04f 0600 	mov.w	r6, #0
 8003896:	68a3      	ldr	r3, [r4, #8]
 8003898:	bf08      	it	eq
 800389a:	1aad      	subeq	r5, r5, r2
 800389c:	6922      	ldr	r2, [r4, #16]
 800389e:	bf08      	it	eq
 80038a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038a4:	4293      	cmp	r3, r2
 80038a6:	bfc4      	itt	gt
 80038a8:	1a9b      	subgt	r3, r3, r2
 80038aa:	18ed      	addgt	r5, r5, r3
 80038ac:	341a      	adds	r4, #26
 80038ae:	42b5      	cmp	r5, r6
 80038b0:	d11a      	bne.n	80038e8 <_printf_common+0xcc>
 80038b2:	2000      	movs	r0, #0
 80038b4:	e008      	b.n	80038c8 <_printf_common+0xac>
 80038b6:	2301      	movs	r3, #1
 80038b8:	4652      	mov	r2, sl
 80038ba:	4649      	mov	r1, r9
 80038bc:	4638      	mov	r0, r7
 80038be:	47c0      	blx	r8
 80038c0:	3001      	adds	r0, #1
 80038c2:	d103      	bne.n	80038cc <_printf_common+0xb0>
 80038c4:	f04f 30ff 	mov.w	r0, #4294967295
 80038c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038cc:	3501      	adds	r5, #1
 80038ce:	e7c4      	b.n	800385a <_printf_common+0x3e>
 80038d0:	2030      	movs	r0, #48	; 0x30
 80038d2:	18e1      	adds	r1, r4, r3
 80038d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038d8:	1c5a      	adds	r2, r3, #1
 80038da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038de:	4422      	add	r2, r4
 80038e0:	3302      	adds	r3, #2
 80038e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038e6:	e7c5      	b.n	8003874 <_printf_common+0x58>
 80038e8:	2301      	movs	r3, #1
 80038ea:	4622      	mov	r2, r4
 80038ec:	4649      	mov	r1, r9
 80038ee:	4638      	mov	r0, r7
 80038f0:	47c0      	blx	r8
 80038f2:	3001      	adds	r0, #1
 80038f4:	d0e6      	beq.n	80038c4 <_printf_common+0xa8>
 80038f6:	3601      	adds	r6, #1
 80038f8:	e7d9      	b.n	80038ae <_printf_common+0x92>
	...

080038fc <_printf_i>:
 80038fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003900:	7e0f      	ldrb	r7, [r1, #24]
 8003902:	4691      	mov	r9, r2
 8003904:	2f78      	cmp	r7, #120	; 0x78
 8003906:	4680      	mov	r8, r0
 8003908:	460c      	mov	r4, r1
 800390a:	469a      	mov	sl, r3
 800390c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800390e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003912:	d807      	bhi.n	8003924 <_printf_i+0x28>
 8003914:	2f62      	cmp	r7, #98	; 0x62
 8003916:	d80a      	bhi.n	800392e <_printf_i+0x32>
 8003918:	2f00      	cmp	r7, #0
 800391a:	f000 80d9 	beq.w	8003ad0 <_printf_i+0x1d4>
 800391e:	2f58      	cmp	r7, #88	; 0x58
 8003920:	f000 80a4 	beq.w	8003a6c <_printf_i+0x170>
 8003924:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003928:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800392c:	e03a      	b.n	80039a4 <_printf_i+0xa8>
 800392e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003932:	2b15      	cmp	r3, #21
 8003934:	d8f6      	bhi.n	8003924 <_printf_i+0x28>
 8003936:	a101      	add	r1, pc, #4	; (adr r1, 800393c <_printf_i+0x40>)
 8003938:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800393c:	08003995 	.word	0x08003995
 8003940:	080039a9 	.word	0x080039a9
 8003944:	08003925 	.word	0x08003925
 8003948:	08003925 	.word	0x08003925
 800394c:	08003925 	.word	0x08003925
 8003950:	08003925 	.word	0x08003925
 8003954:	080039a9 	.word	0x080039a9
 8003958:	08003925 	.word	0x08003925
 800395c:	08003925 	.word	0x08003925
 8003960:	08003925 	.word	0x08003925
 8003964:	08003925 	.word	0x08003925
 8003968:	08003ab7 	.word	0x08003ab7
 800396c:	080039d9 	.word	0x080039d9
 8003970:	08003a99 	.word	0x08003a99
 8003974:	08003925 	.word	0x08003925
 8003978:	08003925 	.word	0x08003925
 800397c:	08003ad9 	.word	0x08003ad9
 8003980:	08003925 	.word	0x08003925
 8003984:	080039d9 	.word	0x080039d9
 8003988:	08003925 	.word	0x08003925
 800398c:	08003925 	.word	0x08003925
 8003990:	08003aa1 	.word	0x08003aa1
 8003994:	682b      	ldr	r3, [r5, #0]
 8003996:	1d1a      	adds	r2, r3, #4
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	602a      	str	r2, [r5, #0]
 800399c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0a4      	b.n	8003af2 <_printf_i+0x1f6>
 80039a8:	6820      	ldr	r0, [r4, #0]
 80039aa:	6829      	ldr	r1, [r5, #0]
 80039ac:	0606      	lsls	r6, r0, #24
 80039ae:	f101 0304 	add.w	r3, r1, #4
 80039b2:	d50a      	bpl.n	80039ca <_printf_i+0xce>
 80039b4:	680e      	ldr	r6, [r1, #0]
 80039b6:	602b      	str	r3, [r5, #0]
 80039b8:	2e00      	cmp	r6, #0
 80039ba:	da03      	bge.n	80039c4 <_printf_i+0xc8>
 80039bc:	232d      	movs	r3, #45	; 0x2d
 80039be:	4276      	negs	r6, r6
 80039c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039c4:	230a      	movs	r3, #10
 80039c6:	485e      	ldr	r0, [pc, #376]	; (8003b40 <_printf_i+0x244>)
 80039c8:	e019      	b.n	80039fe <_printf_i+0x102>
 80039ca:	680e      	ldr	r6, [r1, #0]
 80039cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80039d0:	602b      	str	r3, [r5, #0]
 80039d2:	bf18      	it	ne
 80039d4:	b236      	sxthne	r6, r6
 80039d6:	e7ef      	b.n	80039b8 <_printf_i+0xbc>
 80039d8:	682b      	ldr	r3, [r5, #0]
 80039da:	6820      	ldr	r0, [r4, #0]
 80039dc:	1d19      	adds	r1, r3, #4
 80039de:	6029      	str	r1, [r5, #0]
 80039e0:	0601      	lsls	r1, r0, #24
 80039e2:	d501      	bpl.n	80039e8 <_printf_i+0xec>
 80039e4:	681e      	ldr	r6, [r3, #0]
 80039e6:	e002      	b.n	80039ee <_printf_i+0xf2>
 80039e8:	0646      	lsls	r6, r0, #25
 80039ea:	d5fb      	bpl.n	80039e4 <_printf_i+0xe8>
 80039ec:	881e      	ldrh	r6, [r3, #0]
 80039ee:	2f6f      	cmp	r7, #111	; 0x6f
 80039f0:	bf0c      	ite	eq
 80039f2:	2308      	moveq	r3, #8
 80039f4:	230a      	movne	r3, #10
 80039f6:	4852      	ldr	r0, [pc, #328]	; (8003b40 <_printf_i+0x244>)
 80039f8:	2100      	movs	r1, #0
 80039fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80039fe:	6865      	ldr	r5, [r4, #4]
 8003a00:	2d00      	cmp	r5, #0
 8003a02:	bfa8      	it	ge
 8003a04:	6821      	ldrge	r1, [r4, #0]
 8003a06:	60a5      	str	r5, [r4, #8]
 8003a08:	bfa4      	itt	ge
 8003a0a:	f021 0104 	bicge.w	r1, r1, #4
 8003a0e:	6021      	strge	r1, [r4, #0]
 8003a10:	b90e      	cbnz	r6, 8003a16 <_printf_i+0x11a>
 8003a12:	2d00      	cmp	r5, #0
 8003a14:	d04d      	beq.n	8003ab2 <_printf_i+0x1b6>
 8003a16:	4615      	mov	r5, r2
 8003a18:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a1c:	fb03 6711 	mls	r7, r3, r1, r6
 8003a20:	5dc7      	ldrb	r7, [r0, r7]
 8003a22:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a26:	4637      	mov	r7, r6
 8003a28:	42bb      	cmp	r3, r7
 8003a2a:	460e      	mov	r6, r1
 8003a2c:	d9f4      	bls.n	8003a18 <_printf_i+0x11c>
 8003a2e:	2b08      	cmp	r3, #8
 8003a30:	d10b      	bne.n	8003a4a <_printf_i+0x14e>
 8003a32:	6823      	ldr	r3, [r4, #0]
 8003a34:	07de      	lsls	r6, r3, #31
 8003a36:	d508      	bpl.n	8003a4a <_printf_i+0x14e>
 8003a38:	6923      	ldr	r3, [r4, #16]
 8003a3a:	6861      	ldr	r1, [r4, #4]
 8003a3c:	4299      	cmp	r1, r3
 8003a3e:	bfde      	ittt	le
 8003a40:	2330      	movle	r3, #48	; 0x30
 8003a42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a46:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a4a:	1b52      	subs	r2, r2, r5
 8003a4c:	6122      	str	r2, [r4, #16]
 8003a4e:	464b      	mov	r3, r9
 8003a50:	4621      	mov	r1, r4
 8003a52:	4640      	mov	r0, r8
 8003a54:	f8cd a000 	str.w	sl, [sp]
 8003a58:	aa03      	add	r2, sp, #12
 8003a5a:	f7ff fedf 	bl	800381c <_printf_common>
 8003a5e:	3001      	adds	r0, #1
 8003a60:	d14c      	bne.n	8003afc <_printf_i+0x200>
 8003a62:	f04f 30ff 	mov.w	r0, #4294967295
 8003a66:	b004      	add	sp, #16
 8003a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a6c:	4834      	ldr	r0, [pc, #208]	; (8003b40 <_printf_i+0x244>)
 8003a6e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003a72:	6829      	ldr	r1, [r5, #0]
 8003a74:	6823      	ldr	r3, [r4, #0]
 8003a76:	f851 6b04 	ldr.w	r6, [r1], #4
 8003a7a:	6029      	str	r1, [r5, #0]
 8003a7c:	061d      	lsls	r5, r3, #24
 8003a7e:	d514      	bpl.n	8003aaa <_printf_i+0x1ae>
 8003a80:	07df      	lsls	r7, r3, #31
 8003a82:	bf44      	itt	mi
 8003a84:	f043 0320 	orrmi.w	r3, r3, #32
 8003a88:	6023      	strmi	r3, [r4, #0]
 8003a8a:	b91e      	cbnz	r6, 8003a94 <_printf_i+0x198>
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	f023 0320 	bic.w	r3, r3, #32
 8003a92:	6023      	str	r3, [r4, #0]
 8003a94:	2310      	movs	r3, #16
 8003a96:	e7af      	b.n	80039f8 <_printf_i+0xfc>
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	f043 0320 	orr.w	r3, r3, #32
 8003a9e:	6023      	str	r3, [r4, #0]
 8003aa0:	2378      	movs	r3, #120	; 0x78
 8003aa2:	4828      	ldr	r0, [pc, #160]	; (8003b44 <_printf_i+0x248>)
 8003aa4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003aa8:	e7e3      	b.n	8003a72 <_printf_i+0x176>
 8003aaa:	0659      	lsls	r1, r3, #25
 8003aac:	bf48      	it	mi
 8003aae:	b2b6      	uxthmi	r6, r6
 8003ab0:	e7e6      	b.n	8003a80 <_printf_i+0x184>
 8003ab2:	4615      	mov	r5, r2
 8003ab4:	e7bb      	b.n	8003a2e <_printf_i+0x132>
 8003ab6:	682b      	ldr	r3, [r5, #0]
 8003ab8:	6826      	ldr	r6, [r4, #0]
 8003aba:	1d18      	adds	r0, r3, #4
 8003abc:	6961      	ldr	r1, [r4, #20]
 8003abe:	6028      	str	r0, [r5, #0]
 8003ac0:	0635      	lsls	r5, r6, #24
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	d501      	bpl.n	8003aca <_printf_i+0x1ce>
 8003ac6:	6019      	str	r1, [r3, #0]
 8003ac8:	e002      	b.n	8003ad0 <_printf_i+0x1d4>
 8003aca:	0670      	lsls	r0, r6, #25
 8003acc:	d5fb      	bpl.n	8003ac6 <_printf_i+0x1ca>
 8003ace:	8019      	strh	r1, [r3, #0]
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	4615      	mov	r5, r2
 8003ad4:	6123      	str	r3, [r4, #16]
 8003ad6:	e7ba      	b.n	8003a4e <_printf_i+0x152>
 8003ad8:	682b      	ldr	r3, [r5, #0]
 8003ada:	2100      	movs	r1, #0
 8003adc:	1d1a      	adds	r2, r3, #4
 8003ade:	602a      	str	r2, [r5, #0]
 8003ae0:	681d      	ldr	r5, [r3, #0]
 8003ae2:	6862      	ldr	r2, [r4, #4]
 8003ae4:	4628      	mov	r0, r5
 8003ae6:	f000 f82f 	bl	8003b48 <memchr>
 8003aea:	b108      	cbz	r0, 8003af0 <_printf_i+0x1f4>
 8003aec:	1b40      	subs	r0, r0, r5
 8003aee:	6060      	str	r0, [r4, #4]
 8003af0:	6863      	ldr	r3, [r4, #4]
 8003af2:	6123      	str	r3, [r4, #16]
 8003af4:	2300      	movs	r3, #0
 8003af6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003afa:	e7a8      	b.n	8003a4e <_printf_i+0x152>
 8003afc:	462a      	mov	r2, r5
 8003afe:	4649      	mov	r1, r9
 8003b00:	4640      	mov	r0, r8
 8003b02:	6923      	ldr	r3, [r4, #16]
 8003b04:	47d0      	blx	sl
 8003b06:	3001      	adds	r0, #1
 8003b08:	d0ab      	beq.n	8003a62 <_printf_i+0x166>
 8003b0a:	6823      	ldr	r3, [r4, #0]
 8003b0c:	079b      	lsls	r3, r3, #30
 8003b0e:	d413      	bmi.n	8003b38 <_printf_i+0x23c>
 8003b10:	68e0      	ldr	r0, [r4, #12]
 8003b12:	9b03      	ldr	r3, [sp, #12]
 8003b14:	4298      	cmp	r0, r3
 8003b16:	bfb8      	it	lt
 8003b18:	4618      	movlt	r0, r3
 8003b1a:	e7a4      	b.n	8003a66 <_printf_i+0x16a>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	4632      	mov	r2, r6
 8003b20:	4649      	mov	r1, r9
 8003b22:	4640      	mov	r0, r8
 8003b24:	47d0      	blx	sl
 8003b26:	3001      	adds	r0, #1
 8003b28:	d09b      	beq.n	8003a62 <_printf_i+0x166>
 8003b2a:	3501      	adds	r5, #1
 8003b2c:	68e3      	ldr	r3, [r4, #12]
 8003b2e:	9903      	ldr	r1, [sp, #12]
 8003b30:	1a5b      	subs	r3, r3, r1
 8003b32:	42ab      	cmp	r3, r5
 8003b34:	dcf2      	bgt.n	8003b1c <_printf_i+0x220>
 8003b36:	e7eb      	b.n	8003b10 <_printf_i+0x214>
 8003b38:	2500      	movs	r5, #0
 8003b3a:	f104 0619 	add.w	r6, r4, #25
 8003b3e:	e7f5      	b.n	8003b2c <_printf_i+0x230>
 8003b40:	0800518b 	.word	0x0800518b
 8003b44:	0800519c 	.word	0x0800519c

08003b48 <memchr>:
 8003b48:	4603      	mov	r3, r0
 8003b4a:	b510      	push	{r4, lr}
 8003b4c:	b2c9      	uxtb	r1, r1
 8003b4e:	4402      	add	r2, r0
 8003b50:	4293      	cmp	r3, r2
 8003b52:	4618      	mov	r0, r3
 8003b54:	d101      	bne.n	8003b5a <memchr+0x12>
 8003b56:	2000      	movs	r0, #0
 8003b58:	e003      	b.n	8003b62 <memchr+0x1a>
 8003b5a:	7804      	ldrb	r4, [r0, #0]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	428c      	cmp	r4, r1
 8003b60:	d1f6      	bne.n	8003b50 <memchr+0x8>
 8003b62:	bd10      	pop	{r4, pc}

08003b64 <_free_r>:
 8003b64:	b538      	push	{r3, r4, r5, lr}
 8003b66:	4605      	mov	r5, r0
 8003b68:	2900      	cmp	r1, #0
 8003b6a:	d040      	beq.n	8003bee <_free_r+0x8a>
 8003b6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b70:	1f0c      	subs	r4, r1, #4
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	bfb8      	it	lt
 8003b76:	18e4      	addlt	r4, r4, r3
 8003b78:	f000 f910 	bl	8003d9c <__malloc_lock>
 8003b7c:	4a1c      	ldr	r2, [pc, #112]	; (8003bf0 <_free_r+0x8c>)
 8003b7e:	6813      	ldr	r3, [r2, #0]
 8003b80:	b933      	cbnz	r3, 8003b90 <_free_r+0x2c>
 8003b82:	6063      	str	r3, [r4, #4]
 8003b84:	6014      	str	r4, [r2, #0]
 8003b86:	4628      	mov	r0, r5
 8003b88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b8c:	f000 b90c 	b.w	8003da8 <__malloc_unlock>
 8003b90:	42a3      	cmp	r3, r4
 8003b92:	d908      	bls.n	8003ba6 <_free_r+0x42>
 8003b94:	6820      	ldr	r0, [r4, #0]
 8003b96:	1821      	adds	r1, r4, r0
 8003b98:	428b      	cmp	r3, r1
 8003b9a:	bf01      	itttt	eq
 8003b9c:	6819      	ldreq	r1, [r3, #0]
 8003b9e:	685b      	ldreq	r3, [r3, #4]
 8003ba0:	1809      	addeq	r1, r1, r0
 8003ba2:	6021      	streq	r1, [r4, #0]
 8003ba4:	e7ed      	b.n	8003b82 <_free_r+0x1e>
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	b10b      	cbz	r3, 8003bb0 <_free_r+0x4c>
 8003bac:	42a3      	cmp	r3, r4
 8003bae:	d9fa      	bls.n	8003ba6 <_free_r+0x42>
 8003bb0:	6811      	ldr	r1, [r2, #0]
 8003bb2:	1850      	adds	r0, r2, r1
 8003bb4:	42a0      	cmp	r0, r4
 8003bb6:	d10b      	bne.n	8003bd0 <_free_r+0x6c>
 8003bb8:	6820      	ldr	r0, [r4, #0]
 8003bba:	4401      	add	r1, r0
 8003bbc:	1850      	adds	r0, r2, r1
 8003bbe:	4283      	cmp	r3, r0
 8003bc0:	6011      	str	r1, [r2, #0]
 8003bc2:	d1e0      	bne.n	8003b86 <_free_r+0x22>
 8003bc4:	6818      	ldr	r0, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	4401      	add	r1, r0
 8003bca:	6011      	str	r1, [r2, #0]
 8003bcc:	6053      	str	r3, [r2, #4]
 8003bce:	e7da      	b.n	8003b86 <_free_r+0x22>
 8003bd0:	d902      	bls.n	8003bd8 <_free_r+0x74>
 8003bd2:	230c      	movs	r3, #12
 8003bd4:	602b      	str	r3, [r5, #0]
 8003bd6:	e7d6      	b.n	8003b86 <_free_r+0x22>
 8003bd8:	6820      	ldr	r0, [r4, #0]
 8003bda:	1821      	adds	r1, r4, r0
 8003bdc:	428b      	cmp	r3, r1
 8003bde:	bf01      	itttt	eq
 8003be0:	6819      	ldreq	r1, [r3, #0]
 8003be2:	685b      	ldreq	r3, [r3, #4]
 8003be4:	1809      	addeq	r1, r1, r0
 8003be6:	6021      	streq	r1, [r4, #0]
 8003be8:	6063      	str	r3, [r4, #4]
 8003bea:	6054      	str	r4, [r2, #4]
 8003bec:	e7cb      	b.n	8003b86 <_free_r+0x22>
 8003bee:	bd38      	pop	{r3, r4, r5, pc}
 8003bf0:	200005ac 	.word	0x200005ac

08003bf4 <sbrk_aligned>:
 8003bf4:	b570      	push	{r4, r5, r6, lr}
 8003bf6:	4e0e      	ldr	r6, [pc, #56]	; (8003c30 <sbrk_aligned+0x3c>)
 8003bf8:	460c      	mov	r4, r1
 8003bfa:	6831      	ldr	r1, [r6, #0]
 8003bfc:	4605      	mov	r5, r0
 8003bfe:	b911      	cbnz	r1, 8003c06 <sbrk_aligned+0x12>
 8003c00:	f000 f8bc 	bl	8003d7c <_sbrk_r>
 8003c04:	6030      	str	r0, [r6, #0]
 8003c06:	4621      	mov	r1, r4
 8003c08:	4628      	mov	r0, r5
 8003c0a:	f000 f8b7 	bl	8003d7c <_sbrk_r>
 8003c0e:	1c43      	adds	r3, r0, #1
 8003c10:	d00a      	beq.n	8003c28 <sbrk_aligned+0x34>
 8003c12:	1cc4      	adds	r4, r0, #3
 8003c14:	f024 0403 	bic.w	r4, r4, #3
 8003c18:	42a0      	cmp	r0, r4
 8003c1a:	d007      	beq.n	8003c2c <sbrk_aligned+0x38>
 8003c1c:	1a21      	subs	r1, r4, r0
 8003c1e:	4628      	mov	r0, r5
 8003c20:	f000 f8ac 	bl	8003d7c <_sbrk_r>
 8003c24:	3001      	adds	r0, #1
 8003c26:	d101      	bne.n	8003c2c <sbrk_aligned+0x38>
 8003c28:	f04f 34ff 	mov.w	r4, #4294967295
 8003c2c:	4620      	mov	r0, r4
 8003c2e:	bd70      	pop	{r4, r5, r6, pc}
 8003c30:	200005b0 	.word	0x200005b0

08003c34 <_malloc_r>:
 8003c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c38:	1ccd      	adds	r5, r1, #3
 8003c3a:	f025 0503 	bic.w	r5, r5, #3
 8003c3e:	3508      	adds	r5, #8
 8003c40:	2d0c      	cmp	r5, #12
 8003c42:	bf38      	it	cc
 8003c44:	250c      	movcc	r5, #12
 8003c46:	2d00      	cmp	r5, #0
 8003c48:	4607      	mov	r7, r0
 8003c4a:	db01      	blt.n	8003c50 <_malloc_r+0x1c>
 8003c4c:	42a9      	cmp	r1, r5
 8003c4e:	d905      	bls.n	8003c5c <_malloc_r+0x28>
 8003c50:	230c      	movs	r3, #12
 8003c52:	2600      	movs	r6, #0
 8003c54:	603b      	str	r3, [r7, #0]
 8003c56:	4630      	mov	r0, r6
 8003c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c5c:	4e2e      	ldr	r6, [pc, #184]	; (8003d18 <_malloc_r+0xe4>)
 8003c5e:	f000 f89d 	bl	8003d9c <__malloc_lock>
 8003c62:	6833      	ldr	r3, [r6, #0]
 8003c64:	461c      	mov	r4, r3
 8003c66:	bb34      	cbnz	r4, 8003cb6 <_malloc_r+0x82>
 8003c68:	4629      	mov	r1, r5
 8003c6a:	4638      	mov	r0, r7
 8003c6c:	f7ff ffc2 	bl	8003bf4 <sbrk_aligned>
 8003c70:	1c43      	adds	r3, r0, #1
 8003c72:	4604      	mov	r4, r0
 8003c74:	d14d      	bne.n	8003d12 <_malloc_r+0xde>
 8003c76:	6834      	ldr	r4, [r6, #0]
 8003c78:	4626      	mov	r6, r4
 8003c7a:	2e00      	cmp	r6, #0
 8003c7c:	d140      	bne.n	8003d00 <_malloc_r+0xcc>
 8003c7e:	6823      	ldr	r3, [r4, #0]
 8003c80:	4631      	mov	r1, r6
 8003c82:	4638      	mov	r0, r7
 8003c84:	eb04 0803 	add.w	r8, r4, r3
 8003c88:	f000 f878 	bl	8003d7c <_sbrk_r>
 8003c8c:	4580      	cmp	r8, r0
 8003c8e:	d13a      	bne.n	8003d06 <_malloc_r+0xd2>
 8003c90:	6821      	ldr	r1, [r4, #0]
 8003c92:	3503      	adds	r5, #3
 8003c94:	1a6d      	subs	r5, r5, r1
 8003c96:	f025 0503 	bic.w	r5, r5, #3
 8003c9a:	3508      	adds	r5, #8
 8003c9c:	2d0c      	cmp	r5, #12
 8003c9e:	bf38      	it	cc
 8003ca0:	250c      	movcc	r5, #12
 8003ca2:	4638      	mov	r0, r7
 8003ca4:	4629      	mov	r1, r5
 8003ca6:	f7ff ffa5 	bl	8003bf4 <sbrk_aligned>
 8003caa:	3001      	adds	r0, #1
 8003cac:	d02b      	beq.n	8003d06 <_malloc_r+0xd2>
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	442b      	add	r3, r5
 8003cb2:	6023      	str	r3, [r4, #0]
 8003cb4:	e00e      	b.n	8003cd4 <_malloc_r+0xa0>
 8003cb6:	6822      	ldr	r2, [r4, #0]
 8003cb8:	1b52      	subs	r2, r2, r5
 8003cba:	d41e      	bmi.n	8003cfa <_malloc_r+0xc6>
 8003cbc:	2a0b      	cmp	r2, #11
 8003cbe:	d916      	bls.n	8003cee <_malloc_r+0xba>
 8003cc0:	1961      	adds	r1, r4, r5
 8003cc2:	42a3      	cmp	r3, r4
 8003cc4:	6025      	str	r5, [r4, #0]
 8003cc6:	bf18      	it	ne
 8003cc8:	6059      	strne	r1, [r3, #4]
 8003cca:	6863      	ldr	r3, [r4, #4]
 8003ccc:	bf08      	it	eq
 8003cce:	6031      	streq	r1, [r6, #0]
 8003cd0:	5162      	str	r2, [r4, r5]
 8003cd2:	604b      	str	r3, [r1, #4]
 8003cd4:	4638      	mov	r0, r7
 8003cd6:	f104 060b 	add.w	r6, r4, #11
 8003cda:	f000 f865 	bl	8003da8 <__malloc_unlock>
 8003cde:	f026 0607 	bic.w	r6, r6, #7
 8003ce2:	1d23      	adds	r3, r4, #4
 8003ce4:	1af2      	subs	r2, r6, r3
 8003ce6:	d0b6      	beq.n	8003c56 <_malloc_r+0x22>
 8003ce8:	1b9b      	subs	r3, r3, r6
 8003cea:	50a3      	str	r3, [r4, r2]
 8003cec:	e7b3      	b.n	8003c56 <_malloc_r+0x22>
 8003cee:	6862      	ldr	r2, [r4, #4]
 8003cf0:	42a3      	cmp	r3, r4
 8003cf2:	bf0c      	ite	eq
 8003cf4:	6032      	streq	r2, [r6, #0]
 8003cf6:	605a      	strne	r2, [r3, #4]
 8003cf8:	e7ec      	b.n	8003cd4 <_malloc_r+0xa0>
 8003cfa:	4623      	mov	r3, r4
 8003cfc:	6864      	ldr	r4, [r4, #4]
 8003cfe:	e7b2      	b.n	8003c66 <_malloc_r+0x32>
 8003d00:	4634      	mov	r4, r6
 8003d02:	6876      	ldr	r6, [r6, #4]
 8003d04:	e7b9      	b.n	8003c7a <_malloc_r+0x46>
 8003d06:	230c      	movs	r3, #12
 8003d08:	4638      	mov	r0, r7
 8003d0a:	603b      	str	r3, [r7, #0]
 8003d0c:	f000 f84c 	bl	8003da8 <__malloc_unlock>
 8003d10:	e7a1      	b.n	8003c56 <_malloc_r+0x22>
 8003d12:	6025      	str	r5, [r4, #0]
 8003d14:	e7de      	b.n	8003cd4 <_malloc_r+0xa0>
 8003d16:	bf00      	nop
 8003d18:	200005ac 	.word	0x200005ac

08003d1c <_realloc_r>:
 8003d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d20:	4680      	mov	r8, r0
 8003d22:	4614      	mov	r4, r2
 8003d24:	460e      	mov	r6, r1
 8003d26:	b921      	cbnz	r1, 8003d32 <_realloc_r+0x16>
 8003d28:	4611      	mov	r1, r2
 8003d2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d2e:	f7ff bf81 	b.w	8003c34 <_malloc_r>
 8003d32:	b92a      	cbnz	r2, 8003d40 <_realloc_r+0x24>
 8003d34:	f7ff ff16 	bl	8003b64 <_free_r>
 8003d38:	4625      	mov	r5, r4
 8003d3a:	4628      	mov	r0, r5
 8003d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d40:	f000 f838 	bl	8003db4 <_malloc_usable_size_r>
 8003d44:	4284      	cmp	r4, r0
 8003d46:	4607      	mov	r7, r0
 8003d48:	d802      	bhi.n	8003d50 <_realloc_r+0x34>
 8003d4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003d4e:	d812      	bhi.n	8003d76 <_realloc_r+0x5a>
 8003d50:	4621      	mov	r1, r4
 8003d52:	4640      	mov	r0, r8
 8003d54:	f7ff ff6e 	bl	8003c34 <_malloc_r>
 8003d58:	4605      	mov	r5, r0
 8003d5a:	2800      	cmp	r0, #0
 8003d5c:	d0ed      	beq.n	8003d3a <_realloc_r+0x1e>
 8003d5e:	42bc      	cmp	r4, r7
 8003d60:	4622      	mov	r2, r4
 8003d62:	4631      	mov	r1, r6
 8003d64:	bf28      	it	cs
 8003d66:	463a      	movcs	r2, r7
 8003d68:	f7ff fbac 	bl	80034c4 <memcpy>
 8003d6c:	4631      	mov	r1, r6
 8003d6e:	4640      	mov	r0, r8
 8003d70:	f7ff fef8 	bl	8003b64 <_free_r>
 8003d74:	e7e1      	b.n	8003d3a <_realloc_r+0x1e>
 8003d76:	4635      	mov	r5, r6
 8003d78:	e7df      	b.n	8003d3a <_realloc_r+0x1e>
	...

08003d7c <_sbrk_r>:
 8003d7c:	b538      	push	{r3, r4, r5, lr}
 8003d7e:	2300      	movs	r3, #0
 8003d80:	4d05      	ldr	r5, [pc, #20]	; (8003d98 <_sbrk_r+0x1c>)
 8003d82:	4604      	mov	r4, r0
 8003d84:	4608      	mov	r0, r1
 8003d86:	602b      	str	r3, [r5, #0]
 8003d88:	f7fc fcd2 	bl	8000730 <_sbrk>
 8003d8c:	1c43      	adds	r3, r0, #1
 8003d8e:	d102      	bne.n	8003d96 <_sbrk_r+0x1a>
 8003d90:	682b      	ldr	r3, [r5, #0]
 8003d92:	b103      	cbz	r3, 8003d96 <_sbrk_r+0x1a>
 8003d94:	6023      	str	r3, [r4, #0]
 8003d96:	bd38      	pop	{r3, r4, r5, pc}
 8003d98:	200005b4 	.word	0x200005b4

08003d9c <__malloc_lock>:
 8003d9c:	4801      	ldr	r0, [pc, #4]	; (8003da4 <__malloc_lock+0x8>)
 8003d9e:	f000 b811 	b.w	8003dc4 <__retarget_lock_acquire_recursive>
 8003da2:	bf00      	nop
 8003da4:	200005b8 	.word	0x200005b8

08003da8 <__malloc_unlock>:
 8003da8:	4801      	ldr	r0, [pc, #4]	; (8003db0 <__malloc_unlock+0x8>)
 8003daa:	f000 b80c 	b.w	8003dc6 <__retarget_lock_release_recursive>
 8003dae:	bf00      	nop
 8003db0:	200005b8 	.word	0x200005b8

08003db4 <_malloc_usable_size_r>:
 8003db4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003db8:	1f18      	subs	r0, r3, #4
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	bfbc      	itt	lt
 8003dbe:	580b      	ldrlt	r3, [r1, r0]
 8003dc0:	18c0      	addlt	r0, r0, r3
 8003dc2:	4770      	bx	lr

08003dc4 <__retarget_lock_acquire_recursive>:
 8003dc4:	4770      	bx	lr

08003dc6 <__retarget_lock_release_recursive>:
 8003dc6:	4770      	bx	lr

08003dc8 <_init>:
 8003dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dca:	bf00      	nop
 8003dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dce:	bc08      	pop	{r3}
 8003dd0:	469e      	mov	lr, r3
 8003dd2:	4770      	bx	lr

08003dd4 <_fini>:
 8003dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dd6:	bf00      	nop
 8003dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dda:	bc08      	pop	{r3}
 8003ddc:	469e      	mov	lr, r3
 8003dde:	4770      	bx	lr
